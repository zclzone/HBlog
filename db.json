{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"7c8904d8ae40ded31da8b5edcd6452622e773527","modified":1597452382267},{"_id":"source/404.md","hash":"b66d6e6e442385a60d1eb47e02532f0ef9bc81a6","modified":1597302345100},{"_id":"source/categories/index.md","hash":"0abe2f438d6162781e6ed71aae9fbedd065b6d4c","modified":1597302119646},{"_id":"source/_posts/Bootstrap3-常用的类.md","hash":"4969be346cd99e6b9970f31a200f3bf22cf7c9b4","modified":1597452382280},{"_id":"source/_posts/CSS3 Flex布局.md","hash":"4dfac1258f1b9ca35c34d832707938bbd844a3a3","modified":1597452382297},{"_id":"source/contact/index.md","hash":"11be386a56c51b2a2b4c479e485bfaabd20f6613","modified":1597302237796},{"_id":"source/_posts/CSS学习-标签显示模式.md","hash":"f51da7e38ec2c9439de6a918ce4da2b85cbe0104","modified":1597452382315},{"_id":"source/_data/friends.json","hash":"3f8d2dec29382b8eadd8d96cc1540a8659b885a7","modified":1597374220267},{"_id":"source/_posts/插入排序算法.md","hash":"f989c3aa5cf4aa31c7c2393b8db2681b536a8130","modified":1597452382354},{"_id":"source/_posts/昨夜微风轻拂.md","hash":"a76e424a1586673faac9708bda71da2628cb50ca","modified":1597452382366},{"_id":"source/friends/index.md","hash":"0b92623d98fb6c131b8ad3720e40e632c9dbcef0","modified":1597389663549},{"_id":"source/tags/index.md","hash":"0e9700430018a08d73928e0b6ba275f40f23f191","modified":1597302164193},{"_id":"source/about/index.md","hash":"9ad54651a9bdf5bc41c83d6c4911499793fcb62f","modified":1597302204726},{"_id":"source/_posts/JavaScript高级程序设计学习笔记.md","hash":"4cc1f68be5c82a940f6be296ecd7947640b59dc0","modified":1597405326371},{"_id":"source/_posts/CSS学习笔记.md","hash":"88520bbebf513800ff81beba12c112b4242786dc","modified":1597452382340},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"db496f4d6b7e7cdddddf66a598102407a7a1eaaf","modified":1597453646881},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1597298854671},{"_id":"themes/hexo-theme-matery/README.md","hash":"1cc9e51fc2cd62e482197b8a3764fe338778a0fd","modified":1597298854676},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"13ce732a54ce08b0ca01f14fd09cbe8fc418de21","modified":1597298854701},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1597298854940},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"9baf9370d0d7494e8575934e4bd0fa6d24484052","modified":1597298854696},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"162136ceca6c95928c90a1adef8fabc2161d5c0e","modified":1597298854707},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"57733d52d17361e735fcc95f875e0b1b9ebdcbd8","modified":1597298854935},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"88e23163aae5dff7a2e7050f55c3754f0e76ae68","modified":1597298854930},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"4ac716d15d84e7c37f07308a5ec008a2ac090c9b","modified":1597298854943},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"72fb5af3fc2f8955e2eb10926bbe4532a04ccd1b","modified":1597298854948},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1597298854980},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"e9716a948172e6ad46c18cc7e78770cdc46f1857","modified":1597298854952},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"e179c72cb4eef88e5168cadafa2e1c3b46fd1486","modified":1597298854964},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1597298855011},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"058eb27ff10f5314d8b9e334c54419b9a6572315","modified":1597298854975},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1597298854713},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1597298854721},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"7d108c2764f55ce6b39896ef2338b027459b1bcf","modified":1597391336272},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1597298854717},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"3cabb8e3680858c1412277def37bdef73981be0f","modified":1597298854959},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"1b392f2160f962f62f3ddf5e1155c7f2f4888e1d","modified":1597298854734},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"58a7a07f8ab81ecc19a78d897955ca1ad73defb3","modified":1597298854726},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"27764936791ce36b527bea63689435346bbfb425","modified":1597298854745},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"07361d0b2b07252ebf8c286b8617262922eb8fa4","modified":1597318397393},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1597298854759},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1597298854750},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90888c945384aa1ee4650bd43bd7ea670f25828c","modified":1597298854754},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"adaeca6ae9064c41047c3fb4f8bd046b736ae457","modified":1597298854763},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"4bcdbd27273dd1b7098d4cfa6479b5d6b138cd12","modified":1597298854769},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"67e91d9e980c3baa4a64050937fee51db829b47f","modified":1597391025697},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1597298854784},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"e1264587db510ae1885405aed433592291ae74c4","modified":1597298854789},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"8ce2974b19765e1f05d935a4f18abf7c84a980da","modified":1597298854794},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"5a2179a9a3de6f56b0aaa154a11919b8f34fcbf9","modified":1597298854799},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1597298854803},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"7f583c935253e2bf6421791715ee9de4989add6e","modified":1597298854808},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"ea50a5669847740894d5737a6330bf1013ae2e65","modified":1597298854812},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1597298854731},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"e50fae64b6cfdbed18861eb49eca5018a920c7a4","modified":1597298854852},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"8ad8a7ec3f6438af496c51fd6bef1684e158a9ef","modified":1597298854819},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1597298854825},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"90c2ab31492f8226454537d6b987e9399119047d","modified":1597298854842},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"c5f1a2de30363f370c8c37994140d6ef4fd0c4b7","modified":1597298854849},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"f640583d45179abc1ef57951e7f61fb9e10f44c9","modified":1597298854856},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"908ddab5b5d5662c50b46ada0e03e06fe0a6c310","modified":1597298854829},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"d6692f8c81013191fce59f47df1b6171649181ca","modified":1597298854877},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"ef335be75e3f26580583af8699b8497f350ae200","modified":1597298854861},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"f67bc52bc5a2464ebe30f42c65c0ee38eeec2fda","modified":1597298854837},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"131e2eabf6b216210efd0746300889adfee357be","modified":1597298854873},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"3ef458166041a8a12e493cc5963a5af5d98c1dfc","modified":1597298854868},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"8fc0e6172abbed7084b06e3ed637ad37e2752c48","modified":1597298854881},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f5259f18a906f2862fe72b90c28125b5f6b7d0b1","modified":1597298854886},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"141f19a8aa41b7a21436f23ce114bd5fda932512","modified":1597298854890},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1597298854895},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1597298854918},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"fb5ee7674070956d134ddca6890a9bd3f398cc0f","modified":1597298854898},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"0c6c47ca8bb26d9f5d0e59137fb3514bf565e270","modified":1597391154786},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"03dcd0a7a9fdbcc2bc38a99a8fad96ae17a340fa","modified":1597298854922},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"b3c32b573a4a9ef3dfeffbd544a9c3f451e67a54","modified":1597298855007},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"ddfef10e80a09b8efb48c52ede773e71d5890c78","modified":1597298855016},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1597298855024},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"6eaab5fccff9ad69d1d877a0f0585e2fcb89ba52","modified":1597298854926},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"20f0b6155eee348276dd91790f6a52b1005a0518","modified":1597298854905},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1597298854987},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"416f2f47f34df031fe4eef050fc21a2de06fdb83","modified":1597298854912},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1597298855658},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1597298855000},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1597298855826},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1597298855700},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1597298855041},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1597298855048},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1597298855057},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1597298855033},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1597298855063},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1597298855223},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1597298855822},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1597298855231},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1597298855200},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1597298855243},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1597298855249},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1597298855236},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1597298855208},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1597298855216},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1597298855391},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1597298855401},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1597298855408},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1597298855492},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1597298855275},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1597298855534},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1597298855542},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1597298855256},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1597298855527},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9783581bec83e6bd6cd279f0af23a2862f46a587","modified":1597298855609},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1597298855613},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1597298855738},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1597298855747},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1597298855752},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1597298855770},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1597298855783},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1597298855723},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1597298855779},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1597298855809},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1597298855787},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1597298855800},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1597298855792},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1597298855814},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1597298855830},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1597298855362},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"9c0bacfbd4519d3859e3bbb06128ba241804d8b1","modified":1597298855333},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1597298855835},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1597298855129},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1597298855156},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1597298855150},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1597298855145},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1597298855551},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1597298855563},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1597298855569},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1597298855575},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1597298855432},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1597298855582},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1597298855558},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1597298855595},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1597298855464},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1597298855467},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1597298855470},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1597298855474},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1597298855440},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1597298855479},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"3229fd9dd7bbcde003fd3b984da076f7092d7aaa","modified":1597298854683},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1597298855446},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1597298855452},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"a8927ac2830b2fdd4a729eb0eb7f80923539ceb9","modified":1597298855414},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1597298855458},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1597298855283},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"d6c03e8c3e547b5f48878081d10559b80f626948","modified":1597298855623},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1597298855664},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1597298855675},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1597298855718},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1597298855728},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1597298855680},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1597298855743},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1597298855756},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1597298855713},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1597298855761},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1597298855733},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1597298855765},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1597298855775},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1597298855805},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1597298855796},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1597298855818},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1597298855370},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1597298855125},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1597298855112},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1597298855093},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1597298855121},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1597298855194},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"6390d0a6e6211ebbd68b49759b4dec8b2a9f04c9","modified":1597298855076},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1597298855190},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1597298855704},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1597298855503},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1597298855514},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"9cb4babc20eb8fb5a86c4b0cc894fdb0f3cd9534","modified":1597298855635},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1597298855696},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1597298855691},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"7a3534269fd922d722a76c3affefc68e21246898","modified":1597298855344},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1597298855136},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1597298855165},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1597298855181},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1597298855669},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1597298855685},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1597298855102},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1597298855303},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1597298855175},{"_id":"public/search.xml","hash":"285241914d21589d8d32d587c9ad8a7b8e0b5250","modified":1597454135235},{"_id":"public/contact/index.html","hash":"a1164906606d262917d20b5d651deb64d4f68ad4","modified":1597454135235},{"_id":"public/404.html","hash":"f256c9963e8bc6784491358410dcefd23dad0d12","modified":1597454135235},{"_id":"public/friends/index.html","hash":"5b21546945662a82058183e75e801cd02ebd43a8","modified":1597454135235},{"_id":"public/tags/index.html","hash":"98cbafe0f5e38639efff3e8cf9085061f77e9372","modified":1597454135235},{"_id":"public/about/index.html","hash":"7cab23f18bfa9f6e1427f97743f38a21690f9e28","modified":1597454135235},{"_id":"public/2020/08/14/CSS3 Flex布局/index.html","hash":"5566610ff3e8e6f4ab30832aaadd48e8c53375a6","modified":1597454135235},{"_id":"public/2020/08/14/JavaScript高级程序设计学习笔记/index.html","hash":"6c0a1859f5ff3543055013e80cb0400b040d48b8","modified":1597454135235},{"_id":"public/2019/06/23/CSS学习笔记/index.html","hash":"526d17a5e3d966a667423a2cc0819ef98a1be58f","modified":1597454135235},{"_id":"public/2019/05/01/Bootstrap3-常用的类/index.html","hash":"54a3fc4024cfdc0e2c03891e1832af12ed49d201","modified":1597454135235},{"_id":"public/2019/04/27/插入排序算法/index.html","hash":"7065661c5008496746c0962b5926ccb84d794e17","modified":1597454135235},{"_id":"public/categories/index.html","hash":"9374bf3526a97abcc1f0ec3185bfde655da80abe","modified":1597454135235},{"_id":"public/2019/04/09/昨夜微风轻拂/index.html","hash":"bb4e6c2b1b2d7ee0b46aa101793bc7d71fb1c2c8","modified":1597454135235},{"_id":"public/2019/03/23/CSS学习-标签显示模式/index.html","hash":"d219174856424ae17faedae59aefb0a79d2cf18a","modified":1597454135235},{"_id":"public/archives/2019/04/index.html","hash":"e47d53e074657ca56c51c8909010b8bc82949516","modified":1597454135235},{"_id":"public/archives/index.html","hash":"d3f949fee1b9059572af80df6f8765950fc79055","modified":1597454135235},{"_id":"public/archives/2019/index.html","hash":"244cd0284df87ffe8de1f0a30ed4dc7f2db0878d","modified":1597454135235},{"_id":"public/archives/2019/03/index.html","hash":"6f04c4558b0ee12231c0954bc8c5a6b4c8ede842","modified":1597454135235},{"_id":"public/archives/2020/index.html","hash":"8f43f32178fe57f671c815c0676a62906a3f6bae","modified":1597454135235},{"_id":"public/archives/2019/05/index.html","hash":"106b2d88c9d1fb61f5f620dcd2bd4d638eda57db","modified":1597454135235},{"_id":"public/archives/2019/06/index.html","hash":"ae278eee6daacbfc21b9cb1d87e5b3d0316c6539","modified":1597454135235},{"_id":"public/archives/2020/08/index.html","hash":"8f5ccd8fe6f408bad972a127b266df4b545e6b8f","modified":1597454135235},{"_id":"public/categories/CSS/index.html","hash":"09e36e1ab6d886197922e96d05f0b10c18773477","modified":1597454135235},{"_id":"public/categories/算法/index.html","hash":"17866366e8fa27b394b75b8e0de2d0eeee685926","modified":1597454135235},{"_id":"public/categories/情感/index.html","hash":"b48fabe8e8080e18aaacfb594fc1369b1ebfe1c2","modified":1597454135235},{"_id":"public/tags/css/index.html","hash":"7ede2a0bca9deeeeb1628588cd11dde13c4d7dfb","modified":1597454135235},{"_id":"public/tags/算法/index.html","hash":"a017f3c6ade31b2ef78b5f570ef847ddac363620","modified":1597454135235},{"_id":"public/tags/情感/index.html","hash":"d703413a947e206ce45eee7a305a0edea06a061e","modified":1597454135235},{"_id":"public/categories/JavaScript/index.html","hash":"5c43be3f931cfc04bfc31b5c6aa624346b61b0c1","modified":1597454135235},{"_id":"public/tags/JavaScript/index.html","hash":"5b88736bf20e627483c2a49980f209de2e622e1a","modified":1597454135235},{"_id":"public/index.html","hash":"8a3f5885a30bf73f581ebbc73db3abefeaaece54","modified":1597454135235},{"_id":"public/CNAME","hash":"7c8904d8ae40ded31da8b5edcd6452622e773527","modified":1597454135235},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1597454135235},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1597454135235},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1597454135235},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1597454135235},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1597454135235},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1597454135235},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1597454135235},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1597454135235},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1597454135235},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1597454135235},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1597454135235},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1597454135235},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1597454135235},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1597454135235},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1597454135235},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1597454135235},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1597454135235},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1597454135235},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1597454135235},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1597454135235},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1597454135235},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1597454135235},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1597454135235},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1597454135235},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1597454135235},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1597454135235},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1597454135235},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1597454135235},{"_id":"public/css/prism-line-numbers.css","hash":"a1692758d22c6cdf6fd1a8dafc9b4b98e41d3138","modified":1597454135235},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1597454135235},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1597454135235},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1597454135235},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1597454135235},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1597454135235},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1597454135235},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1597454135235},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1597454135235},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1597454135235},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1597454135235},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1597454135235},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1597454135235},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1597454135235},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1597454135235},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1597454135235},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1597454135235},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1597454135235},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1597454135235},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1597454135235},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1597454135235},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1597454135235},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1597454135235},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1597454135235},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1597454135235},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1597454135235},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1597454135235},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1597454135235},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1597454135235},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1597454135235},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1597454135235},{"_id":"public/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1597454135235},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1597454135235},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1597454135235},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1597454135235},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1597454135235},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1597454135235},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1597454135235},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1597454135235},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1597454135235},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1597454135235},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1597454135235},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1597454135235},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1597454135235},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1597454135235},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1597454135235},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1597454135235},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1597454135235},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1597454135235},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1597454135235},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1597454135235},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1597454135235},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1597454135235},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1597454135235},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1597454135235},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1597454135235},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1597454135235},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1597454135235},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1597454135235},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1597454135235},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1597454135235},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1597454135235},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1597454135235},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1597454135235},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1597454135235},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1597454135235},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1597454135235},{"_id":"public/css/matery.css","hash":"7e13582c0d0acdcd66799f45ec9eb10cdf31d629","modified":1597454135235},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1597454135235},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1597454135235},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1597454135235},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1597454135235},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1597454135235},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1597454135235},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1597454135235},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1597454135235},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1597454135235},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1597454135235},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1597454135235},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1597454135235},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1597454135235},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1597454135235},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1597454135235},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1597454135235},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1597454135235},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1597454135235},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1597454135235}],"Category":[{"name":"CSS","_id":"ckduyy4u20004qsnv97495ikr"},{"name":"算法","_id":"ckduyy4ub000lqsnvbt27d903"},{"name":"情感","_id":"ckduyy4ud000qqsnvfyj4gxnz"},{"name":"JavaScript","_id":"ckduyy4ud000uqsnvacl07m2a"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"404","date":"2020-08-13T07:04:11.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2020-08-13 15:04:11\ntype: '404'\nlayout: '404'\ndescription: 'Oops～，我崩溃了！找不到你想要的页面 :('\n---\n","updated":"2020-08-13T07:05:45.100Z","path":"404.html","comments":1,"_id":"ckduyy4tp0000qsnveaxffvsu","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"categories","date":"2020-08-13T07:01:25.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-08-13 15:01:25\ntype: 'categories'\nlayout: 'categories'\n---\n","updated":"2020-08-13T07:01:59.646Z","path":"categories/index.html","comments":1,"_id":"ckduyy4tz0002qsnv6gfc01wg","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"contact","date":"2018-09-30T09:25:30.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2018-09-30 17:25:30\ntype: 'contact'\nlayout: 'contact'\n---\n","updated":"2020-08-13T07:03:57.796Z","path":"contact/index.html","comments":1,"_id":"ckduyy4u30006qsnv4128h3ot","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2020-08-13T07:04:11.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2020-08-13 15:04:11\ntype: 'friends'\nlayout: 'friends'\n---\n","updated":"2020-08-14T07:21:03.549Z","path":"friends/index.html","comments":1,"_id":"ckduyy4u50008qsnvglewf9md","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2020-08-13T07:02:21.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-08-13 15:02:21\ntype: 'tags'\nlayout: 'tags'\n---\n","updated":"2020-08-13T07:02:44.193Z","path":"tags/index.html","comments":1,"_id":"ckduyy4u6000aqsnvehy18j9o","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"about","date":"2020-08-13T07:03:00.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-08-13 15:03:00\ntype: 'about'\nlayout: 'about'\n---\n","updated":"2020-08-13T07:03:24.726Z","path":"about/index.html","comments":1,"_id":"ckduyy4u9000fqsnv0z3he4bc","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""}],"Post":[{"title":"Bootstrap3 常用的类","date":"2019-05-01T12:39:31.000Z","_content":"\n# **<center>Bootstrap3 常用的类</center>**\n\n#### 布局容器\n\n> container 响应式容器\n\n> container-fluid 流式容器\n\n#### 栅格系统\n\n<!-- more -->\n\n> row 行\n\n> col-\\*-\\* 列\n\n```\n实例 col-md-3\n第一个参数:\n  lg 大屏：大屏及以上生效\n  md 中屏：中屏及以上生效\n  sm 小屏：小屏及以上生效\n  xs 超小屏：超小屏及以上生效\n第二个参数:Row 默认会把一行分成 12 等份列，这里第二个参数表示的是当前元素占 12 等份当中的几份\n```\n\n> col-xs-offset-4 偏移，往右偏移四等份\n\n> col-xs-push-\\* 排序 往后推几份\n> col-xs-pull-\\* 排序 往前拉几份\n\n> hidden-\\* 控制在某种屏幕下隐藏，其他屏幕可见，可选参数 lg、md、sm、xs\n\n> pull-left 左浮动\n> pull-right 右浮动\n\n> text-right 文字右对齐\n> text-left 文字左对齐\n> text-center 居中\n","source":"_posts/Bootstrap3-常用的类.md","raw":"---\ntitle: Bootstrap3 常用的类\ndate: 2019-05-01 20:39:31\ncategories: CSS\ntags: css\n---\n\n# **<center>Bootstrap3 常用的类</center>**\n\n#### 布局容器\n\n> container 响应式容器\n\n> container-fluid 流式容器\n\n#### 栅格系统\n\n<!-- more -->\n\n> row 行\n\n> col-\\*-\\* 列\n\n```\n实例 col-md-3\n第一个参数:\n  lg 大屏：大屏及以上生效\n  md 中屏：中屏及以上生效\n  sm 小屏：小屏及以上生效\n  xs 超小屏：超小屏及以上生效\n第二个参数:Row 默认会把一行分成 12 等份列，这里第二个参数表示的是当前元素占 12 等份当中的几份\n```\n\n> col-xs-offset-4 偏移，往右偏移四等份\n\n> col-xs-push-\\* 排序 往后推几份\n> col-xs-pull-\\* 排序 往前拉几份\n\n> hidden-\\* 控制在某种屏幕下隐藏，其他屏幕可见，可选参数 lg、md、sm、xs\n\n> pull-left 左浮动\n> pull-right 右浮动\n\n> text-right 文字右对齐\n> text-left 文字左对齐\n> text-center 居中\n","slug":"Bootstrap3-常用的类","published":1,"updated":"2020-08-15T00:46:22.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckduyy4tv0001qsnv8u7h88z0","content":"<h1 id=\"Bootstrap3-常用的类\"><a href=\"#Bootstrap3-常用的类\" class=\"headerlink\" title=\"Bootstrap3 常用的类\"></a><strong><center>Bootstrap3 常用的类</center></strong></h1><h4 id=\"布局容器\"><a href=\"#布局容器\" class=\"headerlink\" title=\"布局容器\"></a>布局容器</h4><blockquote>\n<p>container 响应式容器</p>\n</blockquote>\n<blockquote>\n<p>container-fluid 流式容器</p>\n</blockquote>\n<h4 id=\"栅格系统\"><a href=\"#栅格系统\" class=\"headerlink\" title=\"栅格系统\"></a>栅格系统</h4><a id=\"more\"></a>\n\n<blockquote>\n<p>row 行</p>\n</blockquote>\n<blockquote>\n<p>col-*-* 列</p>\n</blockquote>\n<pre><code>实例 col-md-3\n第一个参数:\n  lg 大屏：大屏及以上生效\n  md 中屏：中屏及以上生效\n  sm 小屏：小屏及以上生效\n  xs 超小屏：超小屏及以上生效\n第二个参数:Row 默认会把一行分成 12 等份列，这里第二个参数表示的是当前元素占 12 等份当中的几份</code></pre>\n<blockquote>\n<p>col-xs-offset-4 偏移，往右偏移四等份</p>\n</blockquote>\n<blockquote>\n<p>col-xs-push-* 排序 往后推几份<br>col-xs-pull-* 排序 往前拉几份</p>\n</blockquote>\n<blockquote>\n<p>hidden-* 控制在某种屏幕下隐藏，其他屏幕可见，可选参数 lg、md、sm、xs</p>\n</blockquote>\n<blockquote>\n<p>pull-left 左浮动<br>pull-right 右浮动</p>\n</blockquote>\n<blockquote>\n<p>text-right 文字右对齐<br>text-left 文字左对齐<br>text-center 居中</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"<h1 id=\"Bootstrap3-常用的类\"><a href=\"#Bootstrap3-常用的类\" class=\"headerlink\" title=\"Bootstrap3 常用的类\"></a><strong><center>Bootstrap3 常用的类</center></strong></h1><h4 id=\"布局容器\"><a href=\"#布局容器\" class=\"headerlink\" title=\"布局容器\"></a>布局容器</h4><blockquote>\n<p>container 响应式容器</p>\n</blockquote>\n<blockquote>\n<p>container-fluid 流式容器</p>\n</blockquote>\n<h4 id=\"栅格系统\"><a href=\"#栅格系统\" class=\"headerlink\" title=\"栅格系统\"></a>栅格系统</h4>","more":"<blockquote>\n<p>row 行</p>\n</blockquote>\n<blockquote>\n<p>col-*-* 列</p>\n</blockquote>\n<pre><code>实例 col-md-3\n第一个参数:\n  lg 大屏：大屏及以上生效\n  md 中屏：中屏及以上生效\n  sm 小屏：小屏及以上生效\n  xs 超小屏：超小屏及以上生效\n第二个参数:Row 默认会把一行分成 12 等份列，这里第二个参数表示的是当前元素占 12 等份当中的几份</code></pre>\n<blockquote>\n<p>col-xs-offset-4 偏移，往右偏移四等份</p>\n</blockquote>\n<blockquote>\n<p>col-xs-push-* 排序 往后推几份<br>col-xs-pull-* 排序 往前拉几份</p>\n</blockquote>\n<blockquote>\n<p>hidden-* 控制在某种屏幕下隐藏，其他屏幕可见，可选参数 lg、md、sm、xs</p>\n</blockquote>\n<blockquote>\n<p>pull-left 左浮动<br>pull-right 右浮动</p>\n</blockquote>\n<blockquote>\n<p>text-right 文字右对齐<br>text-left 文字左对齐<br>text-center 居中</p>\n</blockquote>"},{"title":"CSS3 Flex布局","date":"2020-08-14T11:20:00.000Z","author":"张传龙","top":true,"cover":true,"summary":"CSS3 Flex布局","_content":"\n# Css3 Flex 布局\n\n## 属性总览\n\n| 作用在 flex 容器上 | 作用在 flex 子项上 |\n| ------------------ | ------------------ |\n| flex-direction     | order              |\n| flex-wrap          | flex-grow          |\n| flex-flow          | flex-shrink        |\n| justify-content    | flex-basis         |\n| align-items        | flex               |\n| align-content      | align-self         |\n\n> 无论作用在 flex 容器上，还是作用在 flex 子项，都是控制的 flex 子项的呈现，只是前者控制的是整体，后者控制的是个体。\n\n## 属性详解\n\n### 1. flex-direction\n\n`flex-direction`用来控制子项整体布局方向，是从左往右还是从右往左，是从上往下还是从下往上。\n\n属性如下:\n\n`row`: 默认值，显示为行，从左到右\n\n`row-reverse`: 显示为行，方向从右到左，与 row 相反\n\n`column`: 显示为列，从上至下\n\n`column`: 显示为列，从下往上\n\n语法如下:\n\n```css\nflex-direction: row | row-reverse | column | column-reverse;\n```\n\n### 2. flex-wrap\n\n`flex-wrap`用来控制子项是单行显示还是换行显示\n\n属性如下:\n\n`nowrap`: 默认值，不换行，所有的子项单行显示，如果宽度溢出会压缩宽度显示\n\n`wrap`: 宽度溢出则换行显示\n\n`wrap-reverse`: 宽度溢出换行显示，从下往上显示，即原本换行在下面的子项显示在上面\n\n语法如下:\n\n```css\nflex-wrap: nowrap | wrap | wrap-reverse;\n```\n\n### 3. flex-flow\n\n`flex-flow`是 **_flex-direction_** 和 **_flex-wrap_** 的缩写\n\n语法如下:\n\n```css\nflex-flow: row wrap;\n```\n\n> 当多属性同时使用的时候，使用空格分隔\n\n### 4. justify-conten\n\n`justify-content`属性决定了水平方向子项的对齐和分布方式\n\n属性如下:\n\n`flex-start`: 默认值，左对齐\n\n`flex-end`: 右对齐\n\n`center`: 居中对齐\n\n`space-between`: 两端对齐，多余的空白只在元素中间分配\n\n`space-around`: 环绕，每个子项两侧都环绕互不干扰的等宽间距，最终表现为两端空白是中间空白的一半\n\n`space-evenly`: 均匀分布，每个子项两侧空白完全相等\n\n语法如下:\n\n```css\njustify-content: flex-start | flex-end | center | space-between | space-arount |\n  space-evenly;\n```\n\n### 5. align-items\n\n`align-items`中的 items 指的是 flex 中的子项，因此`align-items`指的就是 flex 子项们相对于 flex 容器在垂直方向上的对齐方式\n\n属性如下:\n\n`stretch`: 默认值，子项拉伸显示。如果子项设置了高度，则按设置的高度渲染，而不是拉伸\n\n`flex-start`: 顶部对齐\n\n`flex-end`: 底部对齐\n\n`center`: 垂直居中对齐\n\n`baseline`: 相对于 flex 容器的基线对齐\n\n### 6. align-content\n\n`align-content`可以看成是和 justify-content 是相似且对立的属性，`justify-content`指的是水平方向 flex 子项的对齐和分布方式，而 align-content 则是指垂直方向每一行 flex 子项的对齐和分布方式\n\n> 如果所有 flex 子项只有一行，则 align-content 属性是没有任何效果的\n\n属性如下:\n\n`stretch`: 默认值。每一行 flex 子元素都等比例拉伸。例如，如果共两行 flex 子元素，则每一行拉伸高度是 50%。\n\n`flex-start`: 逻辑 CSS 属性值，与文档流方向相关。默认表现为顶部堆砌。\n\n`flex-end`: 逻辑 CSS 属性值，与文档流方向相关。默认表现为底部堆放。\n\n`center`: 表现为整体垂直居中对齐。\n\n`space-between`: 表现为上下两行两端对齐。剩下每一行元素等分剩余空间。\n\n`space-around`: 每一行元素上下都享有独立不重叠的空白空间。\n\n`space-evenly`: 每一行元素都完全上下等分。\n\n### 7. order (==作用在 flex 子项==)\n\n`order`可以改变一个 flex 子项的排序位置\n\n> 所有 flex 子项默认 order 属性值为 0，如果想让某一子项在最前面显示，设置比 0 小的整数值就行了，如：-1\n\n语法如下:\n\n```css\norder: -1;\n```\n\n### 8. flex-grow (==作用在 flex 子项==)\n\n`flex-grow`指扩展 flex 子项所占据的宽度，扩展的空间就是除去元素外剩余的空白间隙\n\n> flex-grow 不支持负值，默认值是 0，表示不占用剩余的空白间隙扩展自己的宽度。如果 flex-grow 大于 0，则 flex 容器剩余空间的分配就会发生，具体规则如下：\n\n- 所有剩余空间总量是 1。\n- 如果只有一个 flex 子项设置了 flex-grow 属性值：\n\n  - 如果 flex-grow 值小于 1，则扩展的空间就总剩余空间和这个比例的计算值。\n  - 如果 flex-grow 值大于 1，则独享所有剩余空间。\n\n- 如果有多个 flex 设置了 flex-grow 属性值：\n  - 如果 flex-grow 值总和小于 1，则每个子项扩展的空间就总剩余空间和当前元素设置的 flex-grow 比例的计算值。\n  - 如果 flex-grow 值总和大于 1，则所有剩余空间被利用，分配比例就是 flex-grow 属性值的比例。例如所有的 flex 子项都设置 flex-grow:1，则表示剩余空白间隙大家等分，如果设置的 flex-grow 比例是 1:2:1，则中间的 flex 子项占据一半的空白间隙，剩下的前后两个元素等分。\n\n语法如下:\n\n```css\nflex-grow: 0.5; /* 数值，可以是小数，默认值是 0 */\n```\n\n### 9. flex-shrink(==作用在 flex 子项==)\n\nshrink: 收缩，`flex-shrink`指的是当 flex 容器空间不足时候，单个元素的收缩比例。\n\n> flex-shrink 不支持负值，默认值是 1，也就是默认所有的 flex 子项都会收缩。如果设置为 0，则表示不收缩，保持原始的宽度。\n\n已知 flex 子项不换行，且容器空间不足，不足的空间就是“完全收缩的尺寸”：\n\n- 如果只有一个 flex 子项设置了 flex-shrink：\n  - flex-shrink 值小于 1，则收缩的尺寸不完全，会有一部分内容溢出 flex 容器。\n  - flex-shrink 值大于等于 1，则收缩完全，正好填满 flex 容器。\n- 如果多个 flex 子项设置了 flex-shrink：\n  - flex-shrink 值的总和小于 1，则收缩的尺寸不完全，每个元素收缩尺寸占“完全收缩的尺寸”的比例就是设置的 flex-shrink 的值。\n  - flex-shrink 值的总和大于 1，则收缩完全，每个元素收缩尺寸的比例和 flex-shrink 值的比例一样。下面案例演示的就是此场景。\n\n语法如下:\n\n```css\nflex-shrink: 0; /* 数值，可以是小数，默认值是 1 */\n```\n\n### 10. flex-basis(==作用在 flex 子项==)\n\n`flex-basis`定义了在分配剩余空间之前元素的默认大小。\n\n默认值是 auto，就是自动。有设置 width 则占据空间就是 width，没有设置就按内容宽度来。如果同时设置 width 和 flex-basis，就渲染表现来看，会忽略 width。flex 顾名思义就是弹性的意思，因此，实际上不建议对 flex 子项使用 width 属性，因为不够弹性。\n\n> 当剩余空间不足的时候，flex 子项的实际宽度通常并不是设置的 flex-basis 尺寸，因为 flex 布局剩余空间不足的时候默认会收缩。\n\n语法如下:\n\n```css\nflex-basis: <length> | auto; /* 默认值是 auto */\n```\n\n### 11. flex(==flex 子项中==)\n\n`flex`属性是 flex-grow，flex-shrink 和 flex-basis 的缩写。\n\n语法如下:\n\n```css\nflex: none | auto | [ < 'flex-grow' > < 'flex-shrink' >? || < 'flex-basis' > ];\n```\n\n> 第 2 和第 3 个参数（flex-shrink 和 flex-basis）是可选的。默认值为 0 1 auto。\n\n### 12. align-self(==作用在 flex 子项==)\n\n`align-self`指控制单独某一个 flex 子项的垂直对齐方式，写在 flex 容器上的这个 align-items 属性，后面是 items，有个 s，表示子项们，是全体；这里是 self，单独一个个体。语法几乎一样：\n\n```css\nalign-self: auto | flex-start | flex-end | center | baseline | stretch;\n```\n\n唯一区别就是 align-self 多了个 auto（默认值），表示继承自 flex 容器的 align-items 属性值。\n","source":"_posts/CSS3 Flex布局.md","raw":"---\ntitle: CSS3 Flex布局\ndate: 2020-08-14 19:20\nauthor: 张传龙\ntop: true\ncover: true\nsummary: CSS3 Flex布局\ncategories: CSS\ntags: css\n---\n\n# Css3 Flex 布局\n\n## 属性总览\n\n| 作用在 flex 容器上 | 作用在 flex 子项上 |\n| ------------------ | ------------------ |\n| flex-direction     | order              |\n| flex-wrap          | flex-grow          |\n| flex-flow          | flex-shrink        |\n| justify-content    | flex-basis         |\n| align-items        | flex               |\n| align-content      | align-self         |\n\n> 无论作用在 flex 容器上，还是作用在 flex 子项，都是控制的 flex 子项的呈现，只是前者控制的是整体，后者控制的是个体。\n\n## 属性详解\n\n### 1. flex-direction\n\n`flex-direction`用来控制子项整体布局方向，是从左往右还是从右往左，是从上往下还是从下往上。\n\n属性如下:\n\n`row`: 默认值，显示为行，从左到右\n\n`row-reverse`: 显示为行，方向从右到左，与 row 相反\n\n`column`: 显示为列，从上至下\n\n`column`: 显示为列，从下往上\n\n语法如下:\n\n```css\nflex-direction: row | row-reverse | column | column-reverse;\n```\n\n### 2. flex-wrap\n\n`flex-wrap`用来控制子项是单行显示还是换行显示\n\n属性如下:\n\n`nowrap`: 默认值，不换行，所有的子项单行显示，如果宽度溢出会压缩宽度显示\n\n`wrap`: 宽度溢出则换行显示\n\n`wrap-reverse`: 宽度溢出换行显示，从下往上显示，即原本换行在下面的子项显示在上面\n\n语法如下:\n\n```css\nflex-wrap: nowrap | wrap | wrap-reverse;\n```\n\n### 3. flex-flow\n\n`flex-flow`是 **_flex-direction_** 和 **_flex-wrap_** 的缩写\n\n语法如下:\n\n```css\nflex-flow: row wrap;\n```\n\n> 当多属性同时使用的时候，使用空格分隔\n\n### 4. justify-conten\n\n`justify-content`属性决定了水平方向子项的对齐和分布方式\n\n属性如下:\n\n`flex-start`: 默认值，左对齐\n\n`flex-end`: 右对齐\n\n`center`: 居中对齐\n\n`space-between`: 两端对齐，多余的空白只在元素中间分配\n\n`space-around`: 环绕，每个子项两侧都环绕互不干扰的等宽间距，最终表现为两端空白是中间空白的一半\n\n`space-evenly`: 均匀分布，每个子项两侧空白完全相等\n\n语法如下:\n\n```css\njustify-content: flex-start | flex-end | center | space-between | space-arount |\n  space-evenly;\n```\n\n### 5. align-items\n\n`align-items`中的 items 指的是 flex 中的子项，因此`align-items`指的就是 flex 子项们相对于 flex 容器在垂直方向上的对齐方式\n\n属性如下:\n\n`stretch`: 默认值，子项拉伸显示。如果子项设置了高度，则按设置的高度渲染，而不是拉伸\n\n`flex-start`: 顶部对齐\n\n`flex-end`: 底部对齐\n\n`center`: 垂直居中对齐\n\n`baseline`: 相对于 flex 容器的基线对齐\n\n### 6. align-content\n\n`align-content`可以看成是和 justify-content 是相似且对立的属性，`justify-content`指的是水平方向 flex 子项的对齐和分布方式，而 align-content 则是指垂直方向每一行 flex 子项的对齐和分布方式\n\n> 如果所有 flex 子项只有一行，则 align-content 属性是没有任何效果的\n\n属性如下:\n\n`stretch`: 默认值。每一行 flex 子元素都等比例拉伸。例如，如果共两行 flex 子元素，则每一行拉伸高度是 50%。\n\n`flex-start`: 逻辑 CSS 属性值，与文档流方向相关。默认表现为顶部堆砌。\n\n`flex-end`: 逻辑 CSS 属性值，与文档流方向相关。默认表现为底部堆放。\n\n`center`: 表现为整体垂直居中对齐。\n\n`space-between`: 表现为上下两行两端对齐。剩下每一行元素等分剩余空间。\n\n`space-around`: 每一行元素上下都享有独立不重叠的空白空间。\n\n`space-evenly`: 每一行元素都完全上下等分。\n\n### 7. order (==作用在 flex 子项==)\n\n`order`可以改变一个 flex 子项的排序位置\n\n> 所有 flex 子项默认 order 属性值为 0，如果想让某一子项在最前面显示，设置比 0 小的整数值就行了，如：-1\n\n语法如下:\n\n```css\norder: -1;\n```\n\n### 8. flex-grow (==作用在 flex 子项==)\n\n`flex-grow`指扩展 flex 子项所占据的宽度，扩展的空间就是除去元素外剩余的空白间隙\n\n> flex-grow 不支持负值，默认值是 0，表示不占用剩余的空白间隙扩展自己的宽度。如果 flex-grow 大于 0，则 flex 容器剩余空间的分配就会发生，具体规则如下：\n\n- 所有剩余空间总量是 1。\n- 如果只有一个 flex 子项设置了 flex-grow 属性值：\n\n  - 如果 flex-grow 值小于 1，则扩展的空间就总剩余空间和这个比例的计算值。\n  - 如果 flex-grow 值大于 1，则独享所有剩余空间。\n\n- 如果有多个 flex 设置了 flex-grow 属性值：\n  - 如果 flex-grow 值总和小于 1，则每个子项扩展的空间就总剩余空间和当前元素设置的 flex-grow 比例的计算值。\n  - 如果 flex-grow 值总和大于 1，则所有剩余空间被利用，分配比例就是 flex-grow 属性值的比例。例如所有的 flex 子项都设置 flex-grow:1，则表示剩余空白间隙大家等分，如果设置的 flex-grow 比例是 1:2:1，则中间的 flex 子项占据一半的空白间隙，剩下的前后两个元素等分。\n\n语法如下:\n\n```css\nflex-grow: 0.5; /* 数值，可以是小数，默认值是 0 */\n```\n\n### 9. flex-shrink(==作用在 flex 子项==)\n\nshrink: 收缩，`flex-shrink`指的是当 flex 容器空间不足时候，单个元素的收缩比例。\n\n> flex-shrink 不支持负值，默认值是 1，也就是默认所有的 flex 子项都会收缩。如果设置为 0，则表示不收缩，保持原始的宽度。\n\n已知 flex 子项不换行，且容器空间不足，不足的空间就是“完全收缩的尺寸”：\n\n- 如果只有一个 flex 子项设置了 flex-shrink：\n  - flex-shrink 值小于 1，则收缩的尺寸不完全，会有一部分内容溢出 flex 容器。\n  - flex-shrink 值大于等于 1，则收缩完全，正好填满 flex 容器。\n- 如果多个 flex 子项设置了 flex-shrink：\n  - flex-shrink 值的总和小于 1，则收缩的尺寸不完全，每个元素收缩尺寸占“完全收缩的尺寸”的比例就是设置的 flex-shrink 的值。\n  - flex-shrink 值的总和大于 1，则收缩完全，每个元素收缩尺寸的比例和 flex-shrink 值的比例一样。下面案例演示的就是此场景。\n\n语法如下:\n\n```css\nflex-shrink: 0; /* 数值，可以是小数，默认值是 1 */\n```\n\n### 10. flex-basis(==作用在 flex 子项==)\n\n`flex-basis`定义了在分配剩余空间之前元素的默认大小。\n\n默认值是 auto，就是自动。有设置 width 则占据空间就是 width，没有设置就按内容宽度来。如果同时设置 width 和 flex-basis，就渲染表现来看，会忽略 width。flex 顾名思义就是弹性的意思，因此，实际上不建议对 flex 子项使用 width 属性，因为不够弹性。\n\n> 当剩余空间不足的时候，flex 子项的实际宽度通常并不是设置的 flex-basis 尺寸，因为 flex 布局剩余空间不足的时候默认会收缩。\n\n语法如下:\n\n```css\nflex-basis: <length> | auto; /* 默认值是 auto */\n```\n\n### 11. flex(==flex 子项中==)\n\n`flex`属性是 flex-grow，flex-shrink 和 flex-basis 的缩写。\n\n语法如下:\n\n```css\nflex: none | auto | [ < 'flex-grow' > < 'flex-shrink' >? || < 'flex-basis' > ];\n```\n\n> 第 2 和第 3 个参数（flex-shrink 和 flex-basis）是可选的。默认值为 0 1 auto。\n\n### 12. align-self(==作用在 flex 子项==)\n\n`align-self`指控制单独某一个 flex 子项的垂直对齐方式，写在 flex 容器上的这个 align-items 属性，后面是 items，有个 s，表示子项们，是全体；这里是 self，单独一个个体。语法几乎一样：\n\n```css\nalign-self: auto | flex-start | flex-end | center | baseline | stretch;\n```\n\n唯一区别就是 align-self 多了个 auto（默认值），表示继承自 flex 容器的 align-items 属性值。\n","slug":"CSS3 Flex布局","published":1,"updated":"2020-08-15T00:46:22.297Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckduyy4u00003qsnvf0ztewek","content":"<h1 id=\"Css3-Flex-布局\"><a href=\"#Css3-Flex-布局\" class=\"headerlink\" title=\"Css3 Flex 布局\"></a>Css3 Flex 布局</h1><h2 id=\"属性总览\"><a href=\"#属性总览\" class=\"headerlink\" title=\"属性总览\"></a>属性总览</h2><table>\n<thead>\n<tr>\n<th>作用在 flex 容器上</th>\n<th>作用在 flex 子项上</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>flex-direction</td>\n<td>order</td>\n</tr>\n<tr>\n<td>flex-wrap</td>\n<td>flex-grow</td>\n</tr>\n<tr>\n<td>flex-flow</td>\n<td>flex-shrink</td>\n</tr>\n<tr>\n<td>justify-content</td>\n<td>flex-basis</td>\n</tr>\n<tr>\n<td>align-items</td>\n<td>flex</td>\n</tr>\n<tr>\n<td>align-content</td>\n<td>align-self</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>无论作用在 flex 容器上，还是作用在 flex 子项，都是控制的 flex 子项的呈现，只是前者控制的是整体，后者控制的是个体。</p>\n</blockquote>\n<h2 id=\"属性详解\"><a href=\"#属性详解\" class=\"headerlink\" title=\"属性详解\"></a>属性详解</h2><h3 id=\"1-flex-direction\"><a href=\"#1-flex-direction\" class=\"headerlink\" title=\"1. flex-direction\"></a>1. flex-direction</h3><p><code>flex-direction</code>用来控制子项整体布局方向，是从左往右还是从右往左，是从上往下还是从下往上。</p>\n<p>属性如下:</p>\n<p><code>row</code>: 默认值，显示为行，从左到右</p>\n<p><code>row-reverse</code>: 显示为行，方向从右到左，与 row 相反</p>\n<p><code>column</code>: 显示为列，从上至下</p>\n<p><code>column</code>: 显示为列，从下往上</p>\n<p>语法如下:</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> row | row-reverse | column | column-reverse<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-flex-wrap\"><a href=\"#2-flex-wrap\" class=\"headerlink\" title=\"2. flex-wrap\"></a>2. flex-wrap</h3><p><code>flex-wrap</code>用来控制子项是单行显示还是换行显示</p>\n<p>属性如下:</p>\n<p><code>nowrap</code>: 默认值，不换行，所有的子项单行显示，如果宽度溢出会压缩宽度显示</p>\n<p><code>wrap</code>: 宽度溢出则换行显示</p>\n<p><code>wrap-reverse</code>: 宽度溢出换行显示，从下往上显示，即原本换行在下面的子项显示在上面</p>\n<p>语法如下:</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">flex-wrap</span><span class=\"token punctuation\">:</span> nowrap | wrap | wrap-reverse<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"3-flex-flow\"><a href=\"#3-flex-flow\" class=\"headerlink\" title=\"3. flex-flow\"></a>3. flex-flow</h3><p><code>flex-flow</code>是 <strong><em>flex-direction</em></strong> 和 <strong><em>flex-wrap</em></strong> 的缩写</p>\n<p>语法如下:</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">flex-flow</span><span class=\"token punctuation\">:</span> row wrap<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>当多属性同时使用的时候，使用空格分隔</p>\n</blockquote>\n<h3 id=\"4-justify-conten\"><a href=\"#4-justify-conten\" class=\"headerlink\" title=\"4. justify-conten\"></a>4. justify-conten</h3><p><code>justify-content</code>属性决定了水平方向子项的对齐和分布方式</p>\n<p>属性如下:</p>\n<p><code>flex-start</code>: 默认值，左对齐</p>\n<p><code>flex-end</code>: 右对齐</p>\n<p><code>center</code>: 居中对齐</p>\n<p><code>space-between</code>: 两端对齐，多余的空白只在元素中间分配</p>\n<p><code>space-around</code>: 环绕，每个子项两侧都环绕互不干扰的等宽间距，最终表现为两端空白是中间空白的一半</p>\n<p><code>space-evenly</code>: 均匀分布，每个子项两侧空白完全相等</p>\n<p>语法如下:</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> flex-start | flex-end | center | space-between | space-arount |\n  space-evenly<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"5-align-items\"><a href=\"#5-align-items\" class=\"headerlink\" title=\"5. align-items\"></a>5. align-items</h3><p><code>align-items</code>中的 items 指的是 flex 中的子项，因此<code>align-items</code>指的就是 flex 子项们相对于 flex 容器在垂直方向上的对齐方式</p>\n<p>属性如下:</p>\n<p><code>stretch</code>: 默认值，子项拉伸显示。如果子项设置了高度，则按设置的高度渲染，而不是拉伸</p>\n<p><code>flex-start</code>: 顶部对齐</p>\n<p><code>flex-end</code>: 底部对齐</p>\n<p><code>center</code>: 垂直居中对齐</p>\n<p><code>baseline</code>: 相对于 flex 容器的基线对齐</p>\n<h3 id=\"6-align-content\"><a href=\"#6-align-content\" class=\"headerlink\" title=\"6. align-content\"></a>6. align-content</h3><p><code>align-content</code>可以看成是和 justify-content 是相似且对立的属性，<code>justify-content</code>指的是水平方向 flex 子项的对齐和分布方式，而 align-content 则是指垂直方向每一行 flex 子项的对齐和分布方式</p>\n<blockquote>\n<p>如果所有 flex 子项只有一行，则 align-content 属性是没有任何效果的</p>\n</blockquote>\n<p>属性如下:</p>\n<p><code>stretch</code>: 默认值。每一行 flex 子元素都等比例拉伸。例如，如果共两行 flex 子元素，则每一行拉伸高度是 50%。</p>\n<p><code>flex-start</code>: 逻辑 CSS 属性值，与文档流方向相关。默认表现为顶部堆砌。</p>\n<p><code>flex-end</code>: 逻辑 CSS 属性值，与文档流方向相关。默认表现为底部堆放。</p>\n<p><code>center</code>: 表现为整体垂直居中对齐。</p>\n<p><code>space-between</code>: 表现为上下两行两端对齐。剩下每一行元素等分剩余空间。</p>\n<p><code>space-around</code>: 每一行元素上下都享有独立不重叠的空白空间。</p>\n<p><code>space-evenly</code>: 每一行元素都完全上下等分。</p>\n<h3 id=\"7-order-作用在-flex-子项\"><a href=\"#7-order-作用在-flex-子项\" class=\"headerlink\" title=\"7. order (==作用在 flex 子项==)\"></a>7. order (==作用在 flex 子项==)</h3><p><code>order</code>可以改变一个 flex 子项的排序位置</p>\n<blockquote>\n<p>所有 flex 子项默认 order 属性值为 0，如果想让某一子项在最前面显示，设置比 0 小的整数值就行了，如：-1</p>\n</blockquote>\n<p>语法如下:</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">order</span><span class=\"token punctuation\">:</span> -<span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"8-flex-grow-作用在-flex-子项\"><a href=\"#8-flex-grow-作用在-flex-子项\" class=\"headerlink\" title=\"8. flex-grow (==作用在 flex 子项==)\"></a>8. flex-grow (==作用在 flex 子项==)</h3><p><code>flex-grow</code>指扩展 flex 子项所占据的宽度，扩展的空间就是除去元素外剩余的空白间隙</p>\n<blockquote>\n<p>flex-grow 不支持负值，默认值是 0，表示不占用剩余的空白间隙扩展自己的宽度。如果 flex-grow 大于 0，则 flex 容器剩余空间的分配就会发生，具体规则如下：</p>\n</blockquote>\n<ul>\n<li><p>所有剩余空间总量是 1。</p>\n</li>\n<li><p>如果只有一个 flex 子项设置了 flex-grow 属性值：</p>\n<ul>\n<li>如果 flex-grow 值小于 1，则扩展的空间就总剩余空间和这个比例的计算值。</li>\n<li>如果 flex-grow 值大于 1，则独享所有剩余空间。</li>\n</ul>\n</li>\n<li><p>如果有多个 flex 设置了 flex-grow 属性值：</p>\n<ul>\n<li>如果 flex-grow 值总和小于 1，则每个子项扩展的空间就总剩余空间和当前元素设置的 flex-grow 比例的计算值。</li>\n<li>如果 flex-grow 值总和大于 1，则所有剩余空间被利用，分配比例就是 flex-grow 属性值的比例。例如所有的 flex 子项都设置 flex-grow:1，则表示剩余空白间隙大家等分，如果设置的 flex-grow 比例是 1:2:1，则中间的 flex 子项占据一半的空白间隙，剩下的前后两个元素等分。</li>\n</ul>\n</li>\n</ul>\n<p>语法如下:</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 数值，可以是小数，默认值是 0 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"9-flex-shrink-作用在-flex-子项\"><a href=\"#9-flex-shrink-作用在-flex-子项\" class=\"headerlink\" title=\"9. flex-shrink(==作用在 flex 子项==)\"></a>9. flex-shrink(==作用在 flex 子项==)</h3><p>shrink: 收缩，<code>flex-shrink</code>指的是当 flex 容器空间不足时候，单个元素的收缩比例。</p>\n<blockquote>\n<p>flex-shrink 不支持负值，默认值是 1，也就是默认所有的 flex 子项都会收缩。如果设置为 0，则表示不收缩，保持原始的宽度。</p>\n</blockquote>\n<p>已知 flex 子项不换行，且容器空间不足，不足的空间就是“完全收缩的尺寸”：</p>\n<ul>\n<li>如果只有一个 flex 子项设置了 flex-shrink：<ul>\n<li>flex-shrink 值小于 1，则收缩的尺寸不完全，会有一部分内容溢出 flex 容器。</li>\n<li>flex-shrink 值大于等于 1，则收缩完全，正好填满 flex 容器。</li>\n</ul>\n</li>\n<li>如果多个 flex 子项设置了 flex-shrink：<ul>\n<li>flex-shrink 值的总和小于 1，则收缩的尺寸不完全，每个元素收缩尺寸占“完全收缩的尺寸”的比例就是设置的 flex-shrink 的值。</li>\n<li>flex-shrink 值的总和大于 1，则收缩完全，每个元素收缩尺寸的比例和 flex-shrink 值的比例一样。下面案例演示的就是此场景。</li>\n</ul>\n</li>\n</ul>\n<p>语法如下:</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">flex-shrink</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 数值，可以是小数，默认值是 1 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"10-flex-basis-作用在-flex-子项\"><a href=\"#10-flex-basis-作用在-flex-子项\" class=\"headerlink\" title=\"10. flex-basis(==作用在 flex 子项==)\"></a>10. flex-basis(==作用在 flex 子项==)</h3><p><code>flex-basis</code>定义了在分配剩余空间之前元素的默认大小。</p>\n<p>默认值是 auto，就是自动。有设置 width 则占据空间就是 width，没有设置就按内容宽度来。如果同时设置 width 和 flex-basis，就渲染表现来看，会忽略 width。flex 顾名思义就是弹性的意思，因此，实际上不建议对 flex 子项使用 width 属性，因为不够弹性。</p>\n<blockquote>\n<p>当剩余空间不足的时候，flex 子项的实际宽度通常并不是设置的 flex-basis 尺寸，因为 flex 布局剩余空间不足的时候默认会收缩。</p>\n</blockquote>\n<p>语法如下:</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">flex-basis</span><span class=\"token punctuation\">:</span> &lt;length> | auto<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 默认值是 auto */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"11-flex-flex-子项中\"><a href=\"#11-flex-flex-子项中\" class=\"headerlink\" title=\"11. flex(==flex 子项中==)\"></a>11. flex(==flex 子项中==)</h3><p><code>flex</code>属性是 flex-grow，flex-shrink 和 flex-basis 的缩写。</p>\n<p>语法如下:</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> none | auto | [ &lt; <span class=\"token string\">'flex-grow'</span> > &lt; <span class=\"token string\">'flex-shrink'</span> >? || &lt; <span class=\"token string\">'flex-basis'</span> > ]<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>第 2 和第 3 个参数（flex-shrink 和 flex-basis）是可选的。默认值为 0 1 auto。</p>\n</blockquote>\n<h3 id=\"12-align-self-作用在-flex-子项\"><a href=\"#12-align-self-作用在-flex-子项\" class=\"headerlink\" title=\"12. align-self(==作用在 flex 子项==)\"></a>12. align-self(==作用在 flex 子项==)</h3><p><code>align-self</code>指控制单独某一个 flex 子项的垂直对齐方式，写在 flex 容器上的这个 align-items 属性，后面是 items，有个 s，表示子项们，是全体；这里是 self，单独一个个体。语法几乎一样：</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">align-self</span><span class=\"token punctuation\">:</span> auto | flex-start | flex-end | center | baseline | stretch<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>唯一区别就是 align-self 多了个 auto（默认值），表示继承自 flex 容器的 align-items 属性值。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Css3-Flex-布局\"><a href=\"#Css3-Flex-布局\" class=\"headerlink\" title=\"Css3 Flex 布局\"></a>Css3 Flex 布局</h1><h2 id=\"属性总览\"><a href=\"#属性总览\" class=\"headerlink\" title=\"属性总览\"></a>属性总览</h2><table>\n<thead>\n<tr>\n<th>作用在 flex 容器上</th>\n<th>作用在 flex 子项上</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>flex-direction</td>\n<td>order</td>\n</tr>\n<tr>\n<td>flex-wrap</td>\n<td>flex-grow</td>\n</tr>\n<tr>\n<td>flex-flow</td>\n<td>flex-shrink</td>\n</tr>\n<tr>\n<td>justify-content</td>\n<td>flex-basis</td>\n</tr>\n<tr>\n<td>align-items</td>\n<td>flex</td>\n</tr>\n<tr>\n<td>align-content</td>\n<td>align-self</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>无论作用在 flex 容器上，还是作用在 flex 子项，都是控制的 flex 子项的呈现，只是前者控制的是整体，后者控制的是个体。</p>\n</blockquote>\n<h2 id=\"属性详解\"><a href=\"#属性详解\" class=\"headerlink\" title=\"属性详解\"></a>属性详解</h2><h3 id=\"1-flex-direction\"><a href=\"#1-flex-direction\" class=\"headerlink\" title=\"1. flex-direction\"></a>1. flex-direction</h3><p><code>flex-direction</code>用来控制子项整体布局方向，是从左往右还是从右往左，是从上往下还是从下往上。</p>\n<p>属性如下:</p>\n<p><code>row</code>: 默认值，显示为行，从左到右</p>\n<p><code>row-reverse</code>: 显示为行，方向从右到左，与 row 相反</p>\n<p><code>column</code>: 显示为列，从上至下</p>\n<p><code>column</code>: 显示为列，从下往上</p>\n<p>语法如下:</p>\n<pre><code class=\"css\">flex-direction: row | row-reverse | column | column-reverse;</code></pre>\n<h3 id=\"2-flex-wrap\"><a href=\"#2-flex-wrap\" class=\"headerlink\" title=\"2. flex-wrap\"></a>2. flex-wrap</h3><p><code>flex-wrap</code>用来控制子项是单行显示还是换行显示</p>\n<p>属性如下:</p>\n<p><code>nowrap</code>: 默认值，不换行，所有的子项单行显示，如果宽度溢出会压缩宽度显示</p>\n<p><code>wrap</code>: 宽度溢出则换行显示</p>\n<p><code>wrap-reverse</code>: 宽度溢出换行显示，从下往上显示，即原本换行在下面的子项显示在上面</p>\n<p>语法如下:</p>\n<pre><code class=\"css\">flex-wrap: nowrap | wrap | wrap-reverse;</code></pre>\n<h3 id=\"3-flex-flow\"><a href=\"#3-flex-flow\" class=\"headerlink\" title=\"3. flex-flow\"></a>3. flex-flow</h3><p><code>flex-flow</code>是 <strong><em>flex-direction</em></strong> 和 <strong><em>flex-wrap</em></strong> 的缩写</p>\n<p>语法如下:</p>\n<pre><code class=\"css\">flex-flow: row wrap;</code></pre>\n<blockquote>\n<p>当多属性同时使用的时候，使用空格分隔</p>\n</blockquote>\n<h3 id=\"4-justify-conten\"><a href=\"#4-justify-conten\" class=\"headerlink\" title=\"4. justify-conten\"></a>4. justify-conten</h3><p><code>justify-content</code>属性决定了水平方向子项的对齐和分布方式</p>\n<p>属性如下:</p>\n<p><code>flex-start</code>: 默认值，左对齐</p>\n<p><code>flex-end</code>: 右对齐</p>\n<p><code>center</code>: 居中对齐</p>\n<p><code>space-between</code>: 两端对齐，多余的空白只在元素中间分配</p>\n<p><code>space-around</code>: 环绕，每个子项两侧都环绕互不干扰的等宽间距，最终表现为两端空白是中间空白的一半</p>\n<p><code>space-evenly</code>: 均匀分布，每个子项两侧空白完全相等</p>\n<p>语法如下:</p>\n<pre><code class=\"css\">justify-content: flex-start | flex-end | center | space-between | space-arount |\n  space-evenly;</code></pre>\n<h3 id=\"5-align-items\"><a href=\"#5-align-items\" class=\"headerlink\" title=\"5. align-items\"></a>5. align-items</h3><p><code>align-items</code>中的 items 指的是 flex 中的子项，因此<code>align-items</code>指的就是 flex 子项们相对于 flex 容器在垂直方向上的对齐方式</p>\n<p>属性如下:</p>\n<p><code>stretch</code>: 默认值，子项拉伸显示。如果子项设置了高度，则按设置的高度渲染，而不是拉伸</p>\n<p><code>flex-start</code>: 顶部对齐</p>\n<p><code>flex-end</code>: 底部对齐</p>\n<p><code>center</code>: 垂直居中对齐</p>\n<p><code>baseline</code>: 相对于 flex 容器的基线对齐</p>\n<h3 id=\"6-align-content\"><a href=\"#6-align-content\" class=\"headerlink\" title=\"6. align-content\"></a>6. align-content</h3><p><code>align-content</code>可以看成是和 justify-content 是相似且对立的属性，<code>justify-content</code>指的是水平方向 flex 子项的对齐和分布方式，而 align-content 则是指垂直方向每一行 flex 子项的对齐和分布方式</p>\n<blockquote>\n<p>如果所有 flex 子项只有一行，则 align-content 属性是没有任何效果的</p>\n</blockquote>\n<p>属性如下:</p>\n<p><code>stretch</code>: 默认值。每一行 flex 子元素都等比例拉伸。例如，如果共两行 flex 子元素，则每一行拉伸高度是 50%。</p>\n<p><code>flex-start</code>: 逻辑 CSS 属性值，与文档流方向相关。默认表现为顶部堆砌。</p>\n<p><code>flex-end</code>: 逻辑 CSS 属性值，与文档流方向相关。默认表现为底部堆放。</p>\n<p><code>center</code>: 表现为整体垂直居中对齐。</p>\n<p><code>space-between</code>: 表现为上下两行两端对齐。剩下每一行元素等分剩余空间。</p>\n<p><code>space-around</code>: 每一行元素上下都享有独立不重叠的空白空间。</p>\n<p><code>space-evenly</code>: 每一行元素都完全上下等分。</p>\n<h3 id=\"7-order-作用在-flex-子项\"><a href=\"#7-order-作用在-flex-子项\" class=\"headerlink\" title=\"7. order (==作用在 flex 子项==)\"></a>7. order (==作用在 flex 子项==)</h3><p><code>order</code>可以改变一个 flex 子项的排序位置</p>\n<blockquote>\n<p>所有 flex 子项默认 order 属性值为 0，如果想让某一子项在最前面显示，设置比 0 小的整数值就行了，如：-1</p>\n</blockquote>\n<p>语法如下:</p>\n<pre><code class=\"css\">order: -1;</code></pre>\n<h3 id=\"8-flex-grow-作用在-flex-子项\"><a href=\"#8-flex-grow-作用在-flex-子项\" class=\"headerlink\" title=\"8. flex-grow (==作用在 flex 子项==)\"></a>8. flex-grow (==作用在 flex 子项==)</h3><p><code>flex-grow</code>指扩展 flex 子项所占据的宽度，扩展的空间就是除去元素外剩余的空白间隙</p>\n<blockquote>\n<p>flex-grow 不支持负值，默认值是 0，表示不占用剩余的空白间隙扩展自己的宽度。如果 flex-grow 大于 0，则 flex 容器剩余空间的分配就会发生，具体规则如下：</p>\n</blockquote>\n<ul>\n<li><p>所有剩余空间总量是 1。</p>\n</li>\n<li><p>如果只有一个 flex 子项设置了 flex-grow 属性值：</p>\n<ul>\n<li>如果 flex-grow 值小于 1，则扩展的空间就总剩余空间和这个比例的计算值。</li>\n<li>如果 flex-grow 值大于 1，则独享所有剩余空间。</li>\n</ul>\n</li>\n<li><p>如果有多个 flex 设置了 flex-grow 属性值：</p>\n<ul>\n<li>如果 flex-grow 值总和小于 1，则每个子项扩展的空间就总剩余空间和当前元素设置的 flex-grow 比例的计算值。</li>\n<li>如果 flex-grow 值总和大于 1，则所有剩余空间被利用，分配比例就是 flex-grow 属性值的比例。例如所有的 flex 子项都设置 flex-grow:1，则表示剩余空白间隙大家等分，如果设置的 flex-grow 比例是 1:2:1，则中间的 flex 子项占据一半的空白间隙，剩下的前后两个元素等分。</li>\n</ul>\n</li>\n</ul>\n<p>语法如下:</p>\n<pre><code class=\"css\">flex-grow: 0.5; /* 数值，可以是小数，默认值是 0 */</code></pre>\n<h3 id=\"9-flex-shrink-作用在-flex-子项\"><a href=\"#9-flex-shrink-作用在-flex-子项\" class=\"headerlink\" title=\"9. flex-shrink(==作用在 flex 子项==)\"></a>9. flex-shrink(==作用在 flex 子项==)</h3><p>shrink: 收缩，<code>flex-shrink</code>指的是当 flex 容器空间不足时候，单个元素的收缩比例。</p>\n<blockquote>\n<p>flex-shrink 不支持负值，默认值是 1，也就是默认所有的 flex 子项都会收缩。如果设置为 0，则表示不收缩，保持原始的宽度。</p>\n</blockquote>\n<p>已知 flex 子项不换行，且容器空间不足，不足的空间就是“完全收缩的尺寸”：</p>\n<ul>\n<li>如果只有一个 flex 子项设置了 flex-shrink：<ul>\n<li>flex-shrink 值小于 1，则收缩的尺寸不完全，会有一部分内容溢出 flex 容器。</li>\n<li>flex-shrink 值大于等于 1，则收缩完全，正好填满 flex 容器。</li>\n</ul>\n</li>\n<li>如果多个 flex 子项设置了 flex-shrink：<ul>\n<li>flex-shrink 值的总和小于 1，则收缩的尺寸不完全，每个元素收缩尺寸占“完全收缩的尺寸”的比例就是设置的 flex-shrink 的值。</li>\n<li>flex-shrink 值的总和大于 1，则收缩完全，每个元素收缩尺寸的比例和 flex-shrink 值的比例一样。下面案例演示的就是此场景。</li>\n</ul>\n</li>\n</ul>\n<p>语法如下:</p>\n<pre><code class=\"css\">flex-shrink: 0; /* 数值，可以是小数，默认值是 1 */</code></pre>\n<h3 id=\"10-flex-basis-作用在-flex-子项\"><a href=\"#10-flex-basis-作用在-flex-子项\" class=\"headerlink\" title=\"10. flex-basis(==作用在 flex 子项==)\"></a>10. flex-basis(==作用在 flex 子项==)</h3><p><code>flex-basis</code>定义了在分配剩余空间之前元素的默认大小。</p>\n<p>默认值是 auto，就是自动。有设置 width 则占据空间就是 width，没有设置就按内容宽度来。如果同时设置 width 和 flex-basis，就渲染表现来看，会忽略 width。flex 顾名思义就是弹性的意思，因此，实际上不建议对 flex 子项使用 width 属性，因为不够弹性。</p>\n<blockquote>\n<p>当剩余空间不足的时候，flex 子项的实际宽度通常并不是设置的 flex-basis 尺寸，因为 flex 布局剩余空间不足的时候默认会收缩。</p>\n</blockquote>\n<p>语法如下:</p>\n<pre><code class=\"css\">flex-basis: &lt;length&gt; | auto; /* 默认值是 auto */</code></pre>\n<h3 id=\"11-flex-flex-子项中\"><a href=\"#11-flex-flex-子项中\" class=\"headerlink\" title=\"11. flex(==flex 子项中==)\"></a>11. flex(==flex 子项中==)</h3><p><code>flex</code>属性是 flex-grow，flex-shrink 和 flex-basis 的缩写。</p>\n<p>语法如下:</p>\n<pre><code class=\"css\">flex: none | auto | [ &lt; &#39;flex-grow&#39; &gt; &lt; &#39;flex-shrink&#39; &gt;? || &lt; &#39;flex-basis&#39; &gt; ];</code></pre>\n<blockquote>\n<p>第 2 和第 3 个参数（flex-shrink 和 flex-basis）是可选的。默认值为 0 1 auto。</p>\n</blockquote>\n<h3 id=\"12-align-self-作用在-flex-子项\"><a href=\"#12-align-self-作用在-flex-子项\" class=\"headerlink\" title=\"12. align-self(==作用在 flex 子项==)\"></a>12. align-self(==作用在 flex 子项==)</h3><p><code>align-self</code>指控制单独某一个 flex 子项的垂直对齐方式，写在 flex 容器上的这个 align-items 属性，后面是 items，有个 s，表示子项们，是全体；这里是 self，单独一个个体。语法几乎一样：</p>\n<pre><code class=\"css\">align-self: auto | flex-start | flex-end | center | baseline | stretch;</code></pre>\n<p>唯一区别就是 align-self 多了个 auto（默认值），表示继承自 flex 容器的 align-items 属性值。</p>\n"},{"title":"CSS学习-标签显示模式","date":"2019-03-23T00:03:37.000Z","_content":"\n### 块级元素\n\n常见的块级元素有 h1 ~ h6 div ul ol li 等，其中 div 是最典型的块元素\n\n> 特点：\n\n- 总是从新行开始\n- 高度、行高、以及内外边距都可以控制\n- 宽度默认是容器的 100%\n- 可以容纳行内元素和其他块元素\n\n  <!-- more -->\n\n### 行内元素\n\n常见的行内元素有 a strong b em i del s ins u span 等，其中 span 是最典型的行内元素\n\n> 特点：\n\n- 和相邻*行内元素*在同一行\n- 高、宽无效，但可设置水平方向和内外边距，垂直方向无效\n- 宽度默认是其内容本身的宽度\n- 只能容纳文本或其他行内元素（a 特殊）\n  > 注意:\n\n1.  只有文字才能组成段落，因此**_ p 里面不能放块级元素_** ，同理 h1 ~ h6 dt 等都是文字块级元素，同样不能放块级元素\n2.  链接里边不能再放链接（a）\n\n### 行内块元素（inline-block）\n\n在行内元素中有几个特殊的标签--- img 、input 、 td ,可以对其设置宽高和对齐属性\n\n> 特点：\n\n- 和相邻行内元素（行内块）在同一行，但是之间会有空白缝隙\n- 宽度默认是其内容本身的宽度\n- 高度、行高、内外边距都可以控制\n\n### 标签显示模式转换（display）\n\n块转行内：display: inline;\n行内转块：display: block;\n块、行内元素转换为行内块：display: inline-block;\n","source":"_posts/CSS学习-标签显示模式.md","raw":"---\ntitle: CSS学习-标签显示模式\ndate: 2019-03-23 08:03:37\ncategories: CSS\ntags: css\n---\n\n### 块级元素\n\n常见的块级元素有 h1 ~ h6 div ul ol li 等，其中 div 是最典型的块元素\n\n> 特点：\n\n- 总是从新行开始\n- 高度、行高、以及内外边距都可以控制\n- 宽度默认是容器的 100%\n- 可以容纳行内元素和其他块元素\n\n  <!-- more -->\n\n### 行内元素\n\n常见的行内元素有 a strong b em i del s ins u span 等，其中 span 是最典型的行内元素\n\n> 特点：\n\n- 和相邻*行内元素*在同一行\n- 高、宽无效，但可设置水平方向和内外边距，垂直方向无效\n- 宽度默认是其内容本身的宽度\n- 只能容纳文本或其他行内元素（a 特殊）\n  > 注意:\n\n1.  只有文字才能组成段落，因此**_ p 里面不能放块级元素_** ，同理 h1 ~ h6 dt 等都是文字块级元素，同样不能放块级元素\n2.  链接里边不能再放链接（a）\n\n### 行内块元素（inline-block）\n\n在行内元素中有几个特殊的标签--- img 、input 、 td ,可以对其设置宽高和对齐属性\n\n> 特点：\n\n- 和相邻行内元素（行内块）在同一行，但是之间会有空白缝隙\n- 宽度默认是其内容本身的宽度\n- 高度、行高、内外边距都可以控制\n\n### 标签显示模式转换（display）\n\n块转行内：display: inline;\n行内转块：display: block;\n块、行内元素转换为行内块：display: inline-block;\n","slug":"CSS学习-标签显示模式","published":1,"updated":"2020-08-15T00:46:22.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckduyy4u40007qsnveeu588vk","content":"<h3 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h3><p>常见的块级元素有 h1 ~ h6 div ul ol li 等，其中 div 是最典型的块元素</p>\n<blockquote>\n<p>特点：</p>\n</blockquote>\n<ul>\n<li><p>总是从新行开始</p>\n</li>\n<li><p>高度、行高、以及内外边距都可以控制</p>\n</li>\n<li><p>宽度默认是容器的 100%</p>\n</li>\n<li><p>可以容纳行内元素和其他块元素</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<h3 id=\"行内元素\"><a href=\"#行内元素\" class=\"headerlink\" title=\"行内元素\"></a>行内元素</h3><p>常见的行内元素有 a strong b em i del s ins u span 等，其中 span 是最典型的行内元素</p>\n<blockquote>\n<p>特点：</p>\n</blockquote>\n<ul>\n<li>和相邻<em>行内元素</em>在同一行</li>\n<li>高、宽无效，但可设置水平方向和内外边距，垂直方向无效</li>\n<li>宽度默认是其内容本身的宽度</li>\n<li>只能容纳文本或其他行内元素（a 特殊）<blockquote>\n<p>注意:</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>只有文字才能组成段落，因此<strong>_ p 里面不能放块级元素_</strong> ，同理 h1 ~ h6 dt 等都是文字块级元素，同样不能放块级元素</li>\n<li>链接里边不能再放链接（a）</li>\n</ol>\n<h3 id=\"行内块元素（inline-block）\"><a href=\"#行内块元素（inline-block）\" class=\"headerlink\" title=\"行内块元素（inline-block）\"></a>行内块元素（inline-block）</h3><p>在行内元素中有几个特殊的标签— img 、input 、 td ,可以对其设置宽高和对齐属性</p>\n<blockquote>\n<p>特点：</p>\n</blockquote>\n<ul>\n<li>和相邻行内元素（行内块）在同一行，但是之间会有空白缝隙</li>\n<li>宽度默认是其内容本身的宽度</li>\n<li>高度、行高、内外边距都可以控制</li>\n</ul>\n<h3 id=\"标签显示模式转换（display）\"><a href=\"#标签显示模式转换（display）\" class=\"headerlink\" title=\"标签显示模式转换（display）\"></a>标签显示模式转换（display）</h3><p>块转行内：display: inline;<br>行内转块：display: block;<br>块、行内元素转换为行内块：display: inline-block;</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"<h3 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h3><p>常见的块级元素有 h1 ~ h6 div ul ol li 等，其中 div 是最典型的块元素</p>\n<blockquote>\n<p>特点：</p>\n</blockquote>\n<ul>\n<li><p>总是从新行开始</p>\n</li>\n<li><p>高度、行高、以及内外边距都可以控制</p>\n</li>\n<li><p>宽度默认是容器的 100%</p>\n</li>\n<li><p>可以容纳行内元素和其他块元素</p>","more":"</li>\n</ul>\n<h3 id=\"行内元素\"><a href=\"#行内元素\" class=\"headerlink\" title=\"行内元素\"></a>行内元素</h3><p>常见的行内元素有 a strong b em i del s ins u span 等，其中 span 是最典型的行内元素</p>\n<blockquote>\n<p>特点：</p>\n</blockquote>\n<ul>\n<li>和相邻<em>行内元素</em>在同一行</li>\n<li>高、宽无效，但可设置水平方向和内外边距，垂直方向无效</li>\n<li>宽度默认是其内容本身的宽度</li>\n<li>只能容纳文本或其他行内元素（a 特殊）<blockquote>\n<p>注意:</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>只有文字才能组成段落，因此<strong>_ p 里面不能放块级元素_</strong> ，同理 h1 ~ h6 dt 等都是文字块级元素，同样不能放块级元素</li>\n<li>链接里边不能再放链接（a）</li>\n</ol>\n<h3 id=\"行内块元素（inline-block）\"><a href=\"#行内块元素（inline-block）\" class=\"headerlink\" title=\"行内块元素（inline-block）\"></a>行内块元素（inline-block）</h3><p>在行内元素中有几个特殊的标签— img 、input 、 td ,可以对其设置宽高和对齐属性</p>\n<blockquote>\n<p>特点：</p>\n</blockquote>\n<ul>\n<li>和相邻行内元素（行内块）在同一行，但是之间会有空白缝隙</li>\n<li>宽度默认是其内容本身的宽度</li>\n<li>高度、行高、内外边距都可以控制</li>\n</ul>\n<h3 id=\"标签显示模式转换（display）\"><a href=\"#标签显示模式转换（display）\" class=\"headerlink\" title=\"标签显示模式转换（display）\"></a>标签显示模式转换（display）</h3><p>块转行内：display: inline;<br>行内转块：display: block;<br>块、行内元素转换为行内块：display: inline-block;</p>"},{"title":"插入排序算法","date":"2019-04-27T04:00:07.000Z","top":true,"_content":"\n### 插入排序算法(模拟摸牌)\n\n> 要求：假设手中有一张牌，在摸第二张牌时开始将牌进行从小到大排序（顺序）\n\n<!--more-->\n\n```\n  实现分析：\n  1. 将当前牌跟之前的手中牌从后往前开始逐一比较\n  2. 当当前牌小于前面的正在比较的手中牌时，将这一手中牌往后移一位\n  3. 当当前牌大于或等于正在比较的手中牌时停止比较并将当前牌插入到上一比较的手中牌原来的位置（也可以说是正在比较的手中牌的下一个位置）\n```\n\n```javascript\n// 实现代码（js）\nlet arr = [8, 10, 9, 2, 5, 4, 3, 7, 11, 1]\n\nfor (let i = 1; i < arr.length; i++) {\n  let cur = arr[i] //当前牌\n  let j = i - 1 //摸之前手牌数\n\n  while (j >= 0 && arr[j] > cur) {\n    arr[j + 1] = arr[j]\n    j = j - 1\n  }\n  arr[j + 1] = cur\n}\nconsole.log(arr)\n```\n","source":"_posts/插入排序算法.md","raw":"---\ntitle: 插入排序算法\ndate: 2019-04-27 12:00:07\ntop: true\ncategories: 算法\ntags: 算法\n---\n\n### 插入排序算法(模拟摸牌)\n\n> 要求：假设手中有一张牌，在摸第二张牌时开始将牌进行从小到大排序（顺序）\n\n<!--more-->\n\n```\n  实现分析：\n  1. 将当前牌跟之前的手中牌从后往前开始逐一比较\n  2. 当当前牌小于前面的正在比较的手中牌时，将这一手中牌往后移一位\n  3. 当当前牌大于或等于正在比较的手中牌时停止比较并将当前牌插入到上一比较的手中牌原来的位置（也可以说是正在比较的手中牌的下一个位置）\n```\n\n```javascript\n// 实现代码（js）\nlet arr = [8, 10, 9, 2, 5, 4, 3, 7, 11, 1]\n\nfor (let i = 1; i < arr.length; i++) {\n  let cur = arr[i] //当前牌\n  let j = i - 1 //摸之前手牌数\n\n  while (j >= 0 && arr[j] > cur) {\n    arr[j + 1] = arr[j]\n    j = j - 1\n  }\n  arr[j + 1] = cur\n}\nconsole.log(arr)\n```\n","slug":"插入排序算法","published":1,"updated":"2020-08-15T00:46:22.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckduyy4u50009qsnvbq5e0ah8","content":"<h3 id=\"插入排序算法-模拟摸牌\"><a href=\"#插入排序算法-模拟摸牌\" class=\"headerlink\" title=\"插入排序算法(模拟摸牌)\"></a>插入排序算法(模拟摸牌)</h3><blockquote>\n<p>要求：假设手中有一张牌，在摸第二张牌时开始将牌进行从小到大排序（顺序）</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<pre><code>  实现分析：\n  1. 将当前牌跟之前的手中牌从后往前开始逐一比较\n  2. 当当前牌小于前面的正在比较的手中牌时，将这一手中牌往后移一位\n  3. 当当前牌大于或等于正在比较的手中牌时停止比较并将当前牌插入到上一比较的手中牌原来的位置（也可以说是正在比较的手中牌的下一个位置）</code></pre>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">// 实现代码（js）</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> cur <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token comment\" spellcheck=\"true\">//当前牌</span>\n  <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token comment\" spellcheck=\"true\">//摸之前手牌数</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> cur<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n    j <span class=\"token operator\">=</span> j <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n  <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cur\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"<h3 id=\"插入排序算法-模拟摸牌\"><a href=\"#插入排序算法-模拟摸牌\" class=\"headerlink\" title=\"插入排序算法(模拟摸牌)\"></a>插入排序算法(模拟摸牌)</h3><blockquote>\n<p>要求：假设手中有一张牌，在摸第二张牌时开始将牌进行从小到大排序（顺序）</p>\n</blockquote>","more":"<pre><code>  实现分析：\n  1. 将当前牌跟之前的手中牌从后往前开始逐一比较\n  2. 当当前牌小于前面的正在比较的手中牌时，将这一手中牌往后移一位\n  3. 当当前牌大于或等于正在比较的手中牌时停止比较并将当前牌插入到上一比较的手中牌原来的位置（也可以说是正在比较的手中牌的下一个位置）</code></pre>\n<pre><code class=\"javascript\">// 实现代码（js）\nlet arr = [8, 10, 9, 2, 5, 4, 3, 7, 11, 1]\n\nfor (let i = 1; i &lt; arr.length; i++) &amp;#123;\n  let cur = arr[i] //当前牌\n  let j = i - 1 //摸之前手牌数\n\n  while (j &gt;= 0 &amp;&amp; arr[j] &gt; cur) &amp;#123;\n    arr[j + 1] = arr[j]\n    j = j - 1\n  &amp;#125;\n  arr[j + 1] = cur\n&amp;#125;\nconsole.log(arr)</code></pre>"},{"title":"昨夜微风轻拂","date":"2019-04-09T04:27:19.000Z","_content":"\n昨夜微风轻拂\n\n梦醒无人倾言\n\n心有波澜\n\n久不语，复清平\n","source":"_posts/昨夜微风轻拂.md","raw":"---\ntitle: 昨夜微风轻拂\ndate: 2019-04-09 12:27:19\ncategories: 情感\ntags: 情感\n---\n\n昨夜微风轻拂\n\n梦醒无人倾言\n\n心有波澜\n\n久不语，复清平\n","slug":"昨夜微风轻拂","published":1,"updated":"2020-08-15T00:46:22.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckduyy4u6000bqsnvanevdhbh","content":"<p>昨夜微风轻拂</p>\n<p>梦醒无人倾言</p>\n<p>心有波澜</p>\n<p>久不语，复清平</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>昨夜微风轻拂</p>\n<p>梦醒无人倾言</p>\n<p>心有波澜</p>\n<p>久不语，复清平</p>\n"},{"title":"JavaScript高级程序设计学习笔记","date":"2020-08-14T11:20:00.000Z","author":"张传龙","top":true,"cover":true,"summary":"ECMAScript 的语法大量借鉴了C 及其他类C 语言（如Java 和Perl）的语法","_content":"\n# 1 基本概念\n\n## 1.1 语法\n\n    ECMAScript 的语法大量借鉴了C 及其他类C 语言（如Java 和Perl）的语法。\n    熟悉这些语言的开发人员在接受ECMAScript 更加宽松的语法时，一定会有一种轻松自在的感觉。\n    即使没有其他编程语言基础，JavaScript仍然易上手。\n\n### 1.1.1 区分大小写\n\n    ECMAScript 中的一切（变量、函数名和操作符）都区分大小写。\n    变量名test 和变量名Test 分别表示两个不同的变量。\n\n### 1.1.2 标识符\n\n    标识符，就是指变量、函数、属性的名字，或者函数的参数，规则：\n    1. 第一个字符必须是一个字母、下划线（_）或一个美元符号（$）\n    2. 其他字符可以是字母、下划线、美元符号或数字\n    3. 不允许是关键字、保留字、true、false和null\n\nECMAScript 标识符采用驼峰大小写格式：\n\n```javascript\nvar myBlog\nvar doSomethingImportant\n```\n\n### 1.1.3 注释\n\n```javascript\n//单行注释\n\n/*\n * 这是一个多行\n * （块级）注释\n */\n```\n\n    虽然上面多行注释中的第二和第三行都以一个星号开头，但这不是必需的。之所以添加那两个星号，纯粹是为了提高注释的可读性\n\n### 1.1.4 语句\n\nECMAScript 中的语句以一个分号结尾；如果省略分号，则由解析器确定语句的结尾，如下例所示：\n\n```javascript\nvar sum = a + b // 即使没有分号也是有效的语句——不推荐\nvar diff = a - b // 有效的语句——推荐\n```\n\n    加上分号也会在某些情况下增进代码的性能，因为这样解析器就不必再花时间推测应该在哪里插入分号了\n\n尽量始终在控制语句中使用代码块——即使代码块中只有一条语句\n\n```javascript\n// 有效但容易出错，不要使用\nif (test) alert(test)\n\n// 推荐使用\nif (test) {\n  alert(test)\n}\n```\n\n    在控制语句中使用代码块可以让编码意图更加清晰，而且也能降低修改代码时出错的几率\n\n## 1.2 关键字和保留字\n\nECMAScript 的全部关键字\n\n> break do instanceof typeof case else new var\n> catch finally return void continue for switch while\n> debugger function this with default if throw delete in try\n\n保留字：\n\n> abstract enum int short boolean export interface static\n> byte extends long super char final native synchronized\n> class float package throws const goto private transient\n> debugger implements protected volatile double import public\n\n## 1.3 变量\n\nECMAScript 的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。\n\n    可以使用一条语句定义多个变量，只要像下面这样把每个变量（初始化或不初始化均可）用逗号分隔开即可：\n\n```javascript\nvar message = 'hi',\n  found = false,\n  age = 29\n```\n\n## 1.4 数据类型\n\n5 种简单数据类型（也称为基本数据类型）：\n\n- Undefined\n- Null\n- Boolean\n- Number\n- String\n\n1 种复杂数据类型: Object\n\n### 1.4.1 typeof 操作符\n\ntypeof——用来检测给定变量的数据类型的操作符\n\n- \"undefined\"——如果这个值未定义\n- \"boolean\"——如果这个值是布尔值\n- \"string\"——如果这个值是字符串\n- \"number\"——如果这个值是数值\n- \"object\"——如果这个值是对象或 null\n- \"function\"——如果这个值是函数\n\n例：\n\n```javascript\nvar message = 'some string'\nconsole.log(typeof message) // \"string\"\nconsole.log(typeof message) // \"string\"\nconsole.log(typeof 95) // \"number\"\n```\n\n    注意：typeof 是一个操作符而不是函数，因此例子中的圆括号尽管可以使用，但不是必需的\n\n### 1.4.2 Undefined 类型\n\nUndefined 类型只有一个值，即特殊的 undefined。在使用 var 声明变量但未对其加以初始化时，\n这个变量的值就是 undefined，例如：\n\n```javascript\nvar message\nconsole.log(message == undefined) //true\n```\n\n### 1.4.3 Null 类型\n\nNull 类型是第二个只有一个值的数据类型，这个特殊的值是 null。从逻辑角度来看，null 值表示一个空对象指针，而这也正是使用 typeof 操作符检测 null 值时会返回\"object\"的原因，如下面的例子所示：\n\n```javascript\nvar car = null\nconsole.log(typeof car) // \"object\"\n```\n\n实际上，undefined 值是派生自 null 值的，因此 ECMA-262 规定对它们的相等性测试要返回 true：\n\n```javascript\nconsole.log(null == undefined) //true\n```\n\n### 1.4.4 Boolean 类型\n\n该类型只有两个字面值：true 和 false。\n虽然 Boolean 类型的字面值只有两个，但 ECMAScript 中所有类型的值都有与这两个 Boolean 值 等价的值。要将一个值转换为其对应的 Boolean 值，可以调用转型函数 Boolean()，如下例所示：\n\n```javascript\nvar message = 'Hello world!'\nvar messageAsBoolean = Boolean(message)\nconsole.log(messageAsBoolean) //true\n```\n\n| 数据类型  |       转换为 true 的值       | 转换为 false 的值 |\n| :-------: | :--------------------------: | :---------------: |\n|  Boolean  |             true             |       false       |\n|  String   |        任何非空字符串        |   ''(空字符串)    |\n|  Number   | 任何非零数字值（包括无穷大） |     0 和 NaN      |\n| Undefined |        不适合这种规则        |     undefined     |\n\n### 1.4.5 Number 类型\n\nNumber 类型使用 IEEE754 格式来表示 整数和浮点数值（浮点数值在某些语言中也被称为双精度数值）。\n\n#### 1. 浮点数值\n\n所谓浮点数值，就是该数值中必须包含一个小数点，并且小数点后面必须至少有一位数字\n由于保存浮点数值需要的内存空间是保存整数值的两倍，因此 ECMAScript 会不失时机地将浮点数值 转换为整数值。显然，如果小数点后面没有跟任何数字，那么这个数值就可以作为整数值来保存。同样 地，如果浮点数值本身表示的就是一个整数（如 1.0），那么该值也会被转换为整数，如下面的例子所示：\n\n```javascript\nvar floatNum1 = 1 // 小数点后面没有数字——解析为 1\nvar floatNum2 = 10.0 // 整数——解析为 10\n```\n\n浮点数值的高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数。例如，0.1 加 0.2 的结果不是 0.3，而是 0.30000000000000004。这个小小的舍入误差会导致无法测试特定的浮点数值。 例如:\n\n```javascript\nif (a + b == 0.3) {\n  console.log('You got 0.3.') // 不要做这样的测试！\n}\n```\n\n    在这个例子中，我们测试的是两个数的和是不是等于 0.3。如果这两个数\n    是 0.05和 0.25，或者是 0.15 和 0.15都不会有问题。而如前所述，如\n    果这两个数是 0.1和 0.2，那么测试将无法通过。因此，永远不 要测试某\n    个特定的浮点数值。\n\n#### 2. 数值范围\n\n由于内存的限制，ECMAScript 并不能保存世界上所有的数值。ECMAScript 能够表示的小数值保 存在 Number.MIN_VALUE 中——在大多数浏览器中，这个值是 5e-324；能够表示的大数值保存在 Number.MAX_VALUE 中——在大多数浏览器中，这个值是 1.7976931348623157e+308。如果某次计算的 结果得到了一个超出 JavaScript 数值范围的值，那么这个数值将被自动转换成特殊的 Infinity 值。具 体来说，如果这个数值是负数，则会被转换成-Infinity（负无穷），如果这个数值是正数，则会被转 换成 Infinity（正无穷）。\n\n    如果某次计算返回了正或负的 Infinity 值，那么该值将无法继续参与下一次的计算，\n    因为 Infinity 不是能够参与计算的数值\n\n#### 3. NaN\n\nNaN，即非数值（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数 未返回数值的情况（这样就不会抛出错误了）,例如,任何数值除以 0 都会导致错误，从而停止代码执行。但在 ECMAScript 中，任何数值除以 0 会返回 NaN，因此不会影响其他代码的执行。\n\n#### 4. 数值转换\n\n有 3 个函数可以把非数值转换为数值：Number()、parseInt()和 parseFloat()\n\nNumber()函数的转换规则：\n\n    1. 如果是Boolean 值，true 和false 将分别被转换为1 和0。\n    2. 如果是数字值，只是简单的传入和返回。\n    3. 如果是null 值，返回0。\n    4. 如果是undefined，返回NaN。\n    5. 如果是字符串，遵循下列规则：\n      -  如果字符串中只包含数字（包括前面带正号或负号的情况），则将其转换为十进制数值，即\"1\"会变成1，\"123\"会变成123，而\"011\"会变成11（注意：前导的零被忽略了）；\n      -  如果字符串中包含有效的浮点格式，如\"1.1\"，则将其转换为对应的浮点数值（同样，也会忽略前导零）；\n      -  如果字符串中包含有效的十六进制格式，例如\"0xf\"，则将其转换为相同大小的十进制整数值；\n      -  如果字符串是空的（不包含任何字符），则将其转换为0；\n      -  如果字符串中包含除上述格式之外的字符，则将其转换为NaN。\n    6. 如果是对象，则调用对象的valueOf()方法，然后依照前面的规则转换返回的值。如果转换的结果是NaN，则调用对象的toString()方法，然后再次依照前面的规则转换返回的字符串值。\n\n```javascript\nvar num1 = Number('Hello world!') //NaN\nvar num2 = Number('') //0\nvar num3 = Number('000011') //11\nvar num4 = Number(true) //1\n```\n\nparseInt()函数的转换规则\n\n```javascript\nvar num1 = parseInt('1234blue') // 1234\nvar num2 = parseInt('') // NaN\nvar num3 = parseInt('0xA') // 10（十六进制数）\nvar num4 = parseInt(22.5) // 22\nvar num5 = parseInt('070') // 56（八进制数）\nvar num6 = parseInt('70') // 70（十进制数）\nvar num7 = parseInt('0xf') // 15（十六进制数）\n```\n\nparseFloat()转换数值的规则\n\n```javascript\nvar num1 = parseFloat('1234blue') //1234 （整数）\nvar num2 = parseFloat('0xA') //0\nvar num3 = parseFloat('22.5') //22.5\nvar num4 = parseFloat('22.34.5') //22.34\nvar num5 = parseFloat('0908.5') //908.5\nvar num6 = parseFloat('3.125e7') //31250000\n```\n\n### 1.4.6 String 类型\n\n1.  字符字面量\n    String 数据类型包含一些特殊的字符字面量，也叫转义序列，用于表示非打印字符，或者具有其他用途的字符\n\n| 字面量 |                                             含义                                             |\n| :----: | :------------------------------------------------------------------------------------------: |\n|   \\n   |                                             换行                                             |\n|   \\t   |                                             制表                                             |\n|   \\b   |                                             空格                                             |\n|   \\r   |                                             回车                                             |\n|   \\f   |                                             进纸                                             |\n|  \\\\\\\\  |                                             斜杠                                             |\n|  \\\\\\'  |             单引号（'），在用单引号表示的字符串中使用。例如：'He said, \\'hey.\\''             |\n|  \\\\\\\"  |             双引号（\"），在用双引号表示的字符串中使用。例如：\"He said, \\\"hey.\\\"\"             |\n|  \\xnn  |           以十六进制代码 nn 表示的一个字符（其中 n 为 0 ～ F）。例如，\\x41 表示\"A\"           |\n| \\unnnn | 以十六进制代码 nnnn 表示的一个 Unicode 字符（其中 n 为 0 ～ F）。例如，\\u03a3 表示希腊字符 Σ |\n\n2.  字符串的特点\n    ECMAScript 中的字符串是不可变的，也就是说，字符串一旦创建，它们的值就不能改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含新值的字符串填充该变量\n\n3.  转换为字符串\n    要把一个值转换为一个字符串有两种方式:\n\n- toString()方法\n\n```javascript\nvar age = 11\nvar ageAsString = age.toString() // 字符串\"11\"\nvar found = true\nvar foundAsString = found.toString() // 字符串\"true\"\n```\n\n- String()方法\n\n```javascript\nvar value1 = 10\nvar value2 = true\nvar value3 = null\nvar value4\nalert(String(value1)) // \"10\"\nalert(String(value2)) // \"true\"\nalert(String(value3)) // \"null\"\nalert(String(value4)) // \"undefined\"\n```\n\n### 1.4.6 Object 类型\n\n胖哥，我现在可以用 js 面向对象写简单的贪吃蛇游戏，也能使用原型自己造些简单的轮子，比如 Tab 切换和轮播图等等，javascript 基础我曾过了好几遍，像闭包、对象、原型链这些都会，但是我看 vue 源码还是感觉很吃力，还有些地方甚至完全看不懂，我一直以为我的 javascript 水平已经到了差不多精通水平，现在看来离精通还是有一定距离的，我知道 javascript 是前端的基础，我也很喜欢这门语言，但我又不知道 javascript 还应该学些什么，还能学些什么，是知识储备不够还是经验不足，希望胖哥能给些建议，万分感谢\n","source":"_posts/JavaScript高级程序设计学习笔记.md","raw":"---\ntitle: JavaScript高级程序设计学习笔记\ndate: 2020-08-14 19:20\nauthor: 张传龙\ntop: true\ncover: true\nsummary: ECMAScript 的语法大量借鉴了C 及其他类C 语言（如Java 和Perl）的语法\ncategories: JavaScript\ntags: JavaScript\n---\n\n# 1 基本概念\n\n## 1.1 语法\n\n    ECMAScript 的语法大量借鉴了C 及其他类C 语言（如Java 和Perl）的语法。\n    熟悉这些语言的开发人员在接受ECMAScript 更加宽松的语法时，一定会有一种轻松自在的感觉。\n    即使没有其他编程语言基础，JavaScript仍然易上手。\n\n### 1.1.1 区分大小写\n\n    ECMAScript 中的一切（变量、函数名和操作符）都区分大小写。\n    变量名test 和变量名Test 分别表示两个不同的变量。\n\n### 1.1.2 标识符\n\n    标识符，就是指变量、函数、属性的名字，或者函数的参数，规则：\n    1. 第一个字符必须是一个字母、下划线（_）或一个美元符号（$）\n    2. 其他字符可以是字母、下划线、美元符号或数字\n    3. 不允许是关键字、保留字、true、false和null\n\nECMAScript 标识符采用驼峰大小写格式：\n\n```javascript\nvar myBlog\nvar doSomethingImportant\n```\n\n### 1.1.3 注释\n\n```javascript\n//单行注释\n\n/*\n * 这是一个多行\n * （块级）注释\n */\n```\n\n    虽然上面多行注释中的第二和第三行都以一个星号开头，但这不是必需的。之所以添加那两个星号，纯粹是为了提高注释的可读性\n\n### 1.1.4 语句\n\nECMAScript 中的语句以一个分号结尾；如果省略分号，则由解析器确定语句的结尾，如下例所示：\n\n```javascript\nvar sum = a + b // 即使没有分号也是有效的语句——不推荐\nvar diff = a - b // 有效的语句——推荐\n```\n\n    加上分号也会在某些情况下增进代码的性能，因为这样解析器就不必再花时间推测应该在哪里插入分号了\n\n尽量始终在控制语句中使用代码块——即使代码块中只有一条语句\n\n```javascript\n// 有效但容易出错，不要使用\nif (test) alert(test)\n\n// 推荐使用\nif (test) {\n  alert(test)\n}\n```\n\n    在控制语句中使用代码块可以让编码意图更加清晰，而且也能降低修改代码时出错的几率\n\n## 1.2 关键字和保留字\n\nECMAScript 的全部关键字\n\n> break do instanceof typeof case else new var\n> catch finally return void continue for switch while\n> debugger function this with default if throw delete in try\n\n保留字：\n\n> abstract enum int short boolean export interface static\n> byte extends long super char final native synchronized\n> class float package throws const goto private transient\n> debugger implements protected volatile double import public\n\n## 1.3 变量\n\nECMAScript 的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。\n\n    可以使用一条语句定义多个变量，只要像下面这样把每个变量（初始化或不初始化均可）用逗号分隔开即可：\n\n```javascript\nvar message = 'hi',\n  found = false,\n  age = 29\n```\n\n## 1.4 数据类型\n\n5 种简单数据类型（也称为基本数据类型）：\n\n- Undefined\n- Null\n- Boolean\n- Number\n- String\n\n1 种复杂数据类型: Object\n\n### 1.4.1 typeof 操作符\n\ntypeof——用来检测给定变量的数据类型的操作符\n\n- \"undefined\"——如果这个值未定义\n- \"boolean\"——如果这个值是布尔值\n- \"string\"——如果这个值是字符串\n- \"number\"——如果这个值是数值\n- \"object\"——如果这个值是对象或 null\n- \"function\"——如果这个值是函数\n\n例：\n\n```javascript\nvar message = 'some string'\nconsole.log(typeof message) // \"string\"\nconsole.log(typeof message) // \"string\"\nconsole.log(typeof 95) // \"number\"\n```\n\n    注意：typeof 是一个操作符而不是函数，因此例子中的圆括号尽管可以使用，但不是必需的\n\n### 1.4.2 Undefined 类型\n\nUndefined 类型只有一个值，即特殊的 undefined。在使用 var 声明变量但未对其加以初始化时，\n这个变量的值就是 undefined，例如：\n\n```javascript\nvar message\nconsole.log(message == undefined) //true\n```\n\n### 1.4.3 Null 类型\n\nNull 类型是第二个只有一个值的数据类型，这个特殊的值是 null。从逻辑角度来看，null 值表示一个空对象指针，而这也正是使用 typeof 操作符检测 null 值时会返回\"object\"的原因，如下面的例子所示：\n\n```javascript\nvar car = null\nconsole.log(typeof car) // \"object\"\n```\n\n实际上，undefined 值是派生自 null 值的，因此 ECMA-262 规定对它们的相等性测试要返回 true：\n\n```javascript\nconsole.log(null == undefined) //true\n```\n\n### 1.4.4 Boolean 类型\n\n该类型只有两个字面值：true 和 false。\n虽然 Boolean 类型的字面值只有两个，但 ECMAScript 中所有类型的值都有与这两个 Boolean 值 等价的值。要将一个值转换为其对应的 Boolean 值，可以调用转型函数 Boolean()，如下例所示：\n\n```javascript\nvar message = 'Hello world!'\nvar messageAsBoolean = Boolean(message)\nconsole.log(messageAsBoolean) //true\n```\n\n| 数据类型  |       转换为 true 的值       | 转换为 false 的值 |\n| :-------: | :--------------------------: | :---------------: |\n|  Boolean  |             true             |       false       |\n|  String   |        任何非空字符串        |   ''(空字符串)    |\n|  Number   | 任何非零数字值（包括无穷大） |     0 和 NaN      |\n| Undefined |        不适合这种规则        |     undefined     |\n\n### 1.4.5 Number 类型\n\nNumber 类型使用 IEEE754 格式来表示 整数和浮点数值（浮点数值在某些语言中也被称为双精度数值）。\n\n#### 1. 浮点数值\n\n所谓浮点数值，就是该数值中必须包含一个小数点，并且小数点后面必须至少有一位数字\n由于保存浮点数值需要的内存空间是保存整数值的两倍，因此 ECMAScript 会不失时机地将浮点数值 转换为整数值。显然，如果小数点后面没有跟任何数字，那么这个数值就可以作为整数值来保存。同样 地，如果浮点数值本身表示的就是一个整数（如 1.0），那么该值也会被转换为整数，如下面的例子所示：\n\n```javascript\nvar floatNum1 = 1 // 小数点后面没有数字——解析为 1\nvar floatNum2 = 10.0 // 整数——解析为 10\n```\n\n浮点数值的高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数。例如，0.1 加 0.2 的结果不是 0.3，而是 0.30000000000000004。这个小小的舍入误差会导致无法测试特定的浮点数值。 例如:\n\n```javascript\nif (a + b == 0.3) {\n  console.log('You got 0.3.') // 不要做这样的测试！\n}\n```\n\n    在这个例子中，我们测试的是两个数的和是不是等于 0.3。如果这两个数\n    是 0.05和 0.25，或者是 0.15 和 0.15都不会有问题。而如前所述，如\n    果这两个数是 0.1和 0.2，那么测试将无法通过。因此，永远不 要测试某\n    个特定的浮点数值。\n\n#### 2. 数值范围\n\n由于内存的限制，ECMAScript 并不能保存世界上所有的数值。ECMAScript 能够表示的小数值保 存在 Number.MIN_VALUE 中——在大多数浏览器中，这个值是 5e-324；能够表示的大数值保存在 Number.MAX_VALUE 中——在大多数浏览器中，这个值是 1.7976931348623157e+308。如果某次计算的 结果得到了一个超出 JavaScript 数值范围的值，那么这个数值将被自动转换成特殊的 Infinity 值。具 体来说，如果这个数值是负数，则会被转换成-Infinity（负无穷），如果这个数值是正数，则会被转 换成 Infinity（正无穷）。\n\n    如果某次计算返回了正或负的 Infinity 值，那么该值将无法继续参与下一次的计算，\n    因为 Infinity 不是能够参与计算的数值\n\n#### 3. NaN\n\nNaN，即非数值（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数 未返回数值的情况（这样就不会抛出错误了）,例如,任何数值除以 0 都会导致错误，从而停止代码执行。但在 ECMAScript 中，任何数值除以 0 会返回 NaN，因此不会影响其他代码的执行。\n\n#### 4. 数值转换\n\n有 3 个函数可以把非数值转换为数值：Number()、parseInt()和 parseFloat()\n\nNumber()函数的转换规则：\n\n    1. 如果是Boolean 值，true 和false 将分别被转换为1 和0。\n    2. 如果是数字值，只是简单的传入和返回。\n    3. 如果是null 值，返回0。\n    4. 如果是undefined，返回NaN。\n    5. 如果是字符串，遵循下列规则：\n      -  如果字符串中只包含数字（包括前面带正号或负号的情况），则将其转换为十进制数值，即\"1\"会变成1，\"123\"会变成123，而\"011\"会变成11（注意：前导的零被忽略了）；\n      -  如果字符串中包含有效的浮点格式，如\"1.1\"，则将其转换为对应的浮点数值（同样，也会忽略前导零）；\n      -  如果字符串中包含有效的十六进制格式，例如\"0xf\"，则将其转换为相同大小的十进制整数值；\n      -  如果字符串是空的（不包含任何字符），则将其转换为0；\n      -  如果字符串中包含除上述格式之外的字符，则将其转换为NaN。\n    6. 如果是对象，则调用对象的valueOf()方法，然后依照前面的规则转换返回的值。如果转换的结果是NaN，则调用对象的toString()方法，然后再次依照前面的规则转换返回的字符串值。\n\n```javascript\nvar num1 = Number('Hello world!') //NaN\nvar num2 = Number('') //0\nvar num3 = Number('000011') //11\nvar num4 = Number(true) //1\n```\n\nparseInt()函数的转换规则\n\n```javascript\nvar num1 = parseInt('1234blue') // 1234\nvar num2 = parseInt('') // NaN\nvar num3 = parseInt('0xA') // 10（十六进制数）\nvar num4 = parseInt(22.5) // 22\nvar num5 = parseInt('070') // 56（八进制数）\nvar num6 = parseInt('70') // 70（十进制数）\nvar num7 = parseInt('0xf') // 15（十六进制数）\n```\n\nparseFloat()转换数值的规则\n\n```javascript\nvar num1 = parseFloat('1234blue') //1234 （整数）\nvar num2 = parseFloat('0xA') //0\nvar num3 = parseFloat('22.5') //22.5\nvar num4 = parseFloat('22.34.5') //22.34\nvar num5 = parseFloat('0908.5') //908.5\nvar num6 = parseFloat('3.125e7') //31250000\n```\n\n### 1.4.6 String 类型\n\n1.  字符字面量\n    String 数据类型包含一些特殊的字符字面量，也叫转义序列，用于表示非打印字符，或者具有其他用途的字符\n\n| 字面量 |                                             含义                                             |\n| :----: | :------------------------------------------------------------------------------------------: |\n|   \\n   |                                             换行                                             |\n|   \\t   |                                             制表                                             |\n|   \\b   |                                             空格                                             |\n|   \\r   |                                             回车                                             |\n|   \\f   |                                             进纸                                             |\n|  \\\\\\\\  |                                             斜杠                                             |\n|  \\\\\\'  |             单引号（'），在用单引号表示的字符串中使用。例如：'He said, \\'hey.\\''             |\n|  \\\\\\\"  |             双引号（\"），在用双引号表示的字符串中使用。例如：\"He said, \\\"hey.\\\"\"             |\n|  \\xnn  |           以十六进制代码 nn 表示的一个字符（其中 n 为 0 ～ F）。例如，\\x41 表示\"A\"           |\n| \\unnnn | 以十六进制代码 nnnn 表示的一个 Unicode 字符（其中 n 为 0 ～ F）。例如，\\u03a3 表示希腊字符 Σ |\n\n2.  字符串的特点\n    ECMAScript 中的字符串是不可变的，也就是说，字符串一旦创建，它们的值就不能改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含新值的字符串填充该变量\n\n3.  转换为字符串\n    要把一个值转换为一个字符串有两种方式:\n\n- toString()方法\n\n```javascript\nvar age = 11\nvar ageAsString = age.toString() // 字符串\"11\"\nvar found = true\nvar foundAsString = found.toString() // 字符串\"true\"\n```\n\n- String()方法\n\n```javascript\nvar value1 = 10\nvar value2 = true\nvar value3 = null\nvar value4\nalert(String(value1)) // \"10\"\nalert(String(value2)) // \"true\"\nalert(String(value3)) // \"null\"\nalert(String(value4)) // \"undefined\"\n```\n\n### 1.4.6 Object 类型\n\n胖哥，我现在可以用 js 面向对象写简单的贪吃蛇游戏，也能使用原型自己造些简单的轮子，比如 Tab 切换和轮播图等等，javascript 基础我曾过了好几遍，像闭包、对象、原型链这些都会，但是我看 vue 源码还是感觉很吃力，还有些地方甚至完全看不懂，我一直以为我的 javascript 水平已经到了差不多精通水平，现在看来离精通还是有一定距离的，我知道 javascript 是前端的基础，我也很喜欢这门语言，但我又不知道 javascript 还应该学些什么，还能学些什么，是知识储备不够还是经验不足，希望胖哥能给些建议，万分感谢\n","slug":"JavaScript高级程序设计学习笔记","published":1,"updated":"2020-08-14T11:42:06.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckduyy4u9000gqsnvei4c5bf5","content":"<h1 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1 基本概念\"></a>1 基本概念</h1><h2 id=\"1-1-语法\"><a href=\"#1-1-语法\" class=\"headerlink\" title=\"1.1 语法\"></a>1.1 语法</h2><pre><code>ECMAScript 的语法大量借鉴了C 及其他类C 语言（如Java 和Perl）的语法。\n熟悉这些语言的开发人员在接受ECMAScript 更加宽松的语法时，一定会有一种轻松自在的感觉。\n即使没有其他编程语言基础，JavaScript仍然易上手。</code></pre>\n<h3 id=\"1-1-1-区分大小写\"><a href=\"#1-1-1-区分大小写\" class=\"headerlink\" title=\"1.1.1 区分大小写\"></a>1.1.1 区分大小写</h3><pre><code>ECMAScript 中的一切（变量、函数名和操作符）都区分大小写。\n变量名test 和变量名Test 分别表示两个不同的变量。</code></pre>\n<h3 id=\"1-1-2-标识符\"><a href=\"#1-1-2-标识符\" class=\"headerlink\" title=\"1.1.2 标识符\"></a>1.1.2 标识符</h3><pre><code>标识符，就是指变量、函数、属性的名字，或者函数的参数，规则：\n1. 第一个字符必须是一个字母、下划线（_）或一个美元符号（$）\n2. 其他字符可以是字母、下划线、美元符号或数字\n3. 不允许是关键字、保留字、true、false和null</code></pre>\n<p>ECMAScript 标识符采用驼峰大小写格式：</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> myBlog\n<span class=\"token keyword\">var</span> doSomethingImportant<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"1-1-3-注释\"><a href=\"#1-1-3-注释\" class=\"headerlink\" title=\"1.1.3 注释\"></a>1.1.3 注释</h3><pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">//单行注释</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/*\n * 这是一个多行\n * （块级）注释\n */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre><code>虽然上面多行注释中的第二和第三行都以一个星号开头，但这不是必需的。之所以添加那两个星号，纯粹是为了提高注释的可读性</code></pre>\n<h3 id=\"1-1-4-语句\"><a href=\"#1-1-4-语句\" class=\"headerlink\" title=\"1.1.4 语句\"></a>1.1.4 语句</h3><p>ECMAScript 中的语句以一个分号结尾；如果省略分号，则由解析器确定语句的结尾，如下例所示：</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b <span class=\"token comment\" spellcheck=\"true\">// 即使没有分号也是有效的语句——不推荐</span>\n<span class=\"token keyword\">var</span> diff <span class=\"token operator\">=</span> a <span class=\"token operator\">-</span> b <span class=\"token comment\" spellcheck=\"true\">// 有效的语句——推荐</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre><code>加上分号也会在某些情况下增进代码的性能，因为这样解析器就不必再花时间推测应该在哪里插入分号了</code></pre>\n<p>尽量始终在控制语句中使用代码块——即使代码块中只有一条语句</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">// 有效但容易出错，不要使用</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 推荐使用</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre><code>在控制语句中使用代码块可以让编码意图更加清晰，而且也能降低修改代码时出错的几率</code></pre>\n<h2 id=\"1-2-关键字和保留字\"><a href=\"#1-2-关键字和保留字\" class=\"headerlink\" title=\"1.2 关键字和保留字\"></a>1.2 关键字和保留字</h2><p>ECMAScript 的全部关键字</p>\n<blockquote>\n<p>break do instanceof typeof case else new var<br>catch finally return void continue for switch while<br>debugger function this with default if throw delete in try</p>\n</blockquote>\n<p>保留字：</p>\n<blockquote>\n<p>abstract enum int short boolean export interface static<br>byte extends long super char final native synchronized<br>class float package throws const goto private transient<br>debugger implements protected volatile double import public</p>\n</blockquote>\n<h2 id=\"1-3-变量\"><a href=\"#1-3-变量\" class=\"headerlink\" title=\"1.3 变量\"></a>1.3 变量</h2><p>ECMAScript 的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。</p>\n<pre><code>可以使用一条语句定义多个变量，只要像下面这样把每个变量（初始化或不初始化均可）用逗号分隔开即可：</code></pre>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span>\n  found <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  age <span class=\"token operator\">=</span> <span class=\"token number\">29</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"1-4-数据类型\"><a href=\"#1-4-数据类型\" class=\"headerlink\" title=\"1.4 数据类型\"></a>1.4 数据类型</h2><p>5 种简单数据类型（也称为基本数据类型）：</p>\n<ul>\n<li>Undefined</li>\n<li>Null</li>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n</ul>\n<p>1 种复杂数据类型: Object</p>\n<h3 id=\"1-4-1-typeof-操作符\"><a href=\"#1-4-1-typeof-操作符\" class=\"headerlink\" title=\"1.4.1 typeof 操作符\"></a>1.4.1 typeof 操作符</h3><p>typeof——用来检测给定变量的数据类型的操作符</p>\n<ul>\n<li>“undefined”——如果这个值未定义</li>\n<li>“boolean”——如果这个值是布尔值</li>\n<li>“string”——如果这个值是字符串</li>\n<li>“number”——如果这个值是数值</li>\n<li>“object”——如果这个值是对象或 null</li>\n<li>“function”——如果这个值是函数</li>\n</ul>\n<p>例：</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> <span class=\"token string\">'some string'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> message<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// \"string\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> message<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// \"string\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">95</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// \"number\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<pre><code>注意：typeof 是一个操作符而不是函数，因此例子中的圆括号尽管可以使用，但不是必需的</code></pre>\n<h3 id=\"1-4-2-Undefined-类型\"><a href=\"#1-4-2-Undefined-类型\" class=\"headerlink\" title=\"1.4.2 Undefined 类型\"></a>1.4.2 Undefined 类型</h3><p>Undefined 类型只有一个值，即特殊的 undefined。在使用 var 声明变量但未对其加以初始化时，<br>这个变量的值就是 undefined，例如：</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> message\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">==</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"1-4-3-Null-类型\"><a href=\"#1-4-3-Null-类型\" class=\"headerlink\" title=\"1.4.3 Null 类型\"></a>1.4.3 Null 类型</h3><p>Null 类型是第二个只有一个值的数据类型，这个特殊的值是 null。从逻辑角度来看，null 值表示一个空对象指针，而这也正是使用 typeof 操作符检测 null 值时会返回”object”的原因，如下面的例子所示：</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> car<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// \"object\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>实际上，undefined 值是派生自 null 值的，因此 ECMA-262 规定对它们的相等性测试要返回 true：</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"1-4-4-Boolean-类型\"><a href=\"#1-4-4-Boolean-类型\" class=\"headerlink\" title=\"1.4.4 Boolean 类型\"></a>1.4.4 Boolean 类型</h3><p>该类型只有两个字面值：true 和 false。<br>虽然 Boolean 类型的字面值只有两个，但 ECMAScript 中所有类型的值都有与这两个 Boolean 值 等价的值。要将一个值转换为其对应的 Boolean 值，可以调用转型函数 Boolean()，如下例所示：</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> <span class=\"token string\">'Hello world!'</span>\n<span class=\"token keyword\">var</span> messageAsBoolean <span class=\"token operator\">=</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>messageAsBoolean<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<table>\n<thead>\n<tr>\n<th align=\"center\">数据类型</th>\n<th align=\"center\">转换为 true 的值</th>\n<th align=\"center\">转换为 false 的值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Boolean</td>\n<td align=\"center\">true</td>\n<td align=\"center\">false</td>\n</tr>\n<tr>\n<td align=\"center\">String</td>\n<td align=\"center\">任何非空字符串</td>\n<td align=\"center\">‘’(空字符串)</td>\n</tr>\n<tr>\n<td align=\"center\">Number</td>\n<td align=\"center\">任何非零数字值（包括无穷大）</td>\n<td align=\"center\">0 和 NaN</td>\n</tr>\n<tr>\n<td align=\"center\">Undefined</td>\n<td align=\"center\">不适合这种规则</td>\n<td align=\"center\">undefined</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-4-5-Number-类型\"><a href=\"#1-4-5-Number-类型\" class=\"headerlink\" title=\"1.4.5 Number 类型\"></a>1.4.5 Number 类型</h3><p>Number 类型使用 IEEE754 格式来表示 整数和浮点数值（浮点数值在某些语言中也被称为双精度数值）。</p>\n<h4 id=\"1-浮点数值\"><a href=\"#1-浮点数值\" class=\"headerlink\" title=\"1. 浮点数值\"></a>1. 浮点数值</h4><p>所谓浮点数值，就是该数值中必须包含一个小数点，并且小数点后面必须至少有一位数字<br>由于保存浮点数值需要的内存空间是保存整数值的两倍，因此 ECMAScript 会不失时机地将浮点数值 转换为整数值。显然，如果小数点后面没有跟任何数字，那么这个数值就可以作为整数值来保存。同样 地，如果浮点数值本身表示的就是一个整数（如 1.0），那么该值也会被转换为整数，如下面的例子所示：</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> floatNum1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\" spellcheck=\"true\">// 小数点后面没有数字——解析为 1</span>\n<span class=\"token keyword\">var</span> floatNum2 <span class=\"token operator\">=</span> <span class=\"token number\">10.0</span> <span class=\"token comment\" spellcheck=\"true\">// 整数——解析为 10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>浮点数值的高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数。例如，0.1 加 0.2 的结果不是 0.3，而是 0.30000000000000004。这个小小的舍入误差会导致无法测试特定的浮点数值。 例如:</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">==</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You got 0.3.'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 不要做这样的测试！</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre><code>在这个例子中，我们测试的是两个数的和是不是等于 0.3。如果这两个数\n是 0.05和 0.25，或者是 0.15 和 0.15都不会有问题。而如前所述，如\n果这两个数是 0.1和 0.2，那么测试将无法通过。因此，永远不 要测试某\n个特定的浮点数值。</code></pre>\n<h4 id=\"2-数值范围\"><a href=\"#2-数值范围\" class=\"headerlink\" title=\"2. 数值范围\"></a>2. 数值范围</h4><p>由于内存的限制，ECMAScript 并不能保存世界上所有的数值。ECMAScript 能够表示的小数值保 存在 Number.MIN_VALUE 中——在大多数浏览器中，这个值是 5e-324；能够表示的大数值保存在 Number.MAX_VALUE 中——在大多数浏览器中，这个值是 1.7976931348623157e+308。如果某次计算的 结果得到了一个超出 JavaScript 数值范围的值，那么这个数值将被自动转换成特殊的 Infinity 值。具 体来说，如果这个数值是负数，则会被转换成-Infinity（负无穷），如果这个数值是正数，则会被转 换成 Infinity（正无穷）。</p>\n<pre><code>如果某次计算返回了正或负的 Infinity 值，那么该值将无法继续参与下一次的计算，\n因为 Infinity 不是能够参与计算的数值</code></pre>\n<h4 id=\"3-NaN\"><a href=\"#3-NaN\" class=\"headerlink\" title=\"3. NaN\"></a>3. NaN</h4><p>NaN，即非数值（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数 未返回数值的情况（这样就不会抛出错误了）,例如,任何数值除以 0 都会导致错误，从而停止代码执行。但在 ECMAScript 中，任何数值除以 0 会返回 NaN，因此不会影响其他代码的执行。</p>\n<h4 id=\"4-数值转换\"><a href=\"#4-数值转换\" class=\"headerlink\" title=\"4. 数值转换\"></a>4. 数值转换</h4><p>有 3 个函数可以把非数值转换为数值：Number()、parseInt()和 parseFloat()</p>\n<p>Number()函数的转换规则：</p>\n<pre><code>1. 如果是Boolean 值，true 和false 将分别被转换为1 和0。\n2. 如果是数字值，只是简单的传入和返回。\n3. 如果是null 值，返回0。\n4. 如果是undefined，返回NaN。\n5. 如果是字符串，遵循下列规则：\n  -  如果字符串中只包含数字（包括前面带正号或负号的情况），则将其转换为十进制数值，即&quot;1&quot;会变成1，&quot;123&quot;会变成123，而&quot;011&quot;会变成11（注意：前导的零被忽略了）；\n  -  如果字符串中包含有效的浮点格式，如&quot;1.1&quot;，则将其转换为对应的浮点数值（同样，也会忽略前导零）；\n  -  如果字符串中包含有效的十六进制格式，例如&quot;0xf&quot;，则将其转换为相同大小的十进制整数值；\n  -  如果字符串是空的（不包含任何字符），则将其转换为0；\n  -  如果字符串中包含除上述格式之外的字符，则将其转换为NaN。\n6. 如果是对象，则调用对象的valueOf()方法，然后依照前面的规则转换返回的值。如果转换的结果是NaN，则调用对象的toString()方法，然后再次依照前面的规则转换返回的字符串值。</code></pre>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> num1 <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world!'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//NaN</span>\n<span class=\"token keyword\">var</span> num2 <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//0</span>\n<span class=\"token keyword\">var</span> num3 <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'000011'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//11</span>\n<span class=\"token keyword\">var</span> num4 <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>parseInt()函数的转换规则</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> num1 <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1234blue'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 1234</span>\n<span class=\"token keyword\">var</span> num2 <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// NaN</span>\n<span class=\"token keyword\">var</span> num3 <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0xA'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 10（十六进制数）</span>\n<span class=\"token keyword\">var</span> num4 <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">22.5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 22</span>\n<span class=\"token keyword\">var</span> num5 <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'070'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 56（八进制数）</span>\n<span class=\"token keyword\">var</span> num6 <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'70'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 70（十进制数）</span>\n<span class=\"token keyword\">var</span> num7 <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0xf'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 15（十六进制数）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>parseFloat()转换数值的规则</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> num1 <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1234blue'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//1234 （整数）</span>\n<span class=\"token keyword\">var</span> num2 <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0xA'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//0</span>\n<span class=\"token keyword\">var</span> num3 <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'22.5'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//22.5</span>\n<span class=\"token keyword\">var</span> num4 <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'22.34.5'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//22.34</span>\n<span class=\"token keyword\">var</span> num5 <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0908.5'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//908.5</span>\n<span class=\"token keyword\">var</span> num6 <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3.125e7'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//31250000</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"1-4-6-String-类型\"><a href=\"#1-4-6-String-类型\" class=\"headerlink\" title=\"1.4.6 String 类型\"></a>1.4.6 String 类型</h3><ol>\n<li>字符字面量<br>String 数据类型包含一些特殊的字符字面量，也叫转义序列，用于表示非打印字符，或者具有其他用途的字符</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">字面量</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">\\n</td>\n<td align=\"center\">换行</td>\n</tr>\n<tr>\n<td align=\"center\">\\t</td>\n<td align=\"center\">制表</td>\n</tr>\n<tr>\n<td align=\"center\">\\b</td>\n<td align=\"center\">空格</td>\n</tr>\n<tr>\n<td align=\"center\">\\r</td>\n<td align=\"center\">回车</td>\n</tr>\n<tr>\n<td align=\"center\">\\f</td>\n<td align=\"center\">进纸</td>\n</tr>\n<tr>\n<td align=\"center\">\\\\</td>\n<td align=\"center\">斜杠</td>\n</tr>\n<tr>\n<td align=\"center\">\\&#39;</td>\n<td align=\"center\">单引号（’），在用单引号表示的字符串中使用。例如：’He said, &#39;hey.&#39;‘</td>\n</tr>\n<tr>\n<td align=\"center\">\\&quot;</td>\n<td align=\"center\">双引号（”），在用双引号表示的字符串中使用。例如：”He said, &quot;hey.&quot;“</td>\n</tr>\n<tr>\n<td align=\"center\">\\xnn</td>\n<td align=\"center\">以十六进制代码 nn 表示的一个字符（其中 n 为 0 ～ F）。例如，\\x41 表示”A”</td>\n</tr>\n<tr>\n<td align=\"center\">\\unnnn</td>\n<td align=\"center\">以十六进制代码 nnnn 表示的一个 Unicode 字符（其中 n 为 0 ～ F）。例如，\\u03a3 表示希腊字符 Σ</td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li><p>字符串的特点<br>ECMAScript 中的字符串是不可变的，也就是说，字符串一旦创建，它们的值就不能改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含新值的字符串填充该变量</p>\n</li>\n<li><p>转换为字符串<br>要把一个值转换为一个字符串有两种方式:</p>\n</li>\n</ol>\n<ul>\n<li>toString()方法</li>\n</ul>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n<span class=\"token keyword\">var</span> ageAsString <span class=\"token operator\">=</span> age<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 字符串\"11\"</span>\n<span class=\"token keyword\">var</span> found <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">var</span> foundAsString <span class=\"token operator\">=</span> found<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 字符串\"true\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>String()方法</li>\n</ul>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> value1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">var</span> value2 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">var</span> value3 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token keyword\">var</span> value4\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// \"10\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>value2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// \"true\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>value3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// \"null\"</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>value4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// \"undefined\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"1-4-6-Object-类型\"><a href=\"#1-4-6-Object-类型\" class=\"headerlink\" title=\"1.4.6 Object 类型\"></a>1.4.6 Object 类型</h3><p>胖哥，我现在可以用 js 面向对象写简单的贪吃蛇游戏，也能使用原型自己造些简单的轮子，比如 Tab 切换和轮播图等等，javascript 基础我曾过了好几遍，像闭包、对象、原型链这些都会，但是我看 vue 源码还是感觉很吃力，还有些地方甚至完全看不懂，我一直以为我的 javascript 水平已经到了差不多精通水平，现在看来离精通还是有一定距离的，我知道 javascript 是前端的基础，我也很喜欢这门语言，但我又不知道 javascript 还应该学些什么，还能学些什么，是知识储备不够还是经验不足，希望胖哥能给些建议，万分感谢</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1 基本概念\"></a>1 基本概念</h1><h2 id=\"1-1-语法\"><a href=\"#1-1-语法\" class=\"headerlink\" title=\"1.1 语法\"></a>1.1 语法</h2><pre><code>ECMAScript 的语法大量借鉴了C 及其他类C 语言（如Java 和Perl）的语法。\n熟悉这些语言的开发人员在接受ECMAScript 更加宽松的语法时，一定会有一种轻松自在的感觉。\n即使没有其他编程语言基础，JavaScript仍然易上手。</code></pre>\n<h3 id=\"1-1-1-区分大小写\"><a href=\"#1-1-1-区分大小写\" class=\"headerlink\" title=\"1.1.1 区分大小写\"></a>1.1.1 区分大小写</h3><pre><code>ECMAScript 中的一切（变量、函数名和操作符）都区分大小写。\n变量名test 和变量名Test 分别表示两个不同的变量。</code></pre>\n<h3 id=\"1-1-2-标识符\"><a href=\"#1-1-2-标识符\" class=\"headerlink\" title=\"1.1.2 标识符\"></a>1.1.2 标识符</h3><pre><code>标识符，就是指变量、函数、属性的名字，或者函数的参数，规则：\n1. 第一个字符必须是一个字母、下划线（_）或一个美元符号（$）\n2. 其他字符可以是字母、下划线、美元符号或数字\n3. 不允许是关键字、保留字、true、false和null</code></pre>\n<p>ECMAScript 标识符采用驼峰大小写格式：</p>\n<pre><code class=\"javascript\">var myBlog\nvar doSomethingImportant</code></pre>\n<h3 id=\"1-1-3-注释\"><a href=\"#1-1-3-注释\" class=\"headerlink\" title=\"1.1.3 注释\"></a>1.1.3 注释</h3><pre><code class=\"javascript\">//单行注释\n\n/*\n * 这是一个多行\n * （块级）注释\n */</code></pre>\n<pre><code>虽然上面多行注释中的第二和第三行都以一个星号开头，但这不是必需的。之所以添加那两个星号，纯粹是为了提高注释的可读性</code></pre>\n<h3 id=\"1-1-4-语句\"><a href=\"#1-1-4-语句\" class=\"headerlink\" title=\"1.1.4 语句\"></a>1.1.4 语句</h3><p>ECMAScript 中的语句以一个分号结尾；如果省略分号，则由解析器确定语句的结尾，如下例所示：</p>\n<pre><code class=\"javascript\">var sum = a + b // 即使没有分号也是有效的语句——不推荐\nvar diff = a - b // 有效的语句——推荐</code></pre>\n<pre><code>加上分号也会在某些情况下增进代码的性能，因为这样解析器就不必再花时间推测应该在哪里插入分号了</code></pre>\n<p>尽量始终在控制语句中使用代码块——即使代码块中只有一条语句</p>\n<pre><code class=\"javascript\">// 有效但容易出错，不要使用\nif (test) alert(test)\n\n// 推荐使用\nif (test) &amp;#123;\n  alert(test)\n&amp;#125;</code></pre>\n<pre><code>在控制语句中使用代码块可以让编码意图更加清晰，而且也能降低修改代码时出错的几率</code></pre>\n<h2 id=\"1-2-关键字和保留字\"><a href=\"#1-2-关键字和保留字\" class=\"headerlink\" title=\"1.2 关键字和保留字\"></a>1.2 关键字和保留字</h2><p>ECMAScript 的全部关键字</p>\n<blockquote>\n<p>break do instanceof typeof case else new var<br>catch finally return void continue for switch while<br>debugger function this with default if throw delete in try</p>\n</blockquote>\n<p>保留字：</p>\n<blockquote>\n<p>abstract enum int short boolean export interface static<br>byte extends long super char final native synchronized<br>class float package throws const goto private transient<br>debugger implements protected volatile double import public</p>\n</blockquote>\n<h2 id=\"1-3-变量\"><a href=\"#1-3-变量\" class=\"headerlink\" title=\"1.3 变量\"></a>1.3 变量</h2><p>ECMAScript 的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。</p>\n<pre><code>可以使用一条语句定义多个变量，只要像下面这样把每个变量（初始化或不初始化均可）用逗号分隔开即可：</code></pre>\n<pre><code class=\"javascript\">var message = &#39;hi&#39;,\n  found = false,\n  age = 29</code></pre>\n<h2 id=\"1-4-数据类型\"><a href=\"#1-4-数据类型\" class=\"headerlink\" title=\"1.4 数据类型\"></a>1.4 数据类型</h2><p>5 种简单数据类型（也称为基本数据类型）：</p>\n<ul>\n<li>Undefined</li>\n<li>Null</li>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n</ul>\n<p>1 种复杂数据类型: Object</p>\n<h3 id=\"1-4-1-typeof-操作符\"><a href=\"#1-4-1-typeof-操作符\" class=\"headerlink\" title=\"1.4.1 typeof 操作符\"></a>1.4.1 typeof 操作符</h3><p>typeof——用来检测给定变量的数据类型的操作符</p>\n<ul>\n<li>“undefined”——如果这个值未定义</li>\n<li>“boolean”——如果这个值是布尔值</li>\n<li>“string”——如果这个值是字符串</li>\n<li>“number”——如果这个值是数值</li>\n<li>“object”——如果这个值是对象或 null</li>\n<li>“function”——如果这个值是函数</li>\n</ul>\n<p>例：</p>\n<pre><code class=\"javascript\">var message = &#39;some string&#39;\nconsole.log(typeof message) // &quot;string&quot;\nconsole.log(typeof message) // &quot;string&quot;\nconsole.log(typeof 95) // &quot;number&quot;</code></pre>\n<pre><code>注意：typeof 是一个操作符而不是函数，因此例子中的圆括号尽管可以使用，但不是必需的</code></pre>\n<h3 id=\"1-4-2-Undefined-类型\"><a href=\"#1-4-2-Undefined-类型\" class=\"headerlink\" title=\"1.4.2 Undefined 类型\"></a>1.4.2 Undefined 类型</h3><p>Undefined 类型只有一个值，即特殊的 undefined。在使用 var 声明变量但未对其加以初始化时，<br>这个变量的值就是 undefined，例如：</p>\n<pre><code class=\"javascript\">var message\nconsole.log(message == undefined) //true</code></pre>\n<h3 id=\"1-4-3-Null-类型\"><a href=\"#1-4-3-Null-类型\" class=\"headerlink\" title=\"1.4.3 Null 类型\"></a>1.4.3 Null 类型</h3><p>Null 类型是第二个只有一个值的数据类型，这个特殊的值是 null。从逻辑角度来看，null 值表示一个空对象指针，而这也正是使用 typeof 操作符检测 null 值时会返回”object”的原因，如下面的例子所示：</p>\n<pre><code class=\"javascript\">var car = null\nconsole.log(typeof car) // &quot;object&quot;</code></pre>\n<p>实际上，undefined 值是派生自 null 值的，因此 ECMA-262 规定对它们的相等性测试要返回 true：</p>\n<pre><code class=\"javascript\">console.log(null == undefined) //true</code></pre>\n<h3 id=\"1-4-4-Boolean-类型\"><a href=\"#1-4-4-Boolean-类型\" class=\"headerlink\" title=\"1.4.4 Boolean 类型\"></a>1.4.4 Boolean 类型</h3><p>该类型只有两个字面值：true 和 false。<br>虽然 Boolean 类型的字面值只有两个，但 ECMAScript 中所有类型的值都有与这两个 Boolean 值 等价的值。要将一个值转换为其对应的 Boolean 值，可以调用转型函数 Boolean()，如下例所示：</p>\n<pre><code class=\"javascript\">var message = &#39;Hello world!&#39;\nvar messageAsBoolean = Boolean(message)\nconsole.log(messageAsBoolean) //true</code></pre>\n<table>\n<thead>\n<tr>\n<th align=\"center\">数据类型</th>\n<th align=\"center\">转换为 true 的值</th>\n<th align=\"center\">转换为 false 的值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Boolean</td>\n<td align=\"center\">true</td>\n<td align=\"center\">false</td>\n</tr>\n<tr>\n<td align=\"center\">String</td>\n<td align=\"center\">任何非空字符串</td>\n<td align=\"center\">‘’(空字符串)</td>\n</tr>\n<tr>\n<td align=\"center\">Number</td>\n<td align=\"center\">任何非零数字值（包括无穷大）</td>\n<td align=\"center\">0 和 NaN</td>\n</tr>\n<tr>\n<td align=\"center\">Undefined</td>\n<td align=\"center\">不适合这种规则</td>\n<td align=\"center\">undefined</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-4-5-Number-类型\"><a href=\"#1-4-5-Number-类型\" class=\"headerlink\" title=\"1.4.5 Number 类型\"></a>1.4.5 Number 类型</h3><p>Number 类型使用 IEEE754 格式来表示 整数和浮点数值（浮点数值在某些语言中也被称为双精度数值）。</p>\n<h4 id=\"1-浮点数值\"><a href=\"#1-浮点数值\" class=\"headerlink\" title=\"1. 浮点数值\"></a>1. 浮点数值</h4><p>所谓浮点数值，就是该数值中必须包含一个小数点，并且小数点后面必须至少有一位数字<br>由于保存浮点数值需要的内存空间是保存整数值的两倍，因此 ECMAScript 会不失时机地将浮点数值 转换为整数值。显然，如果小数点后面没有跟任何数字，那么这个数值就可以作为整数值来保存。同样 地，如果浮点数值本身表示的就是一个整数（如 1.0），那么该值也会被转换为整数，如下面的例子所示：</p>\n<pre><code class=\"javascript\">var floatNum1 = 1 // 小数点后面没有数字——解析为 1\nvar floatNum2 = 10.0 // 整数——解析为 10</code></pre>\n<p>浮点数值的高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数。例如，0.1 加 0.2 的结果不是 0.3，而是 0.30000000000000004。这个小小的舍入误差会导致无法测试特定的浮点数值。 例如:</p>\n<pre><code class=\"javascript\">if (a + b == 0.3) &amp;#123;\n  console.log(&#39;You got 0.3.&#39;) // 不要做这样的测试！\n&amp;#125;</code></pre>\n<pre><code>在这个例子中，我们测试的是两个数的和是不是等于 0.3。如果这两个数\n是 0.05和 0.25，或者是 0.15 和 0.15都不会有问题。而如前所述，如\n果这两个数是 0.1和 0.2，那么测试将无法通过。因此，永远不 要测试某\n个特定的浮点数值。</code></pre>\n<h4 id=\"2-数值范围\"><a href=\"#2-数值范围\" class=\"headerlink\" title=\"2. 数值范围\"></a>2. 数值范围</h4><p>由于内存的限制，ECMAScript 并不能保存世界上所有的数值。ECMAScript 能够表示的小数值保 存在 Number.MIN_VALUE 中——在大多数浏览器中，这个值是 5e-324；能够表示的大数值保存在 Number.MAX_VALUE 中——在大多数浏览器中，这个值是 1.7976931348623157e+308。如果某次计算的 结果得到了一个超出 JavaScript 数值范围的值，那么这个数值将被自动转换成特殊的 Infinity 值。具 体来说，如果这个数值是负数，则会被转换成-Infinity（负无穷），如果这个数值是正数，则会被转 换成 Infinity（正无穷）。</p>\n<pre><code>如果某次计算返回了正或负的 Infinity 值，那么该值将无法继续参与下一次的计算，\n因为 Infinity 不是能够参与计算的数值</code></pre>\n<h4 id=\"3-NaN\"><a href=\"#3-NaN\" class=\"headerlink\" title=\"3. NaN\"></a>3. NaN</h4><p>NaN，即非数值（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数 未返回数值的情况（这样就不会抛出错误了）,例如,任何数值除以 0 都会导致错误，从而停止代码执行。但在 ECMAScript 中，任何数值除以 0 会返回 NaN，因此不会影响其他代码的执行。</p>\n<h4 id=\"4-数值转换\"><a href=\"#4-数值转换\" class=\"headerlink\" title=\"4. 数值转换\"></a>4. 数值转换</h4><p>有 3 个函数可以把非数值转换为数值：Number()、parseInt()和 parseFloat()</p>\n<p>Number()函数的转换规则：</p>\n<pre><code>1. 如果是Boolean 值，true 和false 将分别被转换为1 和0。\n2. 如果是数字值，只是简单的传入和返回。\n3. 如果是null 值，返回0。\n4. 如果是undefined，返回NaN。\n5. 如果是字符串，遵循下列规则：\n  -  如果字符串中只包含数字（包括前面带正号或负号的情况），则将其转换为十进制数值，即&quot;1&quot;会变成1，&quot;123&quot;会变成123，而&quot;011&quot;会变成11（注意：前导的零被忽略了）；\n  -  如果字符串中包含有效的浮点格式，如&quot;1.1&quot;，则将其转换为对应的浮点数值（同样，也会忽略前导零）；\n  -  如果字符串中包含有效的十六进制格式，例如&quot;0xf&quot;，则将其转换为相同大小的十进制整数值；\n  -  如果字符串是空的（不包含任何字符），则将其转换为0；\n  -  如果字符串中包含除上述格式之外的字符，则将其转换为NaN。\n6. 如果是对象，则调用对象的valueOf()方法，然后依照前面的规则转换返回的值。如果转换的结果是NaN，则调用对象的toString()方法，然后再次依照前面的规则转换返回的字符串值。</code></pre>\n<pre><code class=\"javascript\">var num1 = Number(&#39;Hello world!&#39;) //NaN\nvar num2 = Number(&#39;&#39;) //0\nvar num3 = Number(&#39;000011&#39;) //11\nvar num4 = Number(true) //1</code></pre>\n<p>parseInt()函数的转换规则</p>\n<pre><code class=\"javascript\">var num1 = parseInt(&#39;1234blue&#39;) // 1234\nvar num2 = parseInt(&#39;&#39;) // NaN\nvar num3 = parseInt(&#39;0xA&#39;) // 10（十六进制数）\nvar num4 = parseInt(22.5) // 22\nvar num5 = parseInt(&#39;070&#39;) // 56（八进制数）\nvar num6 = parseInt(&#39;70&#39;) // 70（十进制数）\nvar num7 = parseInt(&#39;0xf&#39;) // 15（十六进制数）</code></pre>\n<p>parseFloat()转换数值的规则</p>\n<pre><code class=\"javascript\">var num1 = parseFloat(&#39;1234blue&#39;) //1234 （整数）\nvar num2 = parseFloat(&#39;0xA&#39;) //0\nvar num3 = parseFloat(&#39;22.5&#39;) //22.5\nvar num4 = parseFloat(&#39;22.34.5&#39;) //22.34\nvar num5 = parseFloat(&#39;0908.5&#39;) //908.5\nvar num6 = parseFloat(&#39;3.125e7&#39;) //31250000</code></pre>\n<h3 id=\"1-4-6-String-类型\"><a href=\"#1-4-6-String-类型\" class=\"headerlink\" title=\"1.4.6 String 类型\"></a>1.4.6 String 类型</h3><ol>\n<li>字符字面量<br>String 数据类型包含一些特殊的字符字面量，也叫转义序列，用于表示非打印字符，或者具有其他用途的字符</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">字面量</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">\\n</td>\n<td align=\"center\">换行</td>\n</tr>\n<tr>\n<td align=\"center\">\\t</td>\n<td align=\"center\">制表</td>\n</tr>\n<tr>\n<td align=\"center\">\\b</td>\n<td align=\"center\">空格</td>\n</tr>\n<tr>\n<td align=\"center\">\\r</td>\n<td align=\"center\">回车</td>\n</tr>\n<tr>\n<td align=\"center\">\\f</td>\n<td align=\"center\">进纸</td>\n</tr>\n<tr>\n<td align=\"center\">\\\\</td>\n<td align=\"center\">斜杠</td>\n</tr>\n<tr>\n<td align=\"center\">\\&#39;</td>\n<td align=\"center\">单引号（’），在用单引号表示的字符串中使用。例如：’He said, &#39;hey.&#39;‘</td>\n</tr>\n<tr>\n<td align=\"center\">\\&quot;</td>\n<td align=\"center\">双引号（”），在用双引号表示的字符串中使用。例如：”He said, &quot;hey.&quot;“</td>\n</tr>\n<tr>\n<td align=\"center\">\\xnn</td>\n<td align=\"center\">以十六进制代码 nn 表示的一个字符（其中 n 为 0 ～ F）。例如，\\x41 表示”A”</td>\n</tr>\n<tr>\n<td align=\"center\">\\unnnn</td>\n<td align=\"center\">以十六进制代码 nnnn 表示的一个 Unicode 字符（其中 n 为 0 ～ F）。例如，\\u03a3 表示希腊字符 Σ</td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li><p>字符串的特点<br>ECMAScript 中的字符串是不可变的，也就是说，字符串一旦创建，它们的值就不能改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含新值的字符串填充该变量</p>\n</li>\n<li><p>转换为字符串<br>要把一个值转换为一个字符串有两种方式:</p>\n</li>\n</ol>\n<ul>\n<li>toString()方法</li>\n</ul>\n<pre><code class=\"javascript\">var age = 11\nvar ageAsString = age.toString() // 字符串&quot;11&quot;\nvar found = true\nvar foundAsString = found.toString() // 字符串&quot;true&quot;</code></pre>\n<ul>\n<li>String()方法</li>\n</ul>\n<pre><code class=\"javascript\">var value1 = 10\nvar value2 = true\nvar value3 = null\nvar value4\nalert(String(value1)) // &quot;10&quot;\nalert(String(value2)) // &quot;true&quot;\nalert(String(value3)) // &quot;null&quot;\nalert(String(value4)) // &quot;undefined&quot;</code></pre>\n<h3 id=\"1-4-6-Object-类型\"><a href=\"#1-4-6-Object-类型\" class=\"headerlink\" title=\"1.4.6 Object 类型\"></a>1.4.6 Object 类型</h3><p>胖哥，我现在可以用 js 面向对象写简单的贪吃蛇游戏，也能使用原型自己造些简单的轮子，比如 Tab 切换和轮播图等等，javascript 基础我曾过了好几遍，像闭包、对象、原型链这些都会，但是我看 vue 源码还是感觉很吃力，还有些地方甚至完全看不懂，我一直以为我的 javascript 水平已经到了差不多精通水平，现在看来离精通还是有一定距离的，我知道 javascript 是前端的基础，我也很喜欢这门语言，但我又不知道 javascript 还应该学些什么，还能学些什么，是知识储备不够还是经验不足，希望胖哥能给些建议，万分感谢</p>\n"},{"title":"CSS学习笔记","date":"2019-06-23T11:41:25.000Z","cover":true,"_content":"\n---\n\n# 课程目标:\n\n> 1. 学会使用 CSS 选择器\n> 2. 熟记 CSS 样式和外观属性\n> 3. 熟练掌握 CSS 各种选择器\n> 4. 熟练掌握 CSS 各种选择器\n> 5. 熟练掌握 CSS 三种显示模式\n> 6. 熟练掌握 CSS 背景属性\n> 7. 熟练掌握 CSS 三大特性\n> 8. 熟练掌握 CSS 盒子模型\n> 9. 熟练掌握 CSS 浮动 10.熟练掌握 CSS 定位 11.熟练掌握 CSS 高级技巧强化 CSS\n\n---\n\n# CSS 的发展历程\n\n从 HTML 被发明开始，样式就以各种形式存在。不同的浏览器结合它们各自的样式语言为用户提供页面效果的控制。最初的 HTML 只包含很少的显示属性。\n随着 HTML 的成长，为了满足页面设计者的要求，HTML 添加了很多显示功能。但是随着这些功能的增加，HTML 变的越来越杂乱，而且 HTML 页面也越来越臃肿。于是 CSS 便诞生了。\n\n# CSS 网页的美容师\n\nCSS 的出现，拯救了混乱的 HTML，当让更加拯救了我们 web 开发者。 让我们的网页更加丰富多彩。\n\nCSS 的最大贡献就是： 让 HTML 从样式中解脱苦海， 实现了 HTML 专注去做 结构呈现。 而样式交给 CSS 后，你完全可以放心的早点洗洗睡了！\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/x.jpg\" width=\"250\" />\n\n而且。。。。。 CSS 做的很出色，如果 JavaScript 是网页的魔法师，那么 CSS 它是我们网页的美容师，不信，你看:\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/baby.jpeg\" />\n\nps: 你跟 Angelababy 只差了一个妆容的距离\n\n来个更直观的认识吧：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/db.png\" />\n\n有人说， 没有不漂亮的女人，只有不会打扮的女人。\n\n我想说， 没有不好看的网页，只有不会 CSS 的前端。\n\n网页添加 CSS 和不添加 CSS 的对比：\n\n带有 CSS 的页面\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/Cc.png\" />\n\n没有 CSS 的页面\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/fff.png\" />\n\n# CSS 初识\n\nCSS(Cascading Style Sheets)\n\nCSS 通常称为 CSS 样式表或层叠样式表（级联样式表），主要用于设置 HTML 页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。\n\nCSS 以 HTML 为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。\n\n# CSS 样式规则\n\n使用 HTML 时，需要遵从一定的规范。CSS 亦如此，要想熟练地使用 CSS 对网页进行修饰，首先需要了解 CSS 样式规则，具体格式如下：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/gz.png\" />\n\n```\n在上面的样式规则中:\n\n1.选择器用于指定CSS样式作用的HTML对象，花括号内是对该对象设置的具体样式。\n2.属性和属性值以“键值对”的形式出现。\n3.属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。\n4.属性和属性值之间用英文“:”连接。\n5.多个“键值对”之间用英文“;”进行区分。\n可以用段落 和 表格的对齐的演示。\n```\n\n# CSS 字体样式属性\n\n## font-size:字号大小\n\nfont-size 属性用于设置字号，该属性的值可以使用相对长度单位，也可以使用绝对长度单位。其中，相对长度单位比较常用，推荐使用像素单位 px，绝对长度单位使用较少。具体如下：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/dd.png\" />\n\n## font-family:字体\n\nfont-family 属性用于设置字体。网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑，可以使用如下 CSS 样式代码：\n\np{ font-family:\"微软雅黑\";}\n\n可以同时指定多个字体，中间以逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体。\n\n> <img src=\"https://zclzone.gitee.io/resource/image/blog/media/good.png\" />常用技巧：\n\n```\n1. 现在网页中普遍使用14px+。\n2. 尽量使用偶数的数字字号。ie6等老式浏览器支持奇数会有bug。\n3. 各种字体之间必须使用英文状态下的逗号隔开。\n4. 中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。\n5. 如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: \"Times New Roman\";。\n6. 尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。\n```\n\n## CSS Unicode 字体\n\n在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。xp 系统不支持 类似微软雅黑的中文。\n\n方案一： 你可以使用英文来替代。 比如 font-family:\"Microsoft Yahei\"。\n\n方案二： 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。\nfont-family: \"\\5FAE\\8F6F\\96C5\\9ED1\"，表示设置字体为“微软雅黑”。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/shs.png\" />\n\n可以通过 escape() 来测试属于什么字体。\n\n| 字体名称     | 英文名称        | Unicode 编码         |\n| ------------ | --------------- | -------------------- |\n| 宋体         | SimSun          | \\5B8B\\4F53           |\n| 新宋体       | NSimSun         | \\65B0\\5B8B\\4F53      |\n| 黑体         | SimHei          | \\9ED1\\4F53           |\n| 微软雅黑     | Microsoft YaHei | \\5FAE\\8F6F\\96C5\\9ED1 |\n| 楷体\\_GB2312 | KaiTi_GB2312    | \\6977\\4F53_GB2312    |\n| 隶书         | LiSu            | \\96B6\\4E66           |\n| 幼园         | YouYuan         | \\5E7C\\5706           |\n| 华文细黑     | STXihei         | \\534E\\6587\\7EC6\\9ED1 |\n| 细明体       | MingLiU         | \\7EC6\\660E\\4F53      |\n| 新细明体     | PMingLiU        | \\65B0\\7EC6\\660E\\4F53 |\n\n为了照顾不同电脑的字体安装问题，我们尽量只使用宋体和微软雅黑中文字体\n\n## font-weight:字体粗细\n\n字体加粗除了用 b 和 strong 标签之外，可以使用 CSS 来实现，但是 CSS 是没有语义的。\n\n```html\nfont-weight属性用于定义字体的粗细，其可用属性值：normal、bold、bolder、lighter、100~900（100的整数倍）。\n```\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/good.png\" />小技巧：\n\n```css\n数字 400 等价于 normal，而 700 等价于 bold。  但是我们更喜欢用数字来表示。\n```\n\n## font-style:字体风格\n\n字体倾斜除了用 i 和 em 标签之外，可以使用 CSS 来实现，但是 CSS 是没有语义的。\n\nfont-style 属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：\n\nnormal：默认值，浏览器会显示标准的字体样式。\n\nitalic：浏览器会显示斜体的字体样式。\n\noblique：浏览器会显示倾斜的字体样式。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/good.png\" />小技巧：\n\n```\n平时我们很少给文字加斜体，反而喜欢给斜体标签（em，i）改为普通模式。\n```\n\n## font:综合设置字体样式 (重点)\n\nfont 属性用于对字体样式进行综合设置，其基本语法格式如下：\n\n```css\n选择器 {\n  font: font-style font-weight font-size/line-height font-family;\n}\n```\n\n```\n使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开。\n\n注意：其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。\n\n```\n\n# 开发者工具（chrome）\n\n此工具是我们的必备工具，以后代码出了问题，我们首先第一反应就是：\n\n“按 F12”或者是 “shift+ctrl+i” 打开 开发者工具。\n\n菜单： 右击网页空白出---查看\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/chrome.png\" />\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/good.png\" />小技巧：\n\n1. ctrl+滚轮 可以 放大开发者工具代码大小。\n2. 左边是 HTML 元素结构 右边是 CSS 样式。\n3. 右边 CSS 样式可以改动数值和颜色查看更改后效果。\n\n# 选择器（重点）\n\n要想将 CSS 样式应用于特定的 HTML 元素，首先需要找到该目标元素。在 CSS 中，执行这一任务的样式规则部分被称为选择器（选择符）。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/ax.png\" />\n\n如上图所以，要把里面的小黄人分为 2 组，最快的方法怎办？\n\n很多， 比如 一只眼睛的一组，剩下的一组\n\n这就用到基础选择器组：\n\n## 标签选择器（元素选择器）\n\n标签选择器是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。其基本语法格式如下：\n\n```\n标签名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }  或者\n元素名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n```\n\n标签选择器最大的优点是能快速为页面中同类型的标签统一样式，同时这也是他的缺点，不能设计差异化样式。\n\n课堂案例：\n\n传智简介\n\n## 类选择器\n\n类选择器使用“.”（英文点号）进行标识，后面紧跟类名，其基本语法格式如下：\n\n```\n.类名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n```\n\n```\n 标签调用的时候用 class=“类名”  即可。\n```\n\n类选择器最大的优势是可以为元素对象定义单独或相同的样式。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/good.png\" />小技巧：\n\n```\n1.长名称或词组可以使用中横线来为选择器命名。\n2.不建议使用“_”下划线来命名CSS选择器。\n```\n\n​ 输入的时候少按一个 shift 键;\n　浏览器兼容问题 (比如使用*tips 的选择器命名，在 IE6 是无效的)\n　能良好区分 JavaScript 变量命名(JS 变量命名是用“*”)\n\n```\n3.不要纯数字、中文等命名， 尽量使用英文字母来表示。\n```\n\n猜谜底游戏：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/midi.png\" width=\"450\" /> 你猜？\n\n命名规范： 见附件（Web 前端开发规范手册.doc）\n\n命名是我们通俗约定的，但是没有规定必须用这些常用的命名。\n\n课堂案例：\n\n <img src=\"https://zclzone.gitee.io/resource/image/blog/media/go.png\" />\n\n```html\n<head>\n  <meta charset=\"utf-8\" />\n  <style>\n    span {\n      font-size: 100px;\n    }\n    .blue {\n      color: blue;\n    }\n    .red {\n      color: red;\n    }\n    .orange {\n      color: orange;\n    }\n    .green {\n      color: green;\n    }\n  </style>\n</head>\n<body>\n  <span class=\"blue\">G</span>\n  <span class=\"red\">o</span>\n  <span class=\"orange\">o</span>\n  <span class=\"blue\">g</span>\n  <span class=\"green\">l</span>\n  <span class=\"red\">e</span>\n</body>\n```\n\n## 多类名选择器\n\n我们可以给标签指定多个类名，从而达到更多的选择目的。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/lei.png\" />\n\n注意：\n\n```\n1. 样式显示效果跟HTML元素中的类名先后顺序没有关系,受CSS样式书写的上下顺序有关。\n2. 各个类名中间用空格隔开。\n```\n\n多类名选择器在后期布局比较复杂的情况下，还是较多使用的。\n\n```html\n<div class=\"pink fontWeight font20\">亚瑟</div>\n<div class=\"font20\">刘备</div>\n<div class=\"font14 pink\">安其拉</div>\n<div class=\"font14\">貂蝉</div>\n```\n\n## id 选择器\n\nid 选择器使用“#”进行标识，后面紧跟 id 名，其基本语法格式如下：\n\n```\n#id名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n```\n\n该语法中，id 名即为 HTML 元素的 id 属性值，大多数 HTML 元素都可以定义 id 属性，元素的 id 值是唯一的，只能对应于文档中某一个具体的元素。\n\n用法基本和类选择器相同。\n\n## id 选择器和类选择器区别\n\nW3C 标准规定，在同一个页面内，不允许有相同名字的 id 对象出现，但是允许相同名字的 class。\n\n类选择器（class） 好比人的名字， 是可以多次重复使用的， 比如 张伟 王伟 李伟 李娜\n\nid 选择器 好比人的身份证号码， 全中国是唯一的， 不得重复。 只能使用一次。\n\n**_id 选择器和类选择器最大的不同在于 使用次数上。_**\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/zfb.jpg\" />\n\n## 通配符选择器\n\n通配符选择器用“\\*”号表示，他是所有选择器中作用范围最广的，能匹配页面中所有的元素。其基本语法格式如下：\n\n```\n* { 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n```\n\n例如下面的代码，使用通配符选择器定义 CSS 样式，清除所有 HTML 标记的默认边距。\n\n```css\n* {\n  margin: 0; /* 定义外边距*/\n  padding: 0; /* 定义内边距*/\n}\n```\n\n注意：\n\n这个通配符选择器，就像我们的电影明星中的梦中情人， 想想它就好了，但是它不会和你过日子。\n\n## 伪类选择器\n\n伪类选择器用于向某些选择器添加特殊的效果。比如给链接添加特殊效果， 比如可以选择 第 1 个，第 n 个元素。\n\n```css\n为了和我们刚才学的类选择器相区别， 类选择器是一个点 比如 .demo {\n}\n而我们的伪类 用 2个点 就是 冒号 比如 :link {\n}\n```\n\n### 链接伪类选择器\n\n- :link /_ 未访问的链接 _/\n- :visited /_ 已访问的链接 _/\n- :hover /_ 鼠标移动到链接上 _/\n- :active /_ 选定的链接 _/\n\n注意写的时候，他们的顺序尽量不要颠倒 按照 lvha 的顺序。 love hate 爱上了讨厌 记忆法 或者 lv 包包 非常 hao\n\n```css\na {\n  /* a是标签选择器  所有的链接 */\n  font-weight: 700;\n  font-size: 16px;\n  color: gray;\n}\na:hover {\n  /* :hover 是链接伪类选择器 鼠标经过 */\n  color: red; /*  鼠标经过的时候，由原来的 灰色 变成了红色 */\n}\n```\n\n### 结构(位置)伪类选择器（CSS3)\n\n- :first-child :选取属于其父元素的首个子元素的指定选择器\n- :last-child :选取属于其父元素的最后一个子元素的指定选择器\n- :nth-child(n) ： 匹配属于其父元素的第 N 个子元素，不论元素的类型\n- :nth-last-child(n) ：选择器匹配属于其元素的第 N 个子元素的每个元素，不论元素的类型，从最后一个子元素开始计数。\n  n 可以是数字、关键词或公式\n- ​\n\n```css\nli:first-child {\n  /*  选择第一个孩子 */\n  color: pink;\n}\nli:last-child {\n  /* 最后一个孩子 */\n  color: purple;\n}\nli:nth-child(4) {\n  /* 选择第4个孩子  n  代表 第几个的意思 */\n  color: skyblue;\n}\n```\n\n### 目标伪类选择器(CSS3)\n\n:target 目标伪类选择器 :选择器可用于选取当前活动的目标元素\n\n```css\n:target {\n  color: red;\n  font-size: 30px;\n}\n```\n\n# CSS 注释\n\n```\nCSS规则是使用     /*  需要注释的内容  */  进行注释的，即在需要注释的内容前使用 “/*” 标记开始注释，在内容的结尾使用 “*/”结束。\n```\n\n例如：\n\n```css\np {\n  font-size: 14px; /* 所有的字体是14像素大小*/\n}\n```\n\n# CSS 外观属性\n\n## color:文本颜色\n\ncolor 属性用于定义文本的颜色，其取值方式有如下 3 种：\n\n1.预定义的颜色值，如 red，green，blue 等。\n\n2.十六进制，如#FF0000，#FF6600，#29D794 等。实际工作中，十六进制是最常用的定义颜色的方式。\n\n3.RGB 代码，如红色可以表示为 rgb(255,0,0)或 rgb(100%,0%,0%)。\n\n需要注意的是，如果使用 RGB 代码的百分比颜色值，取值为 0 时也不能省略百分号，必须写为 0%。\n\n## line-height:行间距\n\nine-height 属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。line-height 常用的属性值单位有三种，分别为像素 px，相对值 em 和百分比%，实际工作中使用最多的是像素 px\n\n一般情况下，行距比字号大 7.8 像素左右就可以了。\n\n## text-align:水平对齐方式\n\n```\ntext-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性。其可用属性值如下：\n```\n\nleft：左对齐（默认值）\n\nright：右对齐\n\ncenter：居中对齐\n\n## text-indent:首行缩进\n\ntext-indent 属性用于设置首行文本的缩进，其属性值可为不同单位的数值、em 字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值, 建议使用 em 作为设置单位。\n\n1em 就是一个字的宽度 如果是汉字的段落， 1em 就是一个汉字的宽度\n\n## letter-spacing:字间距\n\nletter-spacing 属性用于定义字间距，所谓字间距就是字符与字符之间的空白。其属性值可为不同单位的数值，允许使用负值，默认为 normal。\n\n## word-spacing:单词间距\n\nword-spacing 属性用于定义英文单词之间的间距，对中文字符无效。和 letter-spacing 一样，其属性值可为不同单位的数值，允许使用负值，默认为 normal。\n\nword-spacing 和 letter-spacing 均可对英文进行设置。不同的是 letter-spacing 定义的为字母之间的间距，而 word-spacing 定义的为英文单词之间的间距。\n\n## 颜色半透明(css3)\n\n文字颜色到了 CSS3 我们可以采取半透明的格式了语法格式如下：\n\n```css\n    color: rgba(r,g,b,a)  a 是alpha  透明的意思  取值范围 0~1之间    color: rgba(0,0,0,0.3)\n```\n\n## 文字阴影(CSS3)\n\n以后我们可以给我们的文字添加阴影效果了 Shadow 影子\n\n```css\ntext-shadow: 水平位置 垂直位置 模糊距离 阴影颜色;\n```\n\n![1498467502625](https://zclzone.gitee.io/resource/image/blog/media/1498467502625.png)\n\n1. 前两项是必须写的。 后两项可以选写。\n\n![1498467519665](https://zclzone.gitee.io/resource/image/blog/media/1498467519665.png)\n\n# sublime 快捷方式\n\nsublime 可以快速提高我们代码的书写方式\n\n1. 生成标签 直接输入标签名 按 tab 键即可 比如 div 然后 tab 键， 就可以生成 <div></div>\n\n2. 如果想要生成多个相同标签 加上 * 就可以了 比如 div*3 就可以快速生成 3 个 div\n\n3. 如果有父子级关系的标签，可以用 > 比如 ul > li 就可以了\n\n4. 如果有兄弟关系的标签，用 + 就可以了 比如 div+p\n\n5. 如果生成带有类名或者 id 名字的， 直接写 .demo 或者 #two tab 键就可以了\n\n   ​\n\n# 引入 CSS 样式表（书写位置）\n\nCSS 可以写到那个位置？ 是不是一定写到 html 文件里面呢？\n\n## 内部样式表\n\n内嵌式是将 CSS 代码集中写在 HTML 文档的 head 头部标签中，并且用 style 标签定义，其基本语法格式如下：\n\n```html\n<head>\n  <style type=\"text/CSS\">\n    选择器 {\n      属性1: 属性值1;\n      属性2: 属性值2;\n      属性3: 属性值3;\n    }\n  </style>\n</head>\n```\n\n语法中，style 标签一般位于 head 标签中 title 标签之后，也可以把他放在 HTML 文档的任何地方。\n\ntype=\"text/CSS\" 在 html5 中可以省略， 写上也比较符合规范， 所以这个地方可以写也可以省略。\n\n## 行内式（内联样式）\n\n内联样式，又有人称行内样式、行间样式、内嵌样式。是通过标签的 style 属性来设置元素的样式，其基本语法格式如下：\n\n```html\n<标签名 style=\"属性1:属性值1; 属性2:属性值2; 属性3:属性值3;\"> 内容 </标签名>\n```\n\n语法中 style 是标签的属性，实际上任何 HTML 标签都拥有 style 属性，用来设置行内式。其中属性和值的书写规范与 CSS 样式规则相同，行内式只对其所在的标签及嵌套在其中的子标签起作用。\n\n## 外部样式表（外链式）\n\n链入式是将所有的样式放在一个或多个以.CSS 为扩展名的外部样式表文件中，通过 link 标签将外部样式表文件链接到 HTML 文档中，其基本语法格式如下：\n\n```html\n<head>\n  <link href=\"CSS文件的路径\" type=\"text/CSS\" rel=\"stylesheet\" />\n</head>\n```\n\n注意： link 是个单标签哦!!!\n\n该语法中，link 标签需要放在 head 头部标签中，并且必须指定 link 标签的三个属性，具体如下：\n\n```\nhref：定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。\ntype：定义所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。\nrel：定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。\n```\n\n## 三种样式表总结\n\n| 样式表     | 优点                     | 缺点                     | 使用情况       | 控制范围           |\n| ---------- | ------------------------ | ------------------------ | -------------- | ------------------ |\n| 行内样式表 | 书写方便，权重高         | 没有实现样式和结构相分离 | 较少           | 控制一个标签（少） |\n| 内部样式表 | 部分结构和样式相分离     | 没有彻底分离             | 较多           | 控制一个页面（中） |\n| 外部样式表 | 完全实现结构和样式相分离 | 需要引入                 | 最多，强烈推荐 | 控制整个站点（多） |\n\n# 标签显示模式（display）\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/people.png\" />\n\n非洲黑人： 皮肤内黑色素含量高，以吸收阳光中的紫外线，保护皮肤内部结构免遭损害，头发象羊毛一样卷曲，使每根卷发周围都有许多空隙，空隙充满空气，卷发有隔热作用。\n\n欧洲白人： 生活寒带或着是说常年温度较低的地缘,加上年日照时间少，身体的黑色素沉淀比较少``所以出现皮肤、发色、瞳晕都呈现浅色\n\n传智黄人： 我中间的。。。 <img src=\"https://zclzone.gitee.io/resource/image/blog/media/h.jpg\" alt=\"\" />\n\n最重要的总结： 是为了更好的适应环境而完成的自然选择。\n\n同理，我们网页的标签非常多，再不同地方会用到不同类型的标签，以便更好的完成我们的网页。\n\n标签的类型(显示模式)\n\nHTML 标签一般分为块标签和行内标签两种类型，它们也称块元素和行内元素。具体如下：\n\n## 块级元素(block-level)\n\n每个块元素通常都会独自占据一整行或多整行，可以对其设置宽度、高度、对齐等属性，常用于网页布局和网页结构的搭建。\n\n```\n常见的块元素有<h1>~<h6>、<p>、<div>、<ul>、<ol>、<li>等，其中<div>标签是最典型的块元素。\n```\n\n  <img src=\"https://zclzone.gitee.io/resource/image/blog/media/xtf.jpg\" />\n\n块级元素的特点：\n\n（1）总是从新行开始\n\n（2）高度，行高、外边距以及内边距都可以控制。\n\n（3）宽度默认是容器的 100%\n\n（4）可以容纳内联元素和其他块元素。\n\n## 行内元素(inline-level)\n\n行内元素（内联元素）不占有独立的区域，仅仅靠自身的字体大小和图像尺寸来支撑结构，一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式。\n\n```\n常见的行内元素有<a>、<strong>、<b>、<em>、<i>、<del>、<s>、<ins>、<u>、<span>等，其中<span>标签最典型的行内元素。\n```\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/wf.jpg\" /> 我一样重要\n\n行内元素的特点：\n\n（1）和相邻行内元素在一行上。\n\n（2）高、宽无效，但水平方向的 padding 和 margin 可以设置，垂直方向的无效。\n\n（3）默认宽度就是它本身内容的宽度。\n\n（4）行内元素只能容纳文本或则其他行内元素。（a 特殊）\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/w.jpg\" /> 注意：\n\n1. 只有 文字才 能组成段落 因此 p 里面不能放块级元素，同理还有这些标签 h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。\n2. 链接里面不能再放链接。\n\n## 块级元素和行内元素区别\n\n```\n块级元素的特点：\n（1）总是从新行开始\n（2）高度，行高、外边距以及内边距都可以控制。\n（3）宽度默认是容器的100%\n（4）可以容纳内联元素和其他块元素。\n```\n\n```\n行内元素的特点：\n（1）和相邻行内元素在一行上。\n（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。\n（3）默认宽度就是它本身内容的宽度。\n（4）行内元素只能容纳文本或则其他行内元素。\n```\n\n## 行内块元素（inline-block）\n\n```\n在行内元素中有几个特殊的标签——<img />、<input />、<td>，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。\n\n行内块元素的特点：\n（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。\n（2）默认宽度就是它本身内容的宽度。\n（3）高度，行高、外边距以及内边距都可以控制。\n```\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/lyc.jpg\" width=\"400\" />\n\n## 标签显示模式转换 display\n\n块转行内：display:inline;\n\n行内转块：display:block;\n\n块、行内元素转换为行内块： display: inline-block;\n\n此阶段，我们只需关心这三个，其他的是我们后面的工作。\n\n# CSS 复合选择器\n\n复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的,目的是为了可以选择更准确更精细的目标元素标签。\n\n## 交集选择器\n\n交集选择器由两个选择器构成，其中第一个为标签选择器，第二个为 class 选择器，两个选择器之间不能有空格，如 h3.special。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/jiao.png\" />\n\n**记忆技巧：**\n\n交集选择器 是 并且的意思。 即...又...的意思\n\n```\n比如：   p.one   选择的是： 类名为 .one  的 段落标签。\n```\n\n用的相对来说比较少，不太建议使用。\n\n## 并集选择器\n\n并集选择器（CSS 选择器分组）是各个选择器通过<strong style=\"color:#f00\">逗号</strong>连接而成的，任何形式的选择器（包括标签选择器、class 类选择器 id 选择器等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，或部分相同，就可以利用并集选择器为它们定义相同的 CSS 样式。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/bing.png\" />\n\n记忆技巧：\n\n并集选择器 和 的意思， 就是说，只要逗号隔开的，所有选择器都会执行后面样式。\n\n```\n比如  .one, p , #test {color: #F00;}  表示   .one 和 p  和 #test 这三个选择器都会执行颜色为红色。  通常用于集体声明。\n```\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/hu.gif\" /> 他和他，在一起， 在一起 一起的意思\n\n## 后代选择器\n\n后代选择器又称为包含选择器，用来选择元素或元素组的后代，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/hou.png\" />\n\n子孙后代都可以这么选择。 或者说，它能选择任何包含在内 的标签。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/li.png\" />\n\n## 子元素选择器\n\n子元素选择器只能选择作为某元素子元素的元素。其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 &gt; 进行连接，注意，符号左右两侧各保留一个空格。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/zi1.png\" />\n\n白话： 这里的子 指的是 亲儿子 不包含孙子 重孙子之类。\n\n```\n 比如：  .demo > h3 {color: red;}   说明  h3 一定是demo 亲儿子。  demo 元素包含着h3。\n```\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/san.jpg\" />\n\n## 测试题\n\n```html\n<div class=\"nav\">\n  <!-- 主导航栏 -->\n  <ul>\n    <li><a href=\"#\">公司首页</a></li>\n    <li><a href=\"#\">公司简介</a></li>\n    <li><a href=\"#\">公司产品</a></li>\n    <li>\n      <a href=\"#\">联系我们</a>\n      <ul>\n        <li><a href=\"#\">公司邮箱</a></li>\n        <li><a href=\"#\">公司电话</a></li>\n      </ul>\n    </li>\n  </ul>\n</div>\n<div class=\"sitenav\">\n  <!-- 侧导航栏 -->\n  <div class=\"site-l\">左侧侧导航栏</div>\n  <div class=\"site-r\"><a href=\"#\">登录</a></div>\n</div>\n```\n\n在不修改以上代码的前提下，完成以下任务：\n\n1. 链接 登录 的颜色为红色,同时主导航栏里面的所有的链接改为蓝色 (简单)\n\n2. 主导航栏和侧导航栏里面文字都是 14 像素并且是微软雅黑。（中等)\n\n3. 主导航栏里面的一级菜单链接文字颜色为绿色。（难)\n\n   ​\n\n## 属性选择器\n\n选取标签带有某些特殊属性的选择器 我们成为属性选择器\n\n```css\n/* 获取到 拥有 该属性的元素 */\ndiv[class^='font'] {\n  /*  class^=font 表示 font 开始位置就行了 */\n  color: pink;\n}\ndiv[class$='footer'] {\n  /*  class$=footer 表示 footer 结束位置就行了 */\n  color: skyblue;\n}\ndiv[class*='tao'] {\n  /* class*=tao  *=  表示tao 在任意位置都可以 */\n  color: green;\n}\n```\n\n```html\n<div class=\"font12\">属性选择器</div>\n<div class=\"font12\">属性选择器</div>\n<div class=\"font24\">属性选择器</div>\n<div class=\"font24\">属性选择器</div>\n<div class=\"font24\">属性选择器</div>\n<div class=\"24font\">属性选择器123</div>\n<div class=\"sub-footer\">属性选择器footer</div>\n<div class=\"jd-footer\">属性选择器footer</div>\n<div class=\"news-tao-nav\">属性选择器</div>\n<div class=\"news-tao-header\">属性选择器</div>\n<div class=\"tao-header\">属性选择器</div>\n```\n\n## 伪元素选择器（CSS3)\n\n1. E::first-letter 文本的第一个单词或字（如中文、日文、韩文等）\n2. E::first-line 文本第一行；\n3. E::selection 可改变选中文本的样式；\n\n```css\np::first-letter {\n  font-size: 20px;\n  color: hotpink;\n}\n\n/* 首行特殊样式 */\np::first-line {\n  color: skyblue;\n}\n\np::selection {\n  /* font-size: 50px; */\n  color: orange;\n}\n```\n\n4、E::before 和 E::after\n\n在 E 元素内部的开始位置和结束位创建一个元素，该元素为行内元素，且必须要结合 content 属性使用。\n\n```css\ndiv::befor {\n  content: '开始';\n}\ndiv::after {\n  content: '结束';\n}\n```\n\nE:after、E:before 在旧版本里是伪元素，CSS3 的规范里“:”用来表示伪类，“::”用来表示伪元素，但是在高版本浏览器下 E:after、E:before 会被自动识别为 E::after、E::before，这样做的目的是用来做兼容处理。\n\nE:after、E:before 后面的练习中会反复用到，目前只需要有个大致了解\n\n\":\" 与 \"::\" 区别在于区分伪类和伪元素\n\n# CSS 书写规范\n\n开始就形成良好的书写规范，是你专业化的开始。\n\n## 空格规范\n\n【强制】 选择器 与 { 之间必须包含空格。\n\n示例： .selector { }\n\n【强制】 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。\n\n示例：\n\nfont-size: 12px;\n\n## 选择器规范\n\n【强制】 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。\n\n示例：\n\n```\n/* good */\n.post,\n.page,\n.comment {\n    line-height: 1.5;\n}\n\n\n/* bad */\n.post, .page, .comment {\n    line-height: 1.5;\n}\n```\n\n【建议】 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。\n\n示例：\n\n```\n/* good */\n#username input {}\n.comment .avatar {}\n\n/* bad */\n.page .header .login #username input {}\n.comment div * {}\n```\n\n## 属性规范\n\n【强制】 属性定义必须另起一行。\n\n示例：\n\n```\n/* good */\n.selector {\n    margin: 0;\n    padding: 0;\n}\n\n/* bad */\n.selector { margin: 0; padding: 0; }\n```\n\n【强制】 属性定义后必须以分号结尾。\n\n示例：\n\n```\n/* good */\n.selector {\n    margin: 0;\n}\n\n/* bad */\n.selector {\n    margin: 0\n}\n```\n\n# CSS 背景(background)\n\nCSS 可以添加背景颜色和背景图片，以及来进行图片设置。\n\n| background-color                                            | 背景颜色         |\n| ----------------------------------------------------------- | ---------------- |\n| background-image                                            | 背景图片地址     |\n| background-repeat                                           | 是否平铺         |\n| background-position                                         | 背景位置         |\n| background-attachment                                       | 背景固定还是滚动 |\n| 背景的合写（复合属性）                                      |                  |\n| background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置 |                  |\n\n## 背景图片(image)\n\n语法：\n\n```css\nbackground-image: none | url (url);\n```\n\n参数：\n\nnone : 　无背景图（默认的）\nurl : 　使用绝对或相对地址指定背景图像\n\nbackground-image 属性允许指定一个图片展示在背景中（只有 CSS3 才可以多背景）可以和 background-color 连用。 如果图片不重复地话，图片覆盖不到地地方都会被背景色填充。 如果有背景图片平铺，则会覆盖背景颜色。\n\n小技巧： 我们提倡 背景图片后面的地址，url 不要加引号。\n\n## 背景平铺（repeat）\n\n语法：\n\n```css\nbackground-repeat: repeat | no-repeat | repeat-x | repeat-y;\n```\n\n参数：\n\nrepeat : 　背景图像在纵向和横向上平铺（默认的）\n\nno-repeat : 　背景图像不平铺\n\nrepeat-x : 　背景图像在横向上平铺\n\nrepeat-y : 　背景图像在纵向平铺\n\n设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。\n\nrepeat-x : 　背景图像在横向上平铺\n\nrepeat-y : 　背景图像在纵向平铺\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/y.png\" width=\"600\"/>\n\n设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/q.png\" width=\"600\"/>\n\n## 背景位置(position)\n\n语法：\n\n```css\nbackground-position : length || length\n\nbackground-position : position || position\n```\n\n参数：\n\nlength : 　百分数 | 由浮点数字和单位标识符组成的长度值。请参阅长度单位\nposition : 　 top | center | bottom | left | center | right\n\n说明：\n\n设置或检索对象的背景图像位置。必须先指定 background-image 属性。默认值为：(0% 0%)。\n如果只指定了一个值，该值将用于横坐标。纵坐标将默认为 50%。第二个值将用于纵坐标。\n\n注意：\n\n1. position 后面是 x 坐标和 y 坐标。 可以使用方位名词或者 精确单位。\n2. 如果和精确单位和方位名字混合使用，则必须是 x 坐标在前，y 坐标后面。比如 background-position: 15px top; 则 15px 一定是 x 坐标 top 是 y 坐标。\n\n实际工作用的最多的，就是背景图片居中对齐了。\n\n## 背景附着\n\n语法：\n\n```css\nbackground-attachment: scroll | fixed;\n```\n\n参数：\n\nscroll : 　背景图像是随对象内容滚动\nfixed : 　背景图像固定\n\n说明：\n\n设置或检索背景图像是随对象内容滚动还是固定的。\n\n## 背景简写\n\nbackground 属性的值的书写顺序官方并没有强制标准的。为了可读性，建议大家如下写：\n\nbackground:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置\n\n```css\nbackground: transparent url(image.jpg) repeat-y scroll 50% 0;\n```\n\n## 背景透明(CSS3)\n\nCSS3 支持背景半透明的写法语法格式是:\n\n```css\nbackground: rgba(0, 0, 0, 0.3);\n```\n\n最后一个参数是 alpha 透明度 取值范围 0~1 之间\n\n注意： 背景半透明是指盒子背景半透明， 盒子里面的内容不收影响。\n\n## 背景缩放(CSS3)\n\n通过 background-size 设置背景图片的尺寸，就像我们设置 img 的尺寸一样，在移动 Web 开发中做屏幕适配应用非常广泛。\n\n其参数设置如下：\n\na) 可以设置长度单位(px)或百分比（设置百分比时，参照盒子的宽高）\n\nb) 设置为 cover 时，会自动调整缩放比例，保证图片始终填充满背景区域，如有溢出部分则会被隐藏。我们平时用的 cover 最多\n\nc) 设置为 contain 会自动调整缩放比例，保证图片始终完整显示在背景区域。\n\n```css\nbackground-image: url('images/gyt.jpg');\nbackground-size: 300px 100px;\n/* background-size: contain; */\n/* background-size: cover; */\n```\n\n## 多背景(CSS3)\n\n以逗号分隔可以设置多背景，可用于自适应布局 做法就是 用逗号隔开就好了。\n\n- 一个元素可以设置多重背景图像。\n- 每组属性间使用逗号分隔。\n- 如果设置的多重背景图之间存在着交集（即存在着重叠关系），前面的背景图会覆盖在后面的背景图之上。\n- 为了避免背景色将图像盖住，背景色通常都定义在最后一组上，\n\n```css\nbackground: url(test1.jpg) no-repeat scroll 10px 20px/50px 60px, url(test1.jpg)\n    no-repeat scroll 10px 20px/70px 90px,\n  url(test1.jpg) no-repeat scroll 10px 20px/110px 130px c #aaa;\n```\n\n- ​\n\n## 凹凸文字\n\n```css\n<head>\n        <meta charset=\"utf-8\">\n        <style>\n        body {\n        \tbackground-color: #ccc;\n        }\n\t\tdiv {\n\t\t\tcolor: #ccc;\n\t\t\tfont: 700 80px \"微软雅黑\";\n\t\t}\n\t\tdiv:first-child {\n\t\t\t/* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */\n\t\t\ttext-shadow: 1px 1px 1px #000, -1px -1px 1px #fff;\n\t\t}\n\t\tdiv:last-child {\n\t\t\t/* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */\n\t\t\ttext-shadow: -1px -1px 1px #000, 1px 1px 1px #fff;\n\t\t}\n\n        </style>\n    </head>\n    <body>\n    <div>我是凸起的文字</div>\n    <div>我是凹下的文字</div>\n    </body>\n```\n\n![1498467533412](https://zclzone.gitee.io/resource/image/blog/media/1498467533412.png)\n\n## 导航栏案例\n\n### 文本的装饰\n\ntext-decoration 通常我们用于给链接修改装饰效果\n\n| 值           | 描述                                          |\n| ------------ | --------------------------------------------- |\n| none         | 默认。定义标准的文本。                        |\n| underline    | 定义文本下的一条线。下划线 也是我们链接自带的 |\n| overline     | 定义文本上的一条线。                          |\n| line-through | 定义穿过文本下的一条线。                      |\n|              |                                               |\n|              |                                               |\n\n**使用技巧**：在一行内的盒子内，我们设定行高等于盒子的高度，就可以使文字垂直居中。\n\n```html\n<head>\n  <meta charset=\"utf-8\" />\n  <style>\n    body {\n      background-color: #000;\n    }\n    a {\n      width: 200px;\n      height: 50px;\n      /* background-color: orange; */\n      display: inline-block; /* 把a 行内元素转换为行内块元素 */\n      text-align: center; /* 文字水平居中 */\n      line-height: 50px; /* 我们设定行高等于盒子的高度，就可以使文字垂直居中 */\n      color: #fff;\n      font-size: 22px;\n      text-decoration: none; /* 取消下划线 文本装饰 */\n    }\n    a:hover {\n      /* 鼠标经过 给我们的链接添加背景图片*/\n      background: url(images/h.png) no-repeat;\n    }\n  </style>\n</head>\n<body>\n  <a href=\"#\">专区说明</a>\n  <a href=\"#\">申请资格</a>\n  <a href=\"#\">兑换奖励</a>\n  <a href=\"#\">下载游戏</a>\n</body>\n```\n\n# CSS 三大特性\n\n层叠 继承 优先级 是我们学习 CSS 必须掌握的三个特性。\n\n## CSS 层叠性\n\n所谓层叠性是指多种 CSS 样式的叠加。\n\n是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉\n\n比如先给某个标签指定了内部文字颜色为红色，接着又指定了颜色为蓝色，此时出现一个标签指定了相同样式不同值的情况，这就是样式冲突。\n\n一般情况下，如果出现样式冲突，则会按照 CSS 书写的顺序，以最后的样式为准。\n\n1. 样式冲突，遵循的原则是就近原则。 那个样式离着结构近，就执行那个样式。\n2. 样式不冲突，不会层叠\n\n```\nCSS最后的执行口诀：  长江后浪推前浪，前浪死在沙滩上。\n```\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/hai.gif\"  width=\"600\" height=\"400\" />\n\n## CSS 继承性\n\n所谓继承性是指书写 CSS 样式表时，子标签会继承父标签的某些样式，如文本颜色和字号。想要设置一个可继承的属性，只需将它应用于父元素即可。\n\n简单的理解就是： 子承父业。\n\n```\nCSS最后的执行口诀：  龙生龙，凤生凤，老鼠生的孩子会打洞。\n```\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/shu.gif\" />\n\n注意：\n\n```\n恰当地使用继承可以简化代码，降低CSS样式的复杂性。子元素可以继承父元素的样式（text-，font-，line-这些元素开头的都可以继承，以及color属性）\n```\n\n## CSS 优先级\n\n定义 CSS 样式时，经常出现两个或更多规则应用在同一元素上，这时就会出现优先级的问题。\n\n在考虑权重时，初学者还需要注意一些特殊的情况，具体如下：\n\n```\n继承样式的权重为0。即在嵌套结构中，不管父元素样式的权重多大，被子元素继承时，他的权重都为0，也就是说子元素定义的样式会覆盖继承来的样式。\n\n行内样式优先。应用style属性的元素，其行内样式的权重非常高，可以理解为远大于100。总之，他拥有比上面提高的选择器都大的优先级。\n\n权重相同时，CSS遵循就近原则。也就是说靠近元素的样式具有最大的优先级，或者说排在最后的样式优先级最大。\n\nCSS定义了一个!important命令，该命令被赋予最大的优先级。也就是说不管权重如何以及样式位置的远近，!important都具有最大优先级。\n```\n\n### CSS 特殊性（Specificity）\n\n关于 CSS 权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity，我们称为 CSS 特性或称非凡性，它是一个衡量 CSS 值优先级的一个标准 具体规范入如下：\n\nspecificity 用一个四位的数 字串(CSS2 是三位)来表示，更像四个级别，值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。\n\n| 继承或者\\* 的贡献值      | 0,0,0,0  |\n| ------------------------ | -------- |\n| 每个元素（标签）贡献值为 | 0,0,0,1  |\n| 每个类，伪类贡献值为     | 0,0,1,0  |\n| 每个 ID 贡献值为         | 0,1,0,0  |\n| 每个行内样式贡献值       | 1,0,0,0  |\n| 每个!important 贡献值    | ∞ 无穷大 |\n\n权重是可以叠加的\n\n比如的例子：\n\n```\ndiv ul  li   ------>      0,0,0,3\n\n.nav ul li   ------>      0,0,1,2\n\na:hover      -----—>      0,0,1,1\n\n.nav a       ------>      0,0,1,1\n\n#nav p       ----->       0,1,0,1\n```\n\n​\n\n​\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/w.jpg\" /> 注意：\n\n1.数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 =0,0,0,10 而不是 0,0, 1, 0， 所以不会存在 10 个 div 能赶上一个类选择器的情况。\n\n2. 继承的 权重是 0\n\n总结优先级：\n\n1. 使用了 !important 声明的规则。\n2. 内嵌在 HTML 元素的 style 属性里面的声明。\n3. 使用了 ID 选择器的规则。\n4. 使用了类选择器、属性选择器、伪元素和伪类选择器的规则。\n5. 使用了元素选择器的规则。\n6. 只包含一个通用选择器的规则。\n7. 同一类选择器则遵循就近原则。\n\n```\n总结：权重是优先级的算法，层叠是优先级的表现\n```\n\n# 盒子模型（CSS 重点）\n\n其实，CSS 就三个大模块： 盒子模型 、 浮动 、 定位，其余的都是细节。要求这三部分，无论如何也要学的非常精通。\n\n所谓盒子模型就是把 HTML 页面中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。每个矩形都由元素的内容、内边距（padding）、边框（border）和外边距（margin）组成。\n\n## 看透网页布局的本质\n\n网页布局中，我们是如何把里面的文字，图片，按照美工给我们的效果图排列的整齐有序呢？\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/t.png\" />\n\n牛奶是怎样运输，让消费者购买的呢？\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/m.jpg\" />\n\n我们说过，行内元素比如 文字 类似牛奶，也需要一个盒子把他们装起来，我们前面学过的双标签都是一个盒子。有了盒子，我们就可以随意的，自由的，摆放位置了。\n\n看透网页布局的本质： 把网页元素比如文字图片等等，放入盒子里面，然后利用 CSS 摆放盒子的过程，就是网页布局。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/t1.png\" />\n\nCSS 其实没有太多逻辑可言 ， 类似我们小时候玩的积木,我们可以自由的，随意的摆放出我们想要的效果。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/j.jpg\" width=\"300\" />\n\n## 盒子模型（Box Model）\n\n这里略过 老旧的 ie 盒子模型（IE6 以下），对不起，我都没见过 IE5 的浏览器。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/d.jpg\" />\n\n。首先，我们来看一张图，来体会下什么是盒子模型。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/box.png\"  width=\"700\" />\n\n所有的文档元素（标签）都会生成一个矩形框，我们成为元素框（element box），它描述了一个文档元素再网页布局汇总所占的位置大小。因此，<strong style=\"color: #f00;\">每个盒子除了有自己大小和位置外，还影响着其他盒子的大小和位置。</strong>\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/boxs.png\"  width=\"700\" />\n\n## 盒子边框（border）\n\n边框就是那层皮。 橘子皮。。柚子皮。。橙子皮。。。\n\n语法：\n\n```css\nborder: border-width || border-style || border-color;\n```\n\n边框属性—设置边框样式（border-style）\n\n边框样式用于定义页面中边框的风格，常用属性值如下：\n\n```\nnone：没有边框即忽略所有边框的宽度（默认值）\n\nsolid：边框为单实线(最为常用的)\n\ndashed：边框为虚线\n\ndotted：边框为点线\n\ndouble：边框为双实线\n```\n\n### 盒子边框写法总结表\n\n|              |                                                                                                            |                                                                        |\n| ------------ | ---------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------- |\n| 设置内容     | 样式属性                                                                                                   | 常用属性值                                                             |\n| 上边框       | border-top-style:样式; border-top-width:宽度;border-top-color:颜色;border-top:宽度 样式 颜色;              |                                                                        |\n| 下边框       | border-bottom-style:样式;border- bottom-width:宽度;border- bottom-color:颜色;border-bottom:宽度 样式 颜色; |                                                                        |\n| 左边框       | border-left-style:样式; border-left-width:宽度;border-left-color:颜色;border-left:宽度 样式 颜色;          |                                                                        |\n| 右边框       | border-right-style:样式;border-right-width:宽度;border-right-color:颜色;border-right:宽度 样式 颜色;       |                                                                        |\n| 样式综合设置 | border-style:上边 [右边 下边 左边];                                                                        | none 无（默认）、solid 单实线、dashed 虚线、dotted 点线、double 双实线 |\n| 宽度综合设置 | border-width:上边 [右边 下边 左边];                                                                        | 像素值                                                                 |\n| 颜色综合设置 | border-color:上边 [右边 下边 左边];                                                                        | 颜色值、#十六进制、rgb(r,g,b)、rgb(r%,g%,b%)                           |\n| 边框综合设置 | border:四边宽度 四边样式 四边颜色;                                                                         |                                                                        |\n\n### 表格的细线边框\n\n以前学过的 html 表格边框很粗，这里只需要 CSS 一句话就可以美观起来。 让我们真的相信，CSS 就是我们的白马王子（白雪公主）。\n\ntable{ border-collapse:collapse; } collapse 单词是合并的意思\n\nborder-collapse:collapse; 表示边框合并在一起。\n\n### 圆角边框(CSS3)\n\n从此以后，我们的世界不只有矩形。radius 半径（距离）\n\n语法格式：\n\n```css\nborder-radius: 左上角 右上角 右下角 左下角;\n```\n\n课堂案例:\n\n```html\n<style>\n  div {\n    width: 200px;\n    height: 200px;\n    border: 1px solid red;\n  }\n  div:first-child {\n    /* 结构伪类选择器 选亲兄弟 */\n    border-radius: 10px; /*  一个数值表示4个角都是相同的 10px 的弧度 */\n  }\n\n  div:nth-child(2) {\n    /*border-radius: 100px;    取宽度和高度 一半  则会变成一个圆形 */\n    border-radius: 50%; /*  100px   50% 取宽度和高度 一半  则会变成一个圆形 */\n  }\n\n  div:nth-child(3) {\n    border-radius: 10px 40px; /* 左上角  和 右下角  是 10px  右上角 左下角 40 对角线 */\n  }\n\n  div:nth-child(4) {\n    border-radius: 10px 40px 80px; /* 左上角 10    右上角  左下角 40   右下角80 */\n  }\n  div:nth-child(5) {\n    border-radius: 10px 40px 80px 100px; /* 左上角 10    右上角 40  右下角 80   左下角   右下角100 */\n  }\n  div:nth-child(6) {\n    border-radius: 100px;\n    height: 100px;\n  }\n  div:nth-child(7) {\n    border-radius: 100px 0;\n  }\n</style>\n```\n\n## 内边距（padding）\n\npadding 属性用于设置内边距。 是指 边框与内容之间的距离。\n\npadding-top:上内边距\n\npadding-right:右内边距\n\npadding-bottom:下内边距\n\npadding-left:左内边距\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/w.jpg\"/>注意： 后面跟几个数值表示的意思是不一样的。\n\n| 值的个数 | 表达意思                                                                                                                  |\n| -------- | ------------------------------------------------------------------------------------------------------------------------- |\n| 1 个值   | padding：上下左右边距 比如 padding: 3px; 表示上下左右都是 3 像素                                                          |\n| 2 个值   | padding: 上下边距 左右边距 比如 padding: 3px 5px; 表示 上下 3 像素 左右 5 像素                                            |\n| 3 个值   | padding：上边距 左右边距 下边距 比如 padding: 3px 5px 10px; 表示 上是 3 像素 左右是 5 像素 下是 10 像素                   |\n| 4 个值   | padding:上内边距 右内边距 下内边距 左内边距 比如: padding: 3px 5px 10px 15px; 表示 上 3px 右是 5px 下 10px 左 15px 顺时针 |\n\n课堂案例： 新浪导航\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/al.gif\" />\n\n## 外边距（margin）\n\nmargin 属性用于设置外边距。 设置外边距会在元素之间创建“空白”， 这段空白通常不能放置其他内容。\n\nmargin-top:上外边距\n\nmargin-right:右外边距\n\nmargin-bottom:下外边距\n\nmargin-left:上外边距\n\nmargin:上外边距 右外边距 下外边距 左外边\n\n取值顺序跟内边距相同。\n\n### 外边距实现盒子居中\n\n可以让一个盒子实现水平居中，需要满足一下两个条件：\n\n1. 必须是块级元素。\n2. 盒子必须指定了宽度（width）\n\n然后就给**左右的外边距都设置为 auto**，就可使块级元素水平居中。\n\n实际工作中常用这种方式进行网页布局，示例代码如下：\n\n```css\n.header {\n  width: 960px;\n  margin: 0 auto;\n}\n```\n\n### 文字盒子居中图片和背景区别\n\n1.  文字水平居中是 text-align: center\n2.  盒子水平居中 左右 margin 改为 auto\n\n```css\ntext-align: center; /*  文字居中水平 */\nmargin: 10px auto; /* 盒子水平居中  左右margin 改为 auto 就阔以了 */\n```\n\n3. 插入图片 我们用的最多 比如产品展示类\n4. 背景图片我们一般用于小图标背景 或者 超大背景图片\n\n```css\nsection img {\n  width: 200px; /* 插入图片更改大小 width 和 height */\n  height: 210px;\n  margin-top: 30px; /* 插入图片更改位置 可以用margin 或padding  盒模型 */\n  margin-left: 50px; /* 插入当图片也是一个盒子 */\n}\n\naside {\n  width: 400px;\n  height: 400px;\n  border: 1px solid purple;\n  background: #fff url(images/sun.jpg) no-repeat;\n\n  background-size: 200px 210px; /*  背景图片更改大小只能用 background-size */\n  background-position: 30px 50px; /* 背景图片更该位置 我用 background-position */\n}\n```\n\n### 清除元素的默认内外边距\n\n为了更方便地控制网页中的元素，制作网页时，可使用如下代码清除元素的默认内外边距：\n\n```css\n* {\n  padding: 0; /* 清除内边距 */\n  margin: 0; /* 清除外边距 */\n}\n```\n\n注意： 行内元素是只有左右外边距的，是没有上下外边距的。 内边距，在 ie6 等低版本浏览器也会有问题。\n\n我们尽量不要给行内元素指定上下的内外边距就好了。\n\n## 外边距合并\n\n使用 margin 定义块元素的垂直外边距时，可能会出现外边距的合并。\n\n### 相邻块元素垂直外边距的合并\n\n当上下相邻的两个块元素相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/www.png\" />\n\n解决方案： 避免就好了。\n\n### 嵌套块元素垂直外边距的合并\n\n对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的较大者，即使父元素的上外边距为 0，也会发生合并。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/n.png\" />\n\n解决方案：\n\n1. 可以为父元素定义 1 像素的上边框或上内边距。\n2. 可以为父元素添加 overflow:hidden。\n\n待续。。。。\n\n## content 宽度和高度\n\n使用宽度属性 width 和高度属性 height 可以对盒子的大小进行控制。\n\nwidth 和 height 的属性值可以为不同单位的数值或相对于父元素的百分比%，实际工作中最常用的是像素值。\n\n大多数浏览器，如 Firefox、IE6 及以上版本都采用了 W3C 规范，符合 CSS 规范的盒子模型的总宽度和总高度的计算原则是：\n\n```\n  /*外盒尺寸计算（元素空间尺寸）*/\n  Element空间高度 = content height + padding + border + margin\n  Element 空间宽度 = content width + padding + border + margin\n  /*内盒尺寸计算（元素实际大小）*/\n  Element Height = content height + padding + border （Height为内容高度）\n  Element Width = content width + padding + border （Width为内容宽度）\n```\n\n注意：\n\n1、宽度属性 width 和高度属性 height 仅适用于块级元素，对行内元素无效（ img 标签和 input 除外）。\n\n2、计算盒子模型的总高度时，还应考虑上下两个盒子垂直外边距合并的情况。\n\n3、**如果一个盒子没有给定宽度/高度或者继承父亲的宽度/高度，则 padding 不会影响本盒子大小**。\n\n## 盒子模型布局稳定性\n\n开始学习盒子模型，同学们最大的困惑就是， 分不清内外边距的使用，什么情况下使用内边距，什么情况下使用外边距？\n\n答案是： 其实他们大部分情况下是可以混用的。 就是说，你用内边距也可以，用外边距也可以。 你觉得哪个方便，就用哪个。\n\n但是，总有一个最好用的吧，我们根据稳定性来分，建议如下：\n\n按照 优先使用 宽度 （width） 其次 使用内边距（padding） 再次 外边距（margin）。\n\n```\n  width >  padding  >   margin\n```\n\n原因：\n\n1. margin 会有外边距合并 还有 ie6 下面 margin 加倍的 bug（讨厌）所以最后使用。\n\n2. padding 会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。\n\n3. width 没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。\n\n   ​\n\n## CSS3 盒模型\n\nCSS3 中可以通过 box-sizing 来指定盒模型，即可指定为 content-box、border-box，这样我们计算盒子大小的方式就发生了改变。\n\n可以分成两种情况：\n\n1、box-sizing: content-box 盒子大小为 width + padding + border content-box:此值为其默认值，其让元素维持 W3C 的标准 Box Mode\n\n2、box-sizing: border-box 盒子大小为 width 就是说 padding 和 border 是包含到 width 里面的\n\n注：上面的标注的 width 指的是 CSS 属性里设置的 width: length，content 的值是会自动调整的。\n\n```css\ndiv:first-child {\n  width: 200px;\n  height: 200px;\n  background-color: pink;\n  box-sizing: content-box; /*  就是以前的标准盒模型  w3c */\n  padding: 10px;\n  border: 15px solid red;\n  /* 盒子大小为 width + padding + border   content-box:此值为其默认值，其让元素维持W3C的标准Box Mode */\n}\ndiv:last-child {\n  width: 200px;\n  height: 200px;\n  background-color: purple;\n  padding: 10px;\n  box-sizing: border-box; /* padding border  不撑开盒子 */\n  border: 15px solid red;\n  /* margin: 10px; */\n  /* 盒子大小为 width    就是说  padding 和 border 是包含到width里面的 */\n}\n```\n\n## 盒子阴影\n\n语法格式：\n\n```css\nbox-shadow: 水平阴影 垂直阴影 模糊距离 阴影尺寸 阴影颜色 内/外阴影；;\n```\n\n![1498467567011](https://zclzone.gitee.io/resource/image/blog/media/1498467567011.png)\n\n1. 前两个属性是必须写的。其余的可以省略。\n2. 外阴影 (outset) 但是不能写 默认 想要内阴影 inset\n\n```css\ndiv {\n  width: 200px;\n  height: 200px;\n  border: 10px solid red;\n  /* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */\n  /* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影； */\n  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.4);\n}\n```\n\n# 浮动(float)\n\n## 普通流(normal flow)\n\n这个单词很多人翻译为 文档流 ， 字面翻译 普通流 或者标准流都可以。\n\n前面我们说过，网页布局的核心，就是用 CSS 来摆放盒子位置。如何把盒子摆放到合适的位置？\n\nCSS 的定位机制有 3 种：普通流（标准流）、浮动和定位。\n\nhtml 语言当中另外一个相当重要的概念----------标准流！或者普通流。普通流实际上就是一个网页内标签元素正常从上到下，从左到右排列顺序的意思，比如块级元素会独占一行，行内元素会按顺序依次前后排列；按照这种大前提的布局排列之下绝对不会出现例外的情况叫做普通流布局。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/t.jpg\" />\n\n## 浮动(float)\n\n浮动最早是用来控制图片，以便达到其他元素（特别是文字）实现“环绕”图片的效果。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/l.png\" style=\"width: 600px; border: 2px solid #000;\"/>\n\n后来，我们发现浮动有个很有意思的事情：就是让任何盒子可以一行排列,因此我们就慢慢的偏离主题，用浮动的特性来布局了。（CSS3 已经我们真正意义上的网页布局，具体 CSS3 我们会详细解释）\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/d.png\" />\n\n## 什么是浮动？\n\n元素的浮动是指设置了浮动属性的元素会脱离标准普通流的控制，移动到其父元素中指定位置的过程。\n\n在 CSS 中，通过 float 属性来定义浮动，其基本语法格式如下：\n\n```\n选择器{float:属性值;}\n```\n\n| 属性值 | 描述                 |\n| ------ | -------------------- |\n| left   | 元素向左浮动         |\n| right  | 元素向右浮动         |\n| none   | 元素不浮动（默认值） |\n\n## 浮动详细内幕特性\n\n浮动脱离标准流，不占位置，会影响标准流。浮动只有左右浮动。\n\n```\n浮动首先创建包含块的概念（包裹）。就是说， 浮动的元素总是找理它最近的父级元素对齐。但是不会超出内边距的范围。\n```\n\n   <img src=\"https://zclzone.gitee.io/resource/image/blog/media/one.jpg\" width=\"500\" />\n\n```\n浮动的元素排列位置，跟上一个元素（块级）有关系。如果上一个元素有浮动，则A元素顶部会和上一个元素的顶部对齐；如果上一个元素是标准流，则A元素的顶部会和上一个元素的底部对齐。\n```\n\n  <img src=\"https://zclzone.gitee.io/resource/image/blog/media/two.jpg\" width=\"400\" />\n\n```\n由2可以推断出，一个父盒子里面的子盒子，如果其中一个子级有浮动的，则其他子级都需要浮动。这样才能一行对齐显示。\n```\n\n```\n元素添加浮动后，元素会具有行内块元素的特性。元素的大小完全取决于定义的大小或者默认的内容多少浮动根据元素书写的位置来显示相应的浮动。\n```\n\n总结： 浮动 --->\n\n浮动的目的就是为了让多个块级元素同一行上显示。\n\nfloat 浮 漏 特\n\n浮： 加了浮动的元素盒子是浮起来的，漂浮在其他的标准流盒子上面。\n漏： 加了浮动的盒子，不占位置的，它浮起来了，它原来的位置漏 给了标准流的盒子。\n特： 特别注意，首先浮动的盒子需要和标准流的父级搭配使用， 其次 特别的注意浮动可以使元素显示模式体现为行内块特性。\n\n# 版心和布局流程\n\n阅读报纸时容易发现，虽然报纸中的内容很多，但是经过合理地排版，版面依然清晰、易读。同样，在制作网页时，要想使页面结构清晰、有条理，也需要对网页进行“排版”。\n\n“版心”(可视区) 是指网页中主体内容所在的区域。一般在浏览器窗口中水平居中显示，常见的宽度值为 960px、980px、1000px、1200px 等。\n\n## 布局流程\n\n为了提高网页制作的效率，布局时通常需要遵守一定的布局流程，具体如下：\n\n1、确定页面的版心（可视区）。\n\n2、分析页面中的行模块，以及每个行模块中的列模块。\n\n3、制作 HTML 结构 。\n\n4、CSS 初始化，然后开始运用盒子模型的原理，通过 DIV+CSS 布局来控制网页的各个模块。\n\n## 一列固定宽度且居中\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/yl.jpg\" width=\"400\" />\n\n最普通的，最为常用的结构\n\n## 两列左窄右宽型\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/ll.jpg\" width=\"400\" />\n\n比如小米 <a href=\"http://www.mi.com\" target=\"_blank\"> 小米官网 </a>\n\n## 通栏平均分布型\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/tl.jpg\" width=\"600\" />\n\n比如锤子 <a href=\"http://www.smartisan.com/\" target=\"_blank\"> 锤子官网 </a>\n\n# 清除浮动\n\n人生就像乘坐北京地铁一号线：\n\n途经国贸，羡慕繁华；\n\n途经天安门，幻想权力；\n\n途经金融街，梦想发财；\n\n经过公主坟，遥想华丽家族；\n\n经过玉泉路，依然雄心勃勃…\n\n这时，有个声音飘然入耳:乘客你好,八宝山马上就要到了！\n\n顿时醒悟：人生苦短，有始有终。\n\n好比我们的浮动，有浮动开始，则就应该有浮动结束。\n\n## 为什么要清除浮动\n\n我们前面说过，浮动本质是用来做一些文字混排效果的，但是被我们拿来做布局用，则会有很多的问题出现， 但是，你不能说浮动不好 <img src=\"https://zclzone.gitee.io/resource/image/blog/media/wq.jpg\" height=\"100\" />。\n\n由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响，为了解决这些问题，此时就需要在该元素中清除浮动。\n\n准确地说，并不是清除浮动，而是**清除浮动后造成的影响**\n\n如果浮动一开始就是一个美丽的错误，那么请用正确的方法挽救它。\n\n## 清除浮动本质\n\n清除浮动主要为了解决父级元素因为子级浮动引起内部高度为 0 的问题。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/n.jpg\" />\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/no.jpg\" />\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/kc.jpg\" />\n\n## 清除浮动的方法\n\n其实本质叫做闭合浮动更好一些, 记住，清除浮动就是把浮动的盒子圈到里面，让父盒子闭合出口和入口不让他们出来影响其他元素。\n\n在 CSS 中，clear 属性用于清除浮动，其基本语法格式如下：\n\n```\n选择器{clear:属性值;}\n```\n\n| 属性值 | 描述                                       |\n| ------ | ------------------------------------------ |\n| left   | 不允许左侧有浮动元素（清除左侧浮动的影响） |\n| right  | 不允许右侧有浮动元素（清除右侧浮动的影响） |\n| both   | 同时清除左右两侧浮动的影响                 |\n\n### 额外标签法\n\n```html\n是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如\n<div style=\"”clear:both”\"></div>\n，或则其他标签br等亦可。\n```\n\n优点： 通俗易懂，书写方便\n\n缺点： 添加许多无意义的标签，结构化较差。 我只能说，w3c 你推荐的方法我不接受，你不值得拥有。。。\n\n### 父级添加 overflow 属性方法\n\n可以通过触发 BFC 的方式，可以实现清除浮动效果。（BFC 后面讲解）\n\n```css\n可以给父级添加： overflow为 hidden|auto|scroll  都可以实现。\n```\n\n优点： 代码简洁\n\n缺点： 内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。\n\n### 使用 after 伪元素清除浮动\n\n**:after 方式为空元素的升级版，好处是不用单独加标签了**\n\n使用方法：\n\n```css\n.clearfix:after {\n  content: '.';\n  display: block;\n  height: 0;\n  clear: both;\n  visibility: hidden;\n}\n\n.clearfix {\n  *zoom: 1;\n} /* IE6、7 专有 */\n```\n\n优点： 符合闭合浮动思想 结构语义化正确\n\n缺点： 由于 IE6-7 不支持:after，使用 zoom:1 触发 hasLayout。\n\n代表网站： 百度、淘宝网、网易等\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/163.png\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n注意： content:\".\" 里面尽量跟一个小点，或者其他，尽量不要为空，否则再 firefox 7.0 前的版本会有生成空格。\n\n### 使用 before 和 after 双伪元素清除浮动\n\n使用方法：\n\n```css\n.clearfix:before,\n.clearfix:after {\n  content: '';\n  display: table; /* 这句话可以出发BFC BFC可以清除浮动,BFC我们后面讲 */\n}\n.clearfix:after {\n  clear: both;\n}\n.clearfix {\n  *zoom: 1;\n}\n```\n\n优点： 代码更简洁\n\n缺点： 由于 IE6-7 不支持:after，使用 zoom:1 触发 hasLayout。\n\n代表网站： 小米、腾讯等\n\n# Photoshop 图像处理专家\n\n![1498465020015](https://zclzone.gitee.io/resource/image/blog/media/1498465020015.png)\n\nPS 工具是我们使用频率比较高的软件之一， 我们学习 PS 目的不是为了设计海报做电商和 UI 的，而是要求：\n\n1. 会简单的抠图\n2. 会简单的修改 PSD 效果图\n3. **熟练的切图**\n4. 能和网站美工美眉有共同话题。。。。。\n\n## Photoshop 基本使用\n\n## PS 界面组成：\n\n菜单栏、选项栏、工具栏、浮动面板（拖拽名称，可单独操作面板）、绘图窗口\n​ 窗口菜单，可显示隐藏所有面板\n\n工作区：（新建）\n\n调整浮动面板\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/jiemian.png\"/>\n\n## 基本操作\n\n文件下拉菜单：\n​ 1、新建 新建文档 CTRL+N\n\n单位：像素 厘米 毫米\n\n屏幕显示： 单位 像素 72 像素/英寸 RGB 颜色模式\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/huabu.png\"/>\n\n2、关闭文档 CTRL+W\n\n3、存储 CTRL+S （替存）\n\n4、存储为 CTRL+SHIFT+S 另存一份文件\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/baocun.png\"/>\n\n5、格式：\n​ .psd PS 源文件格式 图层、文字、样式等，可再次编辑\n​ （给自己）\n​ .jpg 有损压缩格式 （给客户） 品质 最高 12\n\n6、文件打开：\n​ 1）文件下拉菜单-打开（CTRL+O 欧）\n\n​ 2）双击软件空白处也能打开\n​\n\n## 移动工具 V\n\n1、不同文件之间拖拽图像。\n\n## 自由变形\n\nctrl + T 可以改变图像的大小\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/bianhuan.png\" />\n\n按下 enter 回车确认操作。\n\n## 图层操作(重点)\n\n图层面板快捷键 F7 其实图层就是一张张透明的纸 可以实现叠加问题。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/tuceng.png\" />\n\n图层选择： 使用移动工具 V\n\n1、图层缩览图判断\n\n2、按住 CTRL,在目标图像上单击\n\n3、将光标放置在目标图像上右键，选择图层名称\n\n图层面板中加选图层：\n\n1、按 SHIFT，单击另一目标图层 中间所有图层被选中\n\n2、按 CTRL，单击另一目标图层 只选中目标图层\n\n复制图层：选中目标图层后（移动工具状态下）\n\n1、按 ALT 拖拽图像\n\n2、CTRL+J （重合）\n\n案例： 摆放一个自行车\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/bike.jpg\" />\n\n## 图层编组\n\n选中目标图层，CTRL+G\n\n取消编组：CTRL+SHIFT+G\n\n双击图层名称可重新命名\n\n双击组名称，可命名组\n\n移动工具 V 选择组或图层时，需设置选项栏\n\n![1498465862231](https://zclzone.gitee.io/resource/image/blog/media/1498465862231.png)\n\n## 图层上下位置移动\n\n1、选中目标图层，在图层面拖拽\n\n2、CTRL+] 向上移动图层\n​ CTRL+[ 向下移动图层\n\n3、CTRL+SHIFT+] 图层置顶\n​ CTRL+SHIFT+[ 图层置底\n\n移动选区或图像时：\n\n移动过程中，没释放鼠标，按住 SHIFT，可同一水平线、同一垂线、45 度移动。\n\nps 中的撤销操作是：\n\nctrl+z 撤销一步\n\nctrl+alt+z 撤销多步\n\n## 图层合并\n\nctrl+e 可以合并图层\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/hebing.png\" />\n\n## 图层透明度\n\n不透明度：设置图层的不透明程度 0%完全透明，不可见\n\n​ 100%完全不透明，真实可见\n\n填充：与不透明度效果类似\n\n![1498465905203](https://zclzone.gitee.io/resource/image/blog/media/1498465905203.png))\n\n键盘数字键，可快速设置透明度数值\n\n## 矩形选区工具 M\n\n用来选择某部分区域 我们成为选区工具\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/gongjuxiang.png\" />\n\n取消选区： ctrl+d\n\n## 颜色填充\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/yanse1.png\" />\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/yanse2.png\" />\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/miqi.jpg\"/>\n\n## 套索工具 L\n\n1、套索工具 L 在屏幕上拖拽鼠标左键，释放后生成选区\n\n2、多边形套索 L 连续单击绘制多边形选区\n\n​ 闭合方法：1、单击起始点 2、双击任意位置\n\n​ DELETE 删除当前点\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/shiboguan.jpg\" />\n\n## 磁性套索 L\n\nL 在颜色交界的位置单击后拖动。单击起始点后，生成选区。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/cixing.jpg\" />\n\n## 魔棒工具 W\n\n以单击位置为选择色，选择相似颜色生成选区。\n\n![1498465928343](https://zclzone.gitee.io/resource/image/blog/media/1498465928343.png)\n\n容差：选择颜色的范围 容差小，颜色选择精确。 0-255\n\n连续：勾选连续时，相连颜色生成选区。\n\n​ 不勾选，画面中所有相似颜色被选中生成选区。\n\n按 SHIFT 在未生成选区位置单击，可选区相加。\n\n选区反选：CTRL+SHIFT+I\n\n## 选区布尔运算\n\n![1498465944087](https://zclzone.gitee.io/resource/image/blog/media/1498465944087.png)\n\n选区面积大小的变化。\n\n新选区：保持选中状态\n\n添加到选区：相加运算（按住 SHIFT 再绘制选区）\n\n从选区减去：相减（按住 ALT 再绘制选区）\n\n与选区交叉：重合部分保留。（按住 ALT+SHIFT 再绘制选区）\n\n梦幻星球\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/chengshi.jpg\" />\n\n## 钢笔工具： P\n\n作用：绘制路径，生成选区，抠图。\n\n组成;路径线和锚点\n\n绘制路径后，CTRL+回车，生成选区。\n\n路径类型：\n\n直线型路径：连续单击\n\n曲线型路径：第一点单击，第二点拖动鼠标。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/jiu.png\"/>\n\n## 文字工具\n\nT 可以直接输入文字\n\n## Photoshop 切图\n\nPS 切图 可以 分为 手动 利用切片切图 以及 利用 PS 的插件快速切图\n\n### 切片工具\n\n![1498466173246](https://zclzone.gitee.io/resource/image/blog/media/1498466173246.png)\n\n1. 利用切片工具手动划出\n\n2. 图层菜单---新建基于图层的切片\n\n3. 利用标尺 基于参考线的切片 （选择切片工具）\n\n   ​\n\n   ![1498466734205](https://zclzone.gitee.io/resource/image/blog/media/1498466734205.png)\n\n4. 先选个一个整个的切片， 切片选择工具-- 属性面板中有 “划分” --可以等分数平分切图\n\n导出切片： 文件-- 存储为 web 设备所用格式\n\n### 辅助线和切片使用及清除\n\n视图菜单-- 清除 辅助线/ 清除切片\n\n### 切图插件\n\nCutterman 是一款运行在 photoshop 中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 \"导出 web 所用格式\" 以及使用切片工具进行挨个切图的繁琐流程。 它支持各种各样的图片尺寸、格式、形态输出，方便你在 pc、ios、Android 等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。\n\n官网: http://www.cutterman.cn/zh/cutterman\n\n注意： cutterman 插件要求你的 ps 必须是完整版，不能是绿色版，所以大家需要从新安装完整版本。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/sample1.gif\" />\n\n# 项目案例： 学成网\n\n案例练习目的是总结以前的 css 和 html\n\n还有 ps 的使用。\n\n制作步骤：\n\n1. 准备相关文件。（内部样式表) html 文件(index.html) 图片文件\n2. 准备 CSS 初始化。 书写结构和样式\n3. 确定版心（是 1200 像素)和各个模块。\n\n# 定位(position)\n\n如果，说浮动， 关键在一个 “浮” 字上面， 那么 我们的定位，关键在于一个 “位” 上。\n\nPS: 定位是我们 CSS 算是数一数二难点的了，但是，你务必要学好它，我们 CSS 离不开定位，特别是后面的 js 特效，天天和定位打交道。不要抵触它，反而要爱上它，它可以让我们工作更加轻松哦！\n\n## 为什么要用定位？\n\n那么定位，最长运用的场景再那里呢？ 来看几幅图片，你一定会有感悟！\n\n第一幅图， 小黄色块可以再图片上移动：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/1.gif\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n第二幅图， 左右箭头压住图片：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/2.gif\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n第三幅图, hot 再盒子外面多出一块，更加突出：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/it.png\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n以上三个小地方，如果用标准流或者浮动，实现会比较复杂或者难以实现，此时我们用定位来做，just soso！\n\n## 元素的定位属性\n\n元素的定位属性主要包括定位模式和边偏移两部分。\n\n1、边偏移\n\n| 边偏移属性 | 描述                                           |\n| ---------- | ---------------------------------------------- |\n| top        | 顶端偏移量，定义元素相对于其父元素上边线的距离 |\n| bottom     | 底部偏移量，定义元素相对于其父元素下边线的距离 |\n| left       | 左侧偏移量，定义元素相对于其父元素左边线的距离 |\n| right      | 右侧偏移量，定义元素相对于其父元素右边线的距离 |\n\n也就说，以后定位要和这边偏移搭配使用了， 比如 top: 100px; left: 30px; 等等\n\n2、定位模式(定位的分类)\n\n在 CSS 中，position 属性用于定义元素的定位模式，其基本语法格式如下：\n\n选择器{position:属性值;}\n\nposition 属性的常用值\n\n| 值       | 描述                                             |\n| -------- | ------------------------------------------------ |\n| static   | 自动定位（默认定位方式）                         |\n| relative | 相对定位，相对于其原文档流的位置进行定位         |\n| absolute | 绝对定位，相对于其上一个已经定位的父元素进行定位 |\n| fixed    | 固定定位，相对于浏览器窗口进行定位               |\n\n## 静态定位(static)\n\n静态定位是所有元素的默认定位方式，当 position 属性的取值为 static 时，可以将元素定位于静态位置。 所谓静态位置就是各个元素在 HTML 文档流中默认的位置。\n\n上面的话翻译成白话： 就是网页中所有元素都默认的是静态定位哦！ 其实就是标准流的特性。\n\n在静态定位状态下，无法通过边偏移属性（top、bottom、left 或 right）来改变元素的位置。\n\nPS： 静态定位其实没啥可说的。\n\n## 相对定位 relative(自恋型)\n\n```\n小笑话：\n刚刚看到一个超级超级帅的帅哥，看得我都忍不住想和他搞基了。世间怎会有如此之完美的男人。我和他就这样一动不动的对视着，就仿佛一见钟情。时间也在这一瞬间停止了。直到我的手麻了。才恋恋不舍的放下镜子。。。。\n```\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/smail.gif\" width=\"100\"/>\n\n相对定位是将元素相对于它在标准流中的位置进行定位，当 position 属性的取值为 relative 时，可以将元素定位于相对位置。\n\n对元素设置相对定位后，可以通过边偏移属性改变元素的位置，但是它在文档流中的位置仍然保留。如下图所示，即是一个相对定位的效果展示：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/r.png\"  />\n\n注意：\n\n1. 相对定位最重要的一点是，它可以通过边偏移移动位置，但是原来的所占的位置，继续占有。\n2. 其次，每次移动的位置，是以自己的左上角为基点移动（相对于自己来移动位置）\n\n就是说，相对定位的盒子仍在标准流中，它后面的盒子仍以标准流方式对待它。（相对定位不脱标）\n\n如果说浮动的主要目的是 让多个块级元素一行显示，那么定位的主要价值就是 移动位置， 让盒子到我们想要的位置上去。\n\n## 绝对定位 absolute (拼爹型)\n\n```\n小笑话：\n\n吃早饭时，老婆往儿子碗里放了两个煎蛋，儿子全给了我，还一本正经地说：“爸爸，多吃点，男人养家不容易。” <br/>\n\n我一阵感动，刚想夸他两句。\n\n儿子接着说：“以后全靠你让我拼爹了！”\n```\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/smail.gif\" width=\"100\"/>\n\n[注意] 如果文档可滚动，绝对定位元素会随着它滚动，因为元素最终会相对于正常流的某一部分定位。\n\n当 position 属性的取值为 absolute 时，可以将元素的定位模式设置为绝对定位。\n\n注意： 绝对定位最重要的一点是，它可以通过边偏移移动位置，但是它完全脱标，完全不占位置。\n\n### 父级没有定位\n\n若所有父元素都没有定位，以浏览器为准对齐(document 文档)。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/ab.png\" />\n\n### 父级有定位\n\n绝对定位是将元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/ab1.png\" />\n\n### 子绝父相\n\n这个“子绝父相”太重要了，是我们学习定位的口诀，时时刻刻记住的。\n\n这句话的意思是 子级是绝对定位的话， 父级要用相对定位。\n\n首先， 我们说下， 绝对定位是将元素依据最近的已经定位绝对、固定或相对定位）的父元素（祖先）进行定位。\n\n就是说， 子级是绝对定位，父亲只要是定位即可（不管父亲是绝对定位还是相对定位，甚至是固定定位都可以），就是说， 子绝父绝，子绝父相都是正确的。\n\n但是，在我们网页布局的时候， 最常说的 子绝父相是怎么来的呢？ 请看如下图：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/zi.png\"  style=\"border: 1px dashed #3c3c3c;\"/>\n\n所以，我们可以得出如下结论：\n\n因为子级是绝对定位，不会占有位置， 可以放到父盒子里面的任何一个地方。\n\n父盒子布局时，需要占有位置，因此父亲只能是 相对定位.\n\n这就是子绝父相的由来。\n\n## 绝对定位的盒子水平/垂直居中\n\n普通的盒子是左右 margin 改为 auto 就可， 但是对于绝对定位就无效了\n\n定位的盒子也可以水平或者垂直居中，有一个算法。\n\n1. 首先 left 50% 父盒子的一半大小\n\n2. 然后走自己外边距负的一半值就可以了 margin-left。\n\n   ​\n\n## 固定定位 fixed(认死理型)\n\n固定定位是绝对定位的一种特殊形式，类似于 正方形是一个特殊的 矩形。它以浏览器窗口作为参照物来定义网页元素。当 position 属性的取值为 fixed 时，即可将元素的定位模式设置为固定定位。\n\n当对元素设置固定定位后，它将脱离标准文档流的控制，始终依据浏览器窗口来定义自己的显示位置。不管浏览器滚动条如何滚动也不管浏览器窗口的大小如何变化，该元素都会始终显示在浏览器窗口的固定位置。\n\n固定定位有两点：\n\n1. 固定定位的元素跟父亲没有任何关系，只认浏览器。\n2. 固定定位完全脱标，不占有位置，不随着滚动条滚动。\n\n记忆法： 就类似于孙猴子， 无父无母，好不容易找到一个可靠的师傅（浏览器），就听的师傅的，别的都不听。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/sun.jpg\" width=\"100\">\n\nie6 等低版本浏览器不支持固定定位。\n\n## 叠放次序（z-index）\n\n当对多个元素同时设置定位时，定位元素之间有可能会发生重叠。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/zzz.png\" />\n\n在 CSS 中，要想调整重叠定位元素的堆叠顺序，可以对定位元素应用 z-index 层叠等级属性，其取值可为正整数、负整数和 0。\n\n比如： z-index: 2;\n\n注意：\n\n1. z-index 的默认属性值是 0，取值越大，定位元素在层叠元素中越居上。\n\n2. 如果取值相同，则根据书写顺序，后来居上。\n\n3. 后面数字一定不能加单位。\n\n4. 只有相对定位，绝对定位，固定定位有此属性，其余标准流，浮动，静态定位都无此属性，亦不可指定此属性。\n\n# 四种定位总结\n\n| 定位模式          | 是否脱标占有位置     | 是否可以使用边偏移 | 移动位置基准                     |\n| ----------------- | -------------------- | ------------------ | -------------------------------- |\n| 静态 static       | 不脱标，正常模式     | 不可以             | 正常模式                         |\n| 相对定位 relative | 不脱标，占有位置     | 可以               | 相对自身位置移动（自恋型）       |\n| 绝对定位 absolute | 完全脱标，不占有位置 | 可以               | 相对于定位父级移动位置（拼爹型） |\n| 固定定位 fixed    | 完全脱标，不占有位置 | 可以               | 相对于浏览器移动位置（认死理型） |\n\n# 定位模式转换\n\n跟 浮动一样， 元素添加了 绝对定位和固定定位之后， 元素模式也会发生转换， 都转换为 行内块模式，\n\n** 因此 比如 行内元素 如果添加了 绝对定位或者 固定定位后 浮动后，可以不用转换模式，直接给高度和宽度就可以了。**\n\n# 元素的显示与隐藏\n\n在 CSS 中有三个显示和隐藏的单词比较常见，我们要区分开，他们分别是 display visibility 和 overflow。\n\n他们的主要目的是让一个元素在页面中消失，但是不在文档源码中删除。 最常见的是网站广告，当我们点击类似关闭不见了，但是我们重新刷新页面，它们又会出现和你玩躲猫猫！！\n\n## display 显示\n\ndisplay 设置或检索对象是否及如何显示。\n\ndisplay : none 隐藏对象 与它相反的是 display:block 除了转换为块级元素之外，同时还有显示元素的意思。\n\n特点： 隐藏之后，不再保留位置。\n\n## visibility 可见性\n\n设置或检索是否显示对象。\n\nvisible : 　对象可视\n\nhidden : 　对象隐藏\n\n特点： 隐藏之后，继续保留原有位置。（停职留薪）\n\n## overflow 溢出\n\n检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。\n\nvisible : 　不剪切内容也不添加滚动条。\n\nauto : 　 超出自动显示滚动条，不超出不显示滚动条\n\nhidden : 　不显示超过对象尺寸的内容，超出的部分隐藏掉\n\nscroll : 　不管超出内容否，总是显示滚动条\n\n# CSS 高级技巧\n\n## CSS 用户界面样式\n\n所谓的界面样式， 就是更改一些用户操作样式， 比如 更改用户的鼠标样式， 表单轮廓等。但是比如滚动条的样式改动受到了很多浏览器的抵制，因此我们就放弃了。 防止表单域拖拽\n\n### 鼠标样式 cursor\n\n设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。\n\n```html\ncursor : default 小白 | pointer 小手 | move 移动 | text 文本\n```\n\n鼠标放我身上查看效果哦：\n\n```html\n<ul>\n  <li style=\"cursor:default\">我是小白</li>\n  <li style=\"cursor:pointer\">我是小手</li>\n  <li style=\"cursor:move\">我是移动</li>\n  <li style=\"cursor:text\">我是文本</li>\n</ul>\n```\n\n尽量不要用 hand 因为 火狐不支持 pointer ie6 以上都支持的尽量用\n\n### 轮廓 outline\n\n是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。\n\n```css\noutline: outline-color ||outline-style || outline-width;\n```\n\n但是我们都不关心可以设置多少，我们平时都是去掉的。\n\n最直接的写法是 ： outline: 0; 或者 outline: none;\n\n```html\n<input type=\"text\" style=\"outline: 0;\" />\n```\n\n### 防止拖拽文本域 resize\n\nresize：none 这个单词可以防止 火狐 谷歌等浏览器随意的拖动 文本域。\n\n右下角可以拖拽：\n\n<textarea></textarea>\n\n右下角不可以拖拽：\n\n```html\n<textarea style=\"resize: none;\"></textarea>\n```\n\n## vertical-align 垂直对齐\n\n以前我们讲过让带有宽度的块级元素居中对齐，是 margin: 0 auto;\n\n以前我们还讲过让文字居中对齐，是 text-align: center;\n\n但是我们从来没有讲过有垂直居中的属性， 我们的妈妈一直很担心我们的垂直居中怎么做。\n\nvertical-align 垂直对齐， 这个看上去很美好的一个属性， 实际有着不可捉摸的脾气，否则我们也不会这么晚来讲解。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/xian.jpg\" />\n\n```css\nvertical-align: baseline |top |middle |bottom;\n```\n\n设置或检索对象内容的垂直对其方式。\n\nvertical-align 不影响块级元素中的内容对齐，它只针对于 行内元素或者行内块元素，特别是行内块元素， **通常用来控制图片/表单与文字的对齐**。\n\n![1498467742995](https://zclzone.gitee.io/resource/image/blog/media/1498467742995.png)\n\n### 图片、表单和文字对齐\n\n所以我们知道，我们可以通过 vertical-align 控制图片和文字的垂直关系了。 默认的图片会和文字基线对齐。\n\n### 去除图片底侧空白缝隙\n\n有个很重要特性你要记住： 图片或者表单等行内块元素，他的底线会和父级盒子的基线对齐。这样会造成一个问题，就是图片底侧会有一个空白缝隙。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/3.jpg\" />\n\n解决的方法就是：\n\n1. 给 img vertical-align:middle | top 等等。 让图片不要和基线对齐。<img src=\"https://zclzone.gitee.io/resource/image/blog/media/1633.png\"  width=\"500\"  style=\"border: 1px dashed #ccc;\" />\n\n1) 给 img 添加 display：block; 转换为块级元素就不会存在问题了。<img src=\"https://zclzone.gitee.io/resource/image/blog/media/sina1.png\" width=\"500\" style=\"border: 1px dashed #ccc;\"/>\n\n# 溢出的文字隐藏\n\n## word-break:自动换行\n\nnormal 使用浏览器默认的换行规则。\n\nbreak-all 允许在单词内换行。\n\nkeep-all 只能在半角空格或连字符处换行。\n\n主要处理英文单词\n\n## white-space\n\nwhite-space 设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容\n\nnormal : 　默认处理方式\nnowrap : 　强制在同一行内显示所有文本，直到文本结束或者遭遇 br 标签对象才换行。\n\n可以处理中文\n\n## text-overflow 文字溢出\n\ntext-overflow : clip | ellipsis\n\n设置或检索是否使用一个省略标记（...）标示对象内文本的溢出\n\nclip : 　不显示省略标记（...），而是简单的裁切\n\nellipsis : 　当对象内文本溢出时显示省略标记（...）\n\n注意一定要首先强制一行内显示，再次和 overflow 属性 搭配使用\n\n## CSS 精灵技术（sprite） 小妖精 雪碧\n\n### 精灵技术产生的背景\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/sss.png\" />\n\n图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。\n\n然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度，出现了 CSS 精灵技术（也称 CSS Sprites、CSS 雪碧）。\n\n### 精灵技术本质\n\n简单地说，CSS 精灵是一种处理网页背景图像的方式。它将一个页面涉及到的所有零星背景图像都集中到一张大图中去，然后将大图应用于网页，这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。通常情况下，这个由很多小的背景图像合成的大图被称为精灵图（雪碧图），如下图所示为京东网站中的一个精灵图。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/jds.png\"  style=\"border: 1px dashed #ccc;\" />\n\n### 精灵技术的使用\n\nCSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图，就需要使用 CSS 的 background-image、background-repeat 和 background-position 属性进行背景定位，其中最关键的是使用 background-position 属性精确地定位。\n\n### 制作精灵图\n\nCSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），那我们要做的，就是把小图拼合成一张大图。\n\n大部分情况下，精灵图都是网页美工做。\n\n```\n我们精灵图上放的都是小的装饰性质的背景图片。 插入图片不能往上放。\n我们精灵图的宽度取决于最宽的那个背景。\n我们可以横向摆放也可以纵向摆放，但是每个图片之间，间隔至少隔开偶数像素合适。\n在我们精灵图的最低端，留一片空隙，方便我们以后添加其他精灵图。\n```\n\n结束语： 小公司，背景图片很少的情况，没有必要使用精灵技术，维护成本太高。 如果是背景图片比较多，可以建议使用精灵技术。\n\n## 字体图标\n\n图片是有诸多优点的，但是缺点很明显，比如图片不但增加了总文件的大小，还增加了很多额外的\"http 请求\"，这都会大大降低网页的性能的。更重要的是图片不能很好的进行“缩放”，因为图片放大和缩小会失真。 我们后面会学习移动端响应式，很多情况下希望我们的图标是可以缩放的。此时，一个非常重要的技术出现了，额不是出现了，是以前就有，是被从新\"宠幸\"啦。。 这就是字体图标（iconfont).\n\n### 字体图标优点\n\n```\n可以做出跟图片一样可以做的事情,改变透明度、旋转度，等..\n但是本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果等等...\n本身体积更小，但携带的信息并没有削减。\n几乎支持所有的浏览器\n移动端设备必备良药...\n```\n\n### 字体图标使用流程\n\n总体来说，字体图标按照如下流程：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/fontt.png\" />\n\n#### 设计字体图标\n\n假如图标是我们公司单独设计，那就需要第一步了，这个属于 UI 设计人员的工作， 他们在 illustrator 或 Sketch 这类矢量图形软件里创建 icon 图标， 比如下图：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/03.jpg\" />\n\n之后保存为 svg 格式，然后给我们前端人员就好了。\n\n其实第一步，我们不需要关心，只需要给我们这些图标就可以了，如果图标是大众的，网上本来就有的，可以直接跳过第一步，进入第三步。\n\n#### 上传生成字体包\n\n当 UI 设计人员给我们 svg 文件的时候，我们需要转换成我们页面能使用的字体文件， 而且需要生成的是兼容性的适合各个浏览器的。\n\n​ 推荐网站： http://icomoon.io\n\n**icomoon 字库**\n\nIcoMoon 成立于 2011 年，推出的第一个自定义图标字体生成器，它允许用户选择他们所需要的图标，使它们成一字型。 内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。\n\n推荐网站： http://www.iconfont.cn/\n\n**阿里 icon font 字库**\n\nhttp://www.iconfont.cn/\n\n这个是阿里妈妈 M2UX 的一个 icon font 字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用 AI 制作图标上传生成。 一个字，免费，免费！！\n\n**fontello**\n\n[http://fontello.com/](http://fontello.com/)\n\n在线定制你自己的 icon font 字体图标字库，也可以直接从 GitHub 下载整个图标集，该项目也是开源的。\n\n**Font-Awesome**\n\n[http://fortawesome.github.io/Font-Awesome/](http://fortawesome.github.io/Font-Awesome/)\n\n这是我最喜欢的字库之一了，更新比较快。目前已经有 369 个图标了。\n\n**Glyphicon Halflings**\n\n[http://glyphicons.com/](http://glyphicons.com/)\n\n这个字体图标可以在 Bootstrap 下免费使用。自带了 200 多个图标。\n\n**Icons8**\n\n[https://icons8.com/](https://icons8.com/)\n\n提供 PNG 免费下载，像素大能到 500PX\n\n#### 下载兼容字体包\n\n刚才上传完毕， 网站会给我们把 UI 做的 svg 图片转换为我们的字体格式， 然后下载下来就好了\n\n当然，我们不需要自己专门的图标，是想网上找几个图标使用，以上 2 步可以直接省略了， 直接到刚才的网站上找喜欢的下载使用吧。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/fontt1.png\" />\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/fontt2.png\" />\n\n#### 字体引入到 HTML\n\n得到压缩包之后，最后一步，是最重要的一步了， 就是字体文件已经有了，我们需要引入到我们页面中。\n\n1. 首先把 以下 4 个文件放入到 fonts 文件夹里面。 通俗的做法\n\n   ![1498032122244](https://zclzone.gitee.io/resource/image/blog/media/1498032122244.png)\n\n   ##### 第一步：在样式里面声明字体： 告诉别人我们自己定义的字体\n\n   ```css\n   @font-face {\n     font-family: 'icomoon';\n     src: url('fonts/icomoon.eot?7kkyc2');\n     src: url('fonts/icomoon.eot?7kkyc2#iefix') format('embedded-opentype'), url('fonts/icomoon.ttf?7kkyc2')\n         format('truetype'), url('fonts/icomoon.woff?7kkyc2') format('woff'), url('fonts/icomoon.svg?7kkyc2#icomoon')\n         format('svg');\n     font-weight: normal;\n     font-style: normal;\n   }\n   ```\n\n   ##### 第二步：给盒子使用字体\n\n   ```css\n   span {\n     font-family: 'icomoon';\n   }\n   ```\n\n   ##### 第三步：盒子里面添加结构\n\n   ```css\n   span::before {\n   \t\t content: \"\\e900\";\n   \t}\n   或者\n   <span></span>\n   ```\n\n   ### 追加新图标到原来库里面\n\n   如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标，但是原来的不能删除，继续使用，此时我们需要这样做\n\n   把压缩包里面的 selection.json 从新上传，然后，选中自己想要新的图标，从新下载压缩包，替换原来文件即可。\n\n   <img src=\"https://zclzone.gitee.io/resource/image/blog/media/fontt5.png\" />\n\n## 滑动门\n\n先来体会下现实中的滑动门,或者你可以叫做推拉门：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/h.gif\" />\n\n### 滑动门出现的背景\n\n制作网页时，为了美观，常常需要为网页元素设置特殊形状的背景，比如微信导航栏，有凸起和凹下去的感觉，最大的问题是里面的字数不一样多，咋办？\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/wxx.jpg\" />\n\n为了使各种特殊形状的背景能够自适应元素中文本内容的多少，出现了 CSS 滑动门技术。它从新的角度构建页面，使各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，可用性更强。 最常见于各种导航栏的滑动门。\n\n### 核心技术\n\n核心技术就是利用 CSS 精灵（主要是背景位置）和盒子 padding 撑开宽度, 以便能适应不同字数的导航栏。\n\n一般的经典布局都是这样的：\n\n```html\n<li>\n  <a href=\"#\">\n    <span>导航栏内容</span>\n  </a>\n</li>\n```\n\n总结：\n\n1. a 设置 背景左侧，padding 撑开合适宽度。\n2. span 设置背景右侧， padding 撑开合适宽度 剩下由文字继续撑开宽度。\n3. 之所以 a 包含 span 就是因为 整个导航都是可以点击的。\n\n## before 和 after 伪元素(详解)\n\n之所以被称为伪元素，是因为他们不是真正的页面元素，html 没有对应的元素，但是其所有用法和表现行为与真正的页面元素一样，可以对其使用诸如页面元素一样的 css 样式，表面上看上去貌似是页面的某些元素来展现，实际上是 css 样式展现的行为，因此被称为伪元素。是伪元素在 html 代码机构中的展现，可以看出无法伪元素的结构无法审查\n\n**注意**\n\n伪元素:before 和:after 添加的内容默认是 inline 元素\\*\\*；这个两个伪元素的`content`属性，表示伪元素的内容,设置:before 和:after 时必须设置其`content`属性，否则伪元素就不起作用。\n\n## 过渡(CSS3)\n\n过渡（transition)是 CSS3 中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。\n\n帧动画：通过一帧一帧的画面按照固定顺序和速度播放。如电影胶片\n\n![1498445034712](https://zclzone.gitee.io/resource/image/blog/media/1498445034712.png)\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/zhen.gif\" />\n\n在 CSS3 里使用 transition 可以实现补间动画（过渡效果），并且当前元素只要有“属性”发生变化时即存在两种状态(我们用 A 和 B 代指），就可以实现平滑的过渡，为了方便演示采用 hover 切换两种状态，但是并不仅仅局限于 hover 状态来实现过渡。\n\n语法格式:\n\n```\ntransition: 要过渡的属性  花费时间  运动曲线  何时开始;\n如果有多组属性变化，还是用逗号隔开。\n```\n\n| 属性                       | 描述                                         | CSS |\n| -------------------------- | -------------------------------------------- | --- |\n| transition                 | 简写属性，用于在一个属性中设置四个过渡属性。 | 3   |\n| transition-property        | 规定应用过渡的 CSS 属性的名称。              | 3   |\n| transition-duration        | 定义过渡效果花费的时间。默认是 0。           | 3   |\n| transition-timing-function | 规定过渡效果的时间曲线。默认是 \"ease\"。      | 3   |\n| transition-delay           | 规定过渡效果何时开始。默认是 0。             | 3   |\n\n如果想要所有的属性都变化过渡， 写一个 all 就可以\n\ntransition-duration 花费时间 单位是 秒 s 比如 0.5s 这个 s 单位必须写 ms 毫秒\n\n运动曲线 默认是 ease\n\n何时开始 默认是 0s 立马开始\n\n运动曲线示意图：\n\n![1498445454760](https://zclzone.gitee.io/resource/image/blog/media/1498445454760.png)\n\n```css\ndiv {\n  width: 200px;\n  height: 100px;\n  background-color: pink;\n  /* transition: 要过渡的属性  花费时间  运动曲线  何时开始; */\n  transition: width 0.6s ease 0s, height 0.3s ease-in 1s;\n  /* transtion 过渡的意思  这句话写到div里面而不是 hover里面 */\n}\ndiv:hover {\n  /* 鼠标经过盒子，我们的宽度变为400 */\n\n  width: 600px;\n  height: 300px;\n}\n\ntransition: all 0.6s; /* 所有属性都变化用all 就可以了  后面俩个属性可以省略 */\n```\n\n## 2D 变形(CSS3) transform\n\ntransform 是 CSS3 中具有颠覆性的特征之一，可以实现元素的位移、旋转、倾斜、缩放，甚至支持矩阵方式，配合过渡和即将学习的动画知识，可以取代大量之前只能靠 Flash 才可以实现的效果。\n\n变形转换 transform transform 变换 变形的意思 《 transformers 变形金刚》\n\n### 移动 translate(x, y)\n\ntranslate 移动平移的意思\n\n![1498443715586](https://zclzone.gitee.io/resource/image/blog/media/1498443715586.png)\n\n```css\ntranslate(50px,50px);\n```\n\n使用 translate 方法来将文字或图像在水平方向和垂直方向上分别垂直移动 50 像素。\n\n可以改变元素的位置，x、y 可为负值；\n\n```\n translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）\n translateX(x)仅水平方向移动（X轴移动）\n translateY(Y)仅垂直方向移动（Y轴移动）\n```\n\n```css\n.box {\n  width: 499.9999px;\n  height: 400px;\n  background: pink;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%); /* 走的自己的一半 */\n}\n```\n\n让定位的盒子水平居中\n\n### 缩放 scale(x, y)\n\n![1498444645795](https://zclzone.gitee.io/resource/image/blog/media/1498444645795.png)\n\n```css\ntransform: scale(0.8, 1);\n```\n\n可以对元素进行水平和垂直方向的缩放。该语句使用 scale 方法使该元素在水平方向上缩小了 20%，垂直方向上不缩放。\n\n```\nscale(X,Y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）\nscaleX(x)元素仅水平方向缩放（X轴缩放）\nscaleY(y)元素仅垂直方向缩放（Y轴缩放）\n```\n\nscale()的取值默认的值为 1，当值设置为 0.01 到 0.99 之间的任何值，作用使一个元素缩小；而任何大于或等于 1.01 的值，作用是让元素放大\n\n### 旋转 rotate(deg)\n\n可以对元素进行旋转，正值为顺时针，负值为逆时针；\n\n![1498443651293](https://zclzone.gitee.io/resource/image/blog/media/1498443651293.png)\n\n```css\ntransform: rotate(45deg);\n```\n\n注意单位是 deg 度数\n\n### transform-origin 可以调整元素转换变形的原点\n\n![1498443912530](https://zclzone.gitee.io/resource/image/blog/media/1498443912530.png)\n\n```css\ndiv {\n  transform-origin: left top;\n  transform: rotate(45deg);\n} /* 改变元素原点到左上角，然后进行顺时旋转45度 */\n```\n\n如果是 4 个角，可以用 left top 这些，如果想要精确的位置， 可以用 px 像素。\n\n```css\ndiv {\n  transform-origin: 10px 10px;\n  transform: rotate(45deg);\n} /* 改变元素原点到x 为10  y 为10，然后进行顺时旋转45度 */\n```\n\n案例旋转楚乔传\n\n```css\ndiv {\n  width: 250px;\n  height: 170px;\n  border: 1px solid pink;\n  margin: 200px auto;\n  position: relative;\n}\ndiv img {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  transition: all 0.6s;\n  transform-origin: top right;\n}\ndiv:hover img:nth-child(1) {\n  /* 鼠标经过div  第一张图片旋转 */\n  transform: rotate(60deg);\n}\ndiv:hover img:nth-child(2) {\n  transform: rotate(120deg);\n}\ndiv:hover img:nth-child(3) {\n  transform: rotate(180deg);\n}\ndiv:hover img:nth-child(4) {\n  transform: rotate(240deg);\n}\ndiv:hover img:nth-child(5) {\n  transform: rotate(300deg);\n}\ndiv:hover img:nth-child(6) {\n  transform: rotate(360deg);\n}\n```\n\n### 倾斜 skew(deg, deg)\n\n![1498443827389](https://zclzone.gitee.io/resource/image/blog/media/1498443827389.png)\n\n```css\ntransform: skew(30deg, 0deg);\n```\n\n该实例通过 skew 方法把元素水平方向上倾斜 30 度，处置方向保持不变。\n\n可以使元素按一定的角度进行倾斜，可为负值，第二个参数不写默认为 0。\n\n## 3D 变形(CSS3) transform\n\n2d x y\n\n3d x y z\n\n左手坐标系\n\n伸出左手，让拇指和食指成“L”形，大拇指向右，食指向上，中指指向前方。这样我们就建立了一个左手坐标系，拇指、食指和中指分别代表 X、Y、Z 轴的正方向。如下图\n\n![1498445587576](https://zclzone.gitee.io/resource/image/blog/media/1498445587576.png)\n\nCSS3 中的 3D 坐标系与上述的 3D 坐标系是有一定区别的，相当于其绕着 X 轴旋转了 180 度，如下图\n\n![1498459001951](https://zclzone.gitee.io/resource/image/blog/media/1498459001951.png)\n\n简单记住他们的坐标：\n\nx 左边是负的，右边是正的\n\ny 上面是负的， 下面是正的\n\nz 里面是负的， 外面是正的\n\n### rotateX()\n\n就是沿着 x 立体旋转.\n\n![1498445756802](https://zclzone.gitee.io/resource/image/blog/media/1498445756802.png)\n\n```css\nimg {\n  transition: all 0.5s ease 0s;\n}\nimg:hove {\n  transform: rotateX(180deg);\n}\n```\n\n### rotateY()\n\n沿着 y 轴进行旋转\n\n![1498446043198](https://zclzone.gitee.io/resource/image/blog/media/1498446043198.png)\n\n```css\nimg {\n  transition: all 0.5s ease 0s;\n}\nimg:hove {\n  transform: rotateX(180deg);\n}\n```\n\n### rotateZ()\n\n沿着 z 轴进行旋转\n\n```css\nimg {\n  transition: all 0.25s ease-in 0s;\n}\nimg:hover {\n  /* transform:rotateX(180deg); */\n  /* transform:rotateY(180deg); */\n  /* transform:rotateZ(180deg); */\n  /* transform:rotateX(45deg) rotateY(180deg) rotateZ(90deg) skew(0,10deg); */\n}\n```\n\n### 透视(perspective)\n\n电脑显示屏是一个 2D 平面，图像之所以具有立体感（3D 效果），其实只是一种视觉呈现，通过透视可以实现此目的。\n\n透视可以将一个 2D 平面，在转换的过程当中，呈现 3D 效果。\n\n- 透视原理： 近大远小 。\n- 浏览器透视：把近大远小的所有图像，透视在屏幕上。\n- perspective：视距，表示视点距离屏幕的长短。视点，用于模拟透视效果时人眼的位置\n\n注：并非任何情况下需要透视效果，根据开发需要进行设置。\n\nperspective 一般作为一个属性，设置给父元素，作用于所有 3D 转换的子元素\n\n理解透视距离原理：\n\n![1498446715314](https://zclzone.gitee.io/resource/image/blog/media/1498446715314.png)\n\n### translateX(x)\n\n仅水平方向移动\\*\\*（X 轴移动）\n\n![1498459697576](https://zclzone.gitee.io/resource/image/blog/media/1498459697576.png)\n\n主要目的实现移动效果\n\n### translateY(y)\n\n仅垂直方向移动（Y 轴移动）\n\n![1498459770252](https://zclzone.gitee.io/resource/image/blog/media/1498459770252.png)\n\n### translateZ(z)\n\ntransformZ 的直观表现形式就是大小变化，实质是 XY 平面相对于视点的远近变化（说远近就一定会说到离什么参照物远或近，在这里参照物就是 perspective 属性）。比如设置了 perspective 为 200px;那么 transformZ 的值越接近 200，就是离的越近，看上去也就越大，超过 200 就看不到了，因为相当于跑到后脑勺去了，我相信你正常情况下，是看不到自己的后脑勺的。\n\n### translate3d(x,y,z)\n\n[注意]其中，x 和 y 可以是长度值，也可以是百分比，百分比是相对于其本身元素水平方向的宽度和垂直方向的高度和；z 只能设置长度值\n\n### 开门案例\n\n```css\nbody {\n}\n.door {\n  width: 300px;\n  height: 300px;\n  margin: 100px auto;\n  border: 1px solid gray;\n  perspective: 1000px;\n  background: url('images/dog.gif') no-repeat cover;\n  position: relative;\n}\n.door > div {\n  box-sizing: border-box;\n  border: 1px solid black;\n}\n.left {\n  float: left;\n  width: 50%;\n  height: 100%;\n  background-color: brown;\n  transform-origin: left center;\n  transition: 1s;\n  position: relative;\n}\n.left::before {\n  content: '';\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  top: 50%;\n  right: 0px;\n  transform: translateY(-10px);\n  border: 1px solid whitesmoke;\n}\n.right {\n  width: 50%;\n  height: 100%;\n  float: left;\n  background-color: brown;\n  transform-origin: right center;\n  transition: 1s;\n  position: relative;\n}\n.right::before {\n  content: '';\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  top: 50%;\n  left: 0px;\n  transform: translateY(-10px);\n  border: 1px solid whitesmoke;\n}\n.door:hover .left {\n  transform: rotateY(-130deg);\n}\n.door:hover .right {\n  transform: rotateY(130deg);\n}\n```\n\n### backface-visibility\n\nbackface-visibility 属性定义当元素不面向屏幕时是否可见。\n\n### 翻转盒子案例\n\n```css\ndiv {\n  width: 224px;\n  height: 224px;\n  margin: 100px auto;\n  position: relative;\n}\ndiv img {\n  position: absolute;\n  top: 0;\n  left: 0;\n  transition: all 1s;\n}\ndiv img:first-child {\n  z-index: 1;\n  backface-visibility: hidden; /* 不是正面对象屏幕，就隐藏 */\n}\ndiv:hover img {\n  transform: rotateY(180deg);\n}\n```\n\n## 动画(CSS3) animation\n\n动画是 CSS3 中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。\n\n语法格式：\n\n```css\nanimation: 动画名称 动画时间 运动曲线 何时开始 播放次数 是否反方向;\n```\n\n![1498461096243](https://zclzone.gitee.io/resource/image/blog/media/1498461096243.png)\n\n关于几个值，除了名字，动画时间，延时有严格顺序要求其它随意 r\n\n```css\n@keyframes 动画名称 {\n  from{ 开始位置 }  0%\n  to{  结束  }  100%\n}\n```\n\n```\nanimation-iteration-count:infinite;  无限循环播放\nanimation-play-state:paused;   暂停动画\"\n```\n\n### 小汽车案例\n\n```css\nbody {\n  background: white;\n}\nimg {\n  width: 200px;\n}\n.animation {\n  animation-name: goback;\n  animation-duration: 5s;\n  animation-timing-function: ease;\n  animation-iteration-count: infinite;\n}\n@keyframes goback {\n  0% {\n  }\n  49% {\n    transform: translateX(1000px);\n  }\n  55% {\n    transform: translateX(1000px) rotateY(180deg);\n  }\n  95% {\n    transform: translateX(0) rotateY(180deg);\n  }\n  100% {\n    transform: translateX(0) rotateY(0deg);\n  }\n}\n```\n\n## 伸缩布局(CSS3)\n\nCSS3 在布局方面做了非常大的改进，使得我们对块级元素的布局排列变得十分灵活，适应性非常强，其强大的伸缩性，在响应式开中可以发挥极大的作用。\n\n主轴：Flex 容器的主轴主要用来配置 Flex 项目，默认是水平方向\n\n侧轴：与主轴垂直的轴称作侧轴，默认是垂直方向的\n\n方向：默认主轴从左向右，侧轴默认从上到下\n\n主轴和侧轴并不是固定不变的，通过 flex-direction 可以互换。\n\n![1498441839910](https://zclzone.gitee.io/resource/image/blog/media/1498441839910.png)\n\nFlex 布局的语法规范经过几年发生了很大的变化，也给 Flexbox 的使用带来一定的局限性，因为语法规范版本众多，浏览器支持不一致，致使 Flexbox 布局使用不多\n\n**2、各属性详解\\*\\*\\*\\***\n\n1.flex 子项目在主轴的缩放比例，不指定 flex 属性，则不参与伸缩分配\n\nmin-width 最小值 min-width: 280px 最小宽度 不能小于 280\n\nmax-width: 1280px 最大宽度 不能大于 1280\n\n2.flex-direction 调整主轴方向（默认为水平方向）\n\nflex-direction: column 垂直排列\n\nflex-direction: row 水平排列\n\nhttp://m.ctrip.com/html5/ 携程网手机端地址\n\n3、justify-content 调整主轴对齐（水平对齐）\n\n子盒子如何在父盒子里面水平对齐\n\n| 值            | 描述                                             | 白话文                                         |\n| ------------- | ------------------------------------------------ | ---------------------------------------------- |\n| flex-start    | 默认值。项目位于容器的开头。                     | 让子元素从父容器的开头开始排序但是盒子顺序不变 |\n| flex-end      | 项目位于容器的结尾。                             | 让子元素从父容器的后面开始排序但是盒子顺序不变 |\n| center        | 项目位于容器的中心。                             | 让子元素在父容器中间显示                       |\n| space-between | 项目位于各行之间留有空白的容器内。               | 左右的盒子贴近父盒子，中间的平均分布空白间距   |\n| space-around  | 项目位于各行之前、之间、之后都留有空白的容器内。 | 相当于给每个盒子添加了左右 margin 外边距       |\n\n4、align-items 调整侧轴对齐（垂直对齐）\n\n子盒子如何在父盒子里面垂直对齐（单行）\n\n| 值         | 描述                           | 白话文                                                |\n| ---------- | ------------------------------ | ----------------------------------------------------- |\n| stretch    | 默认值。项目被拉伸以适应容器。 | 让子元素的高度拉伸适用父容器（子元素不给高度的前提下) |\n| center     | 项目位于容器的中心。           | 垂直居中                                              |\n| flex-start | 项目位于容器的开头。           | 垂直对齐开始位置 上对齐                               |\n| flex-end   | 项目位于容器的结尾。           | 垂直对齐结束位置 底对齐                               |\n|            |                                |                                                       |\n\n5、flex-wrap 控制是否换行\n\n当我们子盒子内容宽度多于父盒子的时候如何处理\n\n| 值           | 描述                                                                               |\n| ------------ | ---------------------------------------------------------------------------------- |\n| nowrap       | 默认值。规定灵活的项目不拆行或不拆列。 不换行，则 收缩（压缩） 显示 强制一行内显示 |\n| wrap         | 规定灵活的项目在必要的时候拆行或拆列。                                             |\n| wrap-reverse | 规定灵活的项目在必要的时候拆行或拆列，但是以相反的顺序。                           |\n|              |                                                                                    |\n|              |                                                                                    |\n\n6、flex-flow 是 flex-direction、flex-wrap 的简写形式\n\n```css\nflex-flow: flex-direction flex-wrap;\n```\n\n白话记： flex-flow: 排列方向 换不换行;\n\n两个中间用空格\n\n例如：\n\n```css\ndisplay: flex;\n/* flex-direction: row;\nflex-wrap: wrap;   这两句话等价于下面的这句话*/\nflex-flow: column wrap; /* 两者的综合 */\n```\n\n7、align-content 堆栈（由 flex-wrap 产生的独立行）多行垂直对齐方式齐\n\nalign-content 是针对 flex 容器里面多轴(多行)的情况,align-items 是针对一行的情况进行排列。\n\n必须对父元素设置自由盒属性 display:flex;，并且设置排列方式为横向排列 flex-direction:row;并且设置换行，flex-wrap:wrap;这样这个属性的设置才会起作用。\n\n| 值            | 描述                                             | 测试 |\n| ------------- | ------------------------------------------------ | ---- |\n| stretch       | 默认值。项目被拉伸以适应容器。                   |      |\n| center        | 项目位于容器的中心。                             |      |\n| flex-start    | 项目位于容器的开头。                             |      |\n| flex-end      | 项目位于容器的结尾。                             |      |\n| space-between | 项目位于各行之间留有空白的容器内。               |      |\n| space-around  | 项目位于各行之前、之间、之后都留有空白的容器内。 |      |\n\n8、order 控制子项目的排列顺序，正序方式排序，从小到大\n\n用 css 来控制盒子的前后顺序。 用 order 就可以\n\n用整数值来定义排列顺序，数值小的排在前面。可以为负值。 默认值是 0\n\n```css\norder: 1;\n```\n\n此知识点重在理解，要明确找出主轴、侧轴、方向，各属性对应的属性值\n","source":"_posts/CSS学习笔记.md","raw":"---\ntitle: CSS学习笔记\ndate: 2019-06-23 19:41:25\ncover: true\ncategories: CSS\ntags: css\n---\n\n---\n\n# 课程目标:\n\n> 1. 学会使用 CSS 选择器\n> 2. 熟记 CSS 样式和外观属性\n> 3. 熟练掌握 CSS 各种选择器\n> 4. 熟练掌握 CSS 各种选择器\n> 5. 熟练掌握 CSS 三种显示模式\n> 6. 熟练掌握 CSS 背景属性\n> 7. 熟练掌握 CSS 三大特性\n> 8. 熟练掌握 CSS 盒子模型\n> 9. 熟练掌握 CSS 浮动 10.熟练掌握 CSS 定位 11.熟练掌握 CSS 高级技巧强化 CSS\n\n---\n\n# CSS 的发展历程\n\n从 HTML 被发明开始，样式就以各种形式存在。不同的浏览器结合它们各自的样式语言为用户提供页面效果的控制。最初的 HTML 只包含很少的显示属性。\n随着 HTML 的成长，为了满足页面设计者的要求，HTML 添加了很多显示功能。但是随着这些功能的增加，HTML 变的越来越杂乱，而且 HTML 页面也越来越臃肿。于是 CSS 便诞生了。\n\n# CSS 网页的美容师\n\nCSS 的出现，拯救了混乱的 HTML，当让更加拯救了我们 web 开发者。 让我们的网页更加丰富多彩。\n\nCSS 的最大贡献就是： 让 HTML 从样式中解脱苦海， 实现了 HTML 专注去做 结构呈现。 而样式交给 CSS 后，你完全可以放心的早点洗洗睡了！\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/x.jpg\" width=\"250\" />\n\n而且。。。。。 CSS 做的很出色，如果 JavaScript 是网页的魔法师，那么 CSS 它是我们网页的美容师，不信，你看:\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/baby.jpeg\" />\n\nps: 你跟 Angelababy 只差了一个妆容的距离\n\n来个更直观的认识吧：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/db.png\" />\n\n有人说， 没有不漂亮的女人，只有不会打扮的女人。\n\n我想说， 没有不好看的网页，只有不会 CSS 的前端。\n\n网页添加 CSS 和不添加 CSS 的对比：\n\n带有 CSS 的页面\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/Cc.png\" />\n\n没有 CSS 的页面\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/fff.png\" />\n\n# CSS 初识\n\nCSS(Cascading Style Sheets)\n\nCSS 通常称为 CSS 样式表或层叠样式表（级联样式表），主要用于设置 HTML 页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。\n\nCSS 以 HTML 为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。\n\n# CSS 样式规则\n\n使用 HTML 时，需要遵从一定的规范。CSS 亦如此，要想熟练地使用 CSS 对网页进行修饰，首先需要了解 CSS 样式规则，具体格式如下：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/gz.png\" />\n\n```\n在上面的样式规则中:\n\n1.选择器用于指定CSS样式作用的HTML对象，花括号内是对该对象设置的具体样式。\n2.属性和属性值以“键值对”的形式出现。\n3.属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。\n4.属性和属性值之间用英文“:”连接。\n5.多个“键值对”之间用英文“;”进行区分。\n可以用段落 和 表格的对齐的演示。\n```\n\n# CSS 字体样式属性\n\n## font-size:字号大小\n\nfont-size 属性用于设置字号，该属性的值可以使用相对长度单位，也可以使用绝对长度单位。其中，相对长度单位比较常用，推荐使用像素单位 px，绝对长度单位使用较少。具体如下：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/dd.png\" />\n\n## font-family:字体\n\nfont-family 属性用于设置字体。网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑，可以使用如下 CSS 样式代码：\n\np{ font-family:\"微软雅黑\";}\n\n可以同时指定多个字体，中间以逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体。\n\n> <img src=\"https://zclzone.gitee.io/resource/image/blog/media/good.png\" />常用技巧：\n\n```\n1. 现在网页中普遍使用14px+。\n2. 尽量使用偶数的数字字号。ie6等老式浏览器支持奇数会有bug。\n3. 各种字体之间必须使用英文状态下的逗号隔开。\n4. 中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。\n5. 如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: \"Times New Roman\";。\n6. 尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。\n```\n\n## CSS Unicode 字体\n\n在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。xp 系统不支持 类似微软雅黑的中文。\n\n方案一： 你可以使用英文来替代。 比如 font-family:\"Microsoft Yahei\"。\n\n方案二： 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。\nfont-family: \"\\5FAE\\8F6F\\96C5\\9ED1\"，表示设置字体为“微软雅黑”。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/shs.png\" />\n\n可以通过 escape() 来测试属于什么字体。\n\n| 字体名称     | 英文名称        | Unicode 编码         |\n| ------------ | --------------- | -------------------- |\n| 宋体         | SimSun          | \\5B8B\\4F53           |\n| 新宋体       | NSimSun         | \\65B0\\5B8B\\4F53      |\n| 黑体         | SimHei          | \\9ED1\\4F53           |\n| 微软雅黑     | Microsoft YaHei | \\5FAE\\8F6F\\96C5\\9ED1 |\n| 楷体\\_GB2312 | KaiTi_GB2312    | \\6977\\4F53_GB2312    |\n| 隶书         | LiSu            | \\96B6\\4E66           |\n| 幼园         | YouYuan         | \\5E7C\\5706           |\n| 华文细黑     | STXihei         | \\534E\\6587\\7EC6\\9ED1 |\n| 细明体       | MingLiU         | \\7EC6\\660E\\4F53      |\n| 新细明体     | PMingLiU        | \\65B0\\7EC6\\660E\\4F53 |\n\n为了照顾不同电脑的字体安装问题，我们尽量只使用宋体和微软雅黑中文字体\n\n## font-weight:字体粗细\n\n字体加粗除了用 b 和 strong 标签之外，可以使用 CSS 来实现，但是 CSS 是没有语义的。\n\n```html\nfont-weight属性用于定义字体的粗细，其可用属性值：normal、bold、bolder、lighter、100~900（100的整数倍）。\n```\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/good.png\" />小技巧：\n\n```css\n数字 400 等价于 normal，而 700 等价于 bold。  但是我们更喜欢用数字来表示。\n```\n\n## font-style:字体风格\n\n字体倾斜除了用 i 和 em 标签之外，可以使用 CSS 来实现，但是 CSS 是没有语义的。\n\nfont-style 属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：\n\nnormal：默认值，浏览器会显示标准的字体样式。\n\nitalic：浏览器会显示斜体的字体样式。\n\noblique：浏览器会显示倾斜的字体样式。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/good.png\" />小技巧：\n\n```\n平时我们很少给文字加斜体，反而喜欢给斜体标签（em，i）改为普通模式。\n```\n\n## font:综合设置字体样式 (重点)\n\nfont 属性用于对字体样式进行综合设置，其基本语法格式如下：\n\n```css\n选择器 {\n  font: font-style font-weight font-size/line-height font-family;\n}\n```\n\n```\n使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开。\n\n注意：其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。\n\n```\n\n# 开发者工具（chrome）\n\n此工具是我们的必备工具，以后代码出了问题，我们首先第一反应就是：\n\n“按 F12”或者是 “shift+ctrl+i” 打开 开发者工具。\n\n菜单： 右击网页空白出---查看\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/chrome.png\" />\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/good.png\" />小技巧：\n\n1. ctrl+滚轮 可以 放大开发者工具代码大小。\n2. 左边是 HTML 元素结构 右边是 CSS 样式。\n3. 右边 CSS 样式可以改动数值和颜色查看更改后效果。\n\n# 选择器（重点）\n\n要想将 CSS 样式应用于特定的 HTML 元素，首先需要找到该目标元素。在 CSS 中，执行这一任务的样式规则部分被称为选择器（选择符）。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/ax.png\" />\n\n如上图所以，要把里面的小黄人分为 2 组，最快的方法怎办？\n\n很多， 比如 一只眼睛的一组，剩下的一组\n\n这就用到基础选择器组：\n\n## 标签选择器（元素选择器）\n\n标签选择器是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。其基本语法格式如下：\n\n```\n标签名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }  或者\n元素名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n```\n\n标签选择器最大的优点是能快速为页面中同类型的标签统一样式，同时这也是他的缺点，不能设计差异化样式。\n\n课堂案例：\n\n传智简介\n\n## 类选择器\n\n类选择器使用“.”（英文点号）进行标识，后面紧跟类名，其基本语法格式如下：\n\n```\n.类名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n```\n\n```\n 标签调用的时候用 class=“类名”  即可。\n```\n\n类选择器最大的优势是可以为元素对象定义单独或相同的样式。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/good.png\" />小技巧：\n\n```\n1.长名称或词组可以使用中横线来为选择器命名。\n2.不建议使用“_”下划线来命名CSS选择器。\n```\n\n​ 输入的时候少按一个 shift 键;\n　浏览器兼容问题 (比如使用*tips 的选择器命名，在 IE6 是无效的)\n　能良好区分 JavaScript 变量命名(JS 变量命名是用“*”)\n\n```\n3.不要纯数字、中文等命名， 尽量使用英文字母来表示。\n```\n\n猜谜底游戏：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/midi.png\" width=\"450\" /> 你猜？\n\n命名规范： 见附件（Web 前端开发规范手册.doc）\n\n命名是我们通俗约定的，但是没有规定必须用这些常用的命名。\n\n课堂案例：\n\n <img src=\"https://zclzone.gitee.io/resource/image/blog/media/go.png\" />\n\n```html\n<head>\n  <meta charset=\"utf-8\" />\n  <style>\n    span {\n      font-size: 100px;\n    }\n    .blue {\n      color: blue;\n    }\n    .red {\n      color: red;\n    }\n    .orange {\n      color: orange;\n    }\n    .green {\n      color: green;\n    }\n  </style>\n</head>\n<body>\n  <span class=\"blue\">G</span>\n  <span class=\"red\">o</span>\n  <span class=\"orange\">o</span>\n  <span class=\"blue\">g</span>\n  <span class=\"green\">l</span>\n  <span class=\"red\">e</span>\n</body>\n```\n\n## 多类名选择器\n\n我们可以给标签指定多个类名，从而达到更多的选择目的。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/lei.png\" />\n\n注意：\n\n```\n1. 样式显示效果跟HTML元素中的类名先后顺序没有关系,受CSS样式书写的上下顺序有关。\n2. 各个类名中间用空格隔开。\n```\n\n多类名选择器在后期布局比较复杂的情况下，还是较多使用的。\n\n```html\n<div class=\"pink fontWeight font20\">亚瑟</div>\n<div class=\"font20\">刘备</div>\n<div class=\"font14 pink\">安其拉</div>\n<div class=\"font14\">貂蝉</div>\n```\n\n## id 选择器\n\nid 选择器使用“#”进行标识，后面紧跟 id 名，其基本语法格式如下：\n\n```\n#id名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n```\n\n该语法中，id 名即为 HTML 元素的 id 属性值，大多数 HTML 元素都可以定义 id 属性，元素的 id 值是唯一的，只能对应于文档中某一个具体的元素。\n\n用法基本和类选择器相同。\n\n## id 选择器和类选择器区别\n\nW3C 标准规定，在同一个页面内，不允许有相同名字的 id 对象出现，但是允许相同名字的 class。\n\n类选择器（class） 好比人的名字， 是可以多次重复使用的， 比如 张伟 王伟 李伟 李娜\n\nid 选择器 好比人的身份证号码， 全中国是唯一的， 不得重复。 只能使用一次。\n\n**_id 选择器和类选择器最大的不同在于 使用次数上。_**\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/zfb.jpg\" />\n\n## 通配符选择器\n\n通配符选择器用“\\*”号表示，他是所有选择器中作用范围最广的，能匹配页面中所有的元素。其基本语法格式如下：\n\n```\n* { 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n```\n\n例如下面的代码，使用通配符选择器定义 CSS 样式，清除所有 HTML 标记的默认边距。\n\n```css\n* {\n  margin: 0; /* 定义外边距*/\n  padding: 0; /* 定义内边距*/\n}\n```\n\n注意：\n\n这个通配符选择器，就像我们的电影明星中的梦中情人， 想想它就好了，但是它不会和你过日子。\n\n## 伪类选择器\n\n伪类选择器用于向某些选择器添加特殊的效果。比如给链接添加特殊效果， 比如可以选择 第 1 个，第 n 个元素。\n\n```css\n为了和我们刚才学的类选择器相区别， 类选择器是一个点 比如 .demo {\n}\n而我们的伪类 用 2个点 就是 冒号 比如 :link {\n}\n```\n\n### 链接伪类选择器\n\n- :link /_ 未访问的链接 _/\n- :visited /_ 已访问的链接 _/\n- :hover /_ 鼠标移动到链接上 _/\n- :active /_ 选定的链接 _/\n\n注意写的时候，他们的顺序尽量不要颠倒 按照 lvha 的顺序。 love hate 爱上了讨厌 记忆法 或者 lv 包包 非常 hao\n\n```css\na {\n  /* a是标签选择器  所有的链接 */\n  font-weight: 700;\n  font-size: 16px;\n  color: gray;\n}\na:hover {\n  /* :hover 是链接伪类选择器 鼠标经过 */\n  color: red; /*  鼠标经过的时候，由原来的 灰色 变成了红色 */\n}\n```\n\n### 结构(位置)伪类选择器（CSS3)\n\n- :first-child :选取属于其父元素的首个子元素的指定选择器\n- :last-child :选取属于其父元素的最后一个子元素的指定选择器\n- :nth-child(n) ： 匹配属于其父元素的第 N 个子元素，不论元素的类型\n- :nth-last-child(n) ：选择器匹配属于其元素的第 N 个子元素的每个元素，不论元素的类型，从最后一个子元素开始计数。\n  n 可以是数字、关键词或公式\n- ​\n\n```css\nli:first-child {\n  /*  选择第一个孩子 */\n  color: pink;\n}\nli:last-child {\n  /* 最后一个孩子 */\n  color: purple;\n}\nli:nth-child(4) {\n  /* 选择第4个孩子  n  代表 第几个的意思 */\n  color: skyblue;\n}\n```\n\n### 目标伪类选择器(CSS3)\n\n:target 目标伪类选择器 :选择器可用于选取当前活动的目标元素\n\n```css\n:target {\n  color: red;\n  font-size: 30px;\n}\n```\n\n# CSS 注释\n\n```\nCSS规则是使用     /*  需要注释的内容  */  进行注释的，即在需要注释的内容前使用 “/*” 标记开始注释，在内容的结尾使用 “*/”结束。\n```\n\n例如：\n\n```css\np {\n  font-size: 14px; /* 所有的字体是14像素大小*/\n}\n```\n\n# CSS 外观属性\n\n## color:文本颜色\n\ncolor 属性用于定义文本的颜色，其取值方式有如下 3 种：\n\n1.预定义的颜色值，如 red，green，blue 等。\n\n2.十六进制，如#FF0000，#FF6600，#29D794 等。实际工作中，十六进制是最常用的定义颜色的方式。\n\n3.RGB 代码，如红色可以表示为 rgb(255,0,0)或 rgb(100%,0%,0%)。\n\n需要注意的是，如果使用 RGB 代码的百分比颜色值，取值为 0 时也不能省略百分号，必须写为 0%。\n\n## line-height:行间距\n\nine-height 属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。line-height 常用的属性值单位有三种，分别为像素 px，相对值 em 和百分比%，实际工作中使用最多的是像素 px\n\n一般情况下，行距比字号大 7.8 像素左右就可以了。\n\n## text-align:水平对齐方式\n\n```\ntext-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性。其可用属性值如下：\n```\n\nleft：左对齐（默认值）\n\nright：右对齐\n\ncenter：居中对齐\n\n## text-indent:首行缩进\n\ntext-indent 属性用于设置首行文本的缩进，其属性值可为不同单位的数值、em 字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值, 建议使用 em 作为设置单位。\n\n1em 就是一个字的宽度 如果是汉字的段落， 1em 就是一个汉字的宽度\n\n## letter-spacing:字间距\n\nletter-spacing 属性用于定义字间距，所谓字间距就是字符与字符之间的空白。其属性值可为不同单位的数值，允许使用负值，默认为 normal。\n\n## word-spacing:单词间距\n\nword-spacing 属性用于定义英文单词之间的间距，对中文字符无效。和 letter-spacing 一样，其属性值可为不同单位的数值，允许使用负值，默认为 normal。\n\nword-spacing 和 letter-spacing 均可对英文进行设置。不同的是 letter-spacing 定义的为字母之间的间距，而 word-spacing 定义的为英文单词之间的间距。\n\n## 颜色半透明(css3)\n\n文字颜色到了 CSS3 我们可以采取半透明的格式了语法格式如下：\n\n```css\n    color: rgba(r,g,b,a)  a 是alpha  透明的意思  取值范围 0~1之间    color: rgba(0,0,0,0.3)\n```\n\n## 文字阴影(CSS3)\n\n以后我们可以给我们的文字添加阴影效果了 Shadow 影子\n\n```css\ntext-shadow: 水平位置 垂直位置 模糊距离 阴影颜色;\n```\n\n![1498467502625](https://zclzone.gitee.io/resource/image/blog/media/1498467502625.png)\n\n1. 前两项是必须写的。 后两项可以选写。\n\n![1498467519665](https://zclzone.gitee.io/resource/image/blog/media/1498467519665.png)\n\n# sublime 快捷方式\n\nsublime 可以快速提高我们代码的书写方式\n\n1. 生成标签 直接输入标签名 按 tab 键即可 比如 div 然后 tab 键， 就可以生成 <div></div>\n\n2. 如果想要生成多个相同标签 加上 * 就可以了 比如 div*3 就可以快速生成 3 个 div\n\n3. 如果有父子级关系的标签，可以用 > 比如 ul > li 就可以了\n\n4. 如果有兄弟关系的标签，用 + 就可以了 比如 div+p\n\n5. 如果生成带有类名或者 id 名字的， 直接写 .demo 或者 #two tab 键就可以了\n\n   ​\n\n# 引入 CSS 样式表（书写位置）\n\nCSS 可以写到那个位置？ 是不是一定写到 html 文件里面呢？\n\n## 内部样式表\n\n内嵌式是将 CSS 代码集中写在 HTML 文档的 head 头部标签中，并且用 style 标签定义，其基本语法格式如下：\n\n```html\n<head>\n  <style type=\"text/CSS\">\n    选择器 {\n      属性1: 属性值1;\n      属性2: 属性值2;\n      属性3: 属性值3;\n    }\n  </style>\n</head>\n```\n\n语法中，style 标签一般位于 head 标签中 title 标签之后，也可以把他放在 HTML 文档的任何地方。\n\ntype=\"text/CSS\" 在 html5 中可以省略， 写上也比较符合规范， 所以这个地方可以写也可以省略。\n\n## 行内式（内联样式）\n\n内联样式，又有人称行内样式、行间样式、内嵌样式。是通过标签的 style 属性来设置元素的样式，其基本语法格式如下：\n\n```html\n<标签名 style=\"属性1:属性值1; 属性2:属性值2; 属性3:属性值3;\"> 内容 </标签名>\n```\n\n语法中 style 是标签的属性，实际上任何 HTML 标签都拥有 style 属性，用来设置行内式。其中属性和值的书写规范与 CSS 样式规则相同，行内式只对其所在的标签及嵌套在其中的子标签起作用。\n\n## 外部样式表（外链式）\n\n链入式是将所有的样式放在一个或多个以.CSS 为扩展名的外部样式表文件中，通过 link 标签将外部样式表文件链接到 HTML 文档中，其基本语法格式如下：\n\n```html\n<head>\n  <link href=\"CSS文件的路径\" type=\"text/CSS\" rel=\"stylesheet\" />\n</head>\n```\n\n注意： link 是个单标签哦!!!\n\n该语法中，link 标签需要放在 head 头部标签中，并且必须指定 link 标签的三个属性，具体如下：\n\n```\nhref：定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。\ntype：定义所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。\nrel：定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。\n```\n\n## 三种样式表总结\n\n| 样式表     | 优点                     | 缺点                     | 使用情况       | 控制范围           |\n| ---------- | ------------------------ | ------------------------ | -------------- | ------------------ |\n| 行内样式表 | 书写方便，权重高         | 没有实现样式和结构相分离 | 较少           | 控制一个标签（少） |\n| 内部样式表 | 部分结构和样式相分离     | 没有彻底分离             | 较多           | 控制一个页面（中） |\n| 外部样式表 | 完全实现结构和样式相分离 | 需要引入                 | 最多，强烈推荐 | 控制整个站点（多） |\n\n# 标签显示模式（display）\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/people.png\" />\n\n非洲黑人： 皮肤内黑色素含量高，以吸收阳光中的紫外线，保护皮肤内部结构免遭损害，头发象羊毛一样卷曲，使每根卷发周围都有许多空隙，空隙充满空气，卷发有隔热作用。\n\n欧洲白人： 生活寒带或着是说常年温度较低的地缘,加上年日照时间少，身体的黑色素沉淀比较少``所以出现皮肤、发色、瞳晕都呈现浅色\n\n传智黄人： 我中间的。。。 <img src=\"https://zclzone.gitee.io/resource/image/blog/media/h.jpg\" alt=\"\" />\n\n最重要的总结： 是为了更好的适应环境而完成的自然选择。\n\n同理，我们网页的标签非常多，再不同地方会用到不同类型的标签，以便更好的完成我们的网页。\n\n标签的类型(显示模式)\n\nHTML 标签一般分为块标签和行内标签两种类型，它们也称块元素和行内元素。具体如下：\n\n## 块级元素(block-level)\n\n每个块元素通常都会独自占据一整行或多整行，可以对其设置宽度、高度、对齐等属性，常用于网页布局和网页结构的搭建。\n\n```\n常见的块元素有<h1>~<h6>、<p>、<div>、<ul>、<ol>、<li>等，其中<div>标签是最典型的块元素。\n```\n\n  <img src=\"https://zclzone.gitee.io/resource/image/blog/media/xtf.jpg\" />\n\n块级元素的特点：\n\n（1）总是从新行开始\n\n（2）高度，行高、外边距以及内边距都可以控制。\n\n（3）宽度默认是容器的 100%\n\n（4）可以容纳内联元素和其他块元素。\n\n## 行内元素(inline-level)\n\n行内元素（内联元素）不占有独立的区域，仅仅靠自身的字体大小和图像尺寸来支撑结构，一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式。\n\n```\n常见的行内元素有<a>、<strong>、<b>、<em>、<i>、<del>、<s>、<ins>、<u>、<span>等，其中<span>标签最典型的行内元素。\n```\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/wf.jpg\" /> 我一样重要\n\n行内元素的特点：\n\n（1）和相邻行内元素在一行上。\n\n（2）高、宽无效，但水平方向的 padding 和 margin 可以设置，垂直方向的无效。\n\n（3）默认宽度就是它本身内容的宽度。\n\n（4）行内元素只能容纳文本或则其他行内元素。（a 特殊）\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/w.jpg\" /> 注意：\n\n1. 只有 文字才 能组成段落 因此 p 里面不能放块级元素，同理还有这些标签 h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。\n2. 链接里面不能再放链接。\n\n## 块级元素和行内元素区别\n\n```\n块级元素的特点：\n（1）总是从新行开始\n（2）高度，行高、外边距以及内边距都可以控制。\n（3）宽度默认是容器的100%\n（4）可以容纳内联元素和其他块元素。\n```\n\n```\n行内元素的特点：\n（1）和相邻行内元素在一行上。\n（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。\n（3）默认宽度就是它本身内容的宽度。\n（4）行内元素只能容纳文本或则其他行内元素。\n```\n\n## 行内块元素（inline-block）\n\n```\n在行内元素中有几个特殊的标签——<img />、<input />、<td>，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。\n\n行内块元素的特点：\n（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。\n（2）默认宽度就是它本身内容的宽度。\n（3）高度，行高、外边距以及内边距都可以控制。\n```\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/lyc.jpg\" width=\"400\" />\n\n## 标签显示模式转换 display\n\n块转行内：display:inline;\n\n行内转块：display:block;\n\n块、行内元素转换为行内块： display: inline-block;\n\n此阶段，我们只需关心这三个，其他的是我们后面的工作。\n\n# CSS 复合选择器\n\n复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的,目的是为了可以选择更准确更精细的目标元素标签。\n\n## 交集选择器\n\n交集选择器由两个选择器构成，其中第一个为标签选择器，第二个为 class 选择器，两个选择器之间不能有空格，如 h3.special。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/jiao.png\" />\n\n**记忆技巧：**\n\n交集选择器 是 并且的意思。 即...又...的意思\n\n```\n比如：   p.one   选择的是： 类名为 .one  的 段落标签。\n```\n\n用的相对来说比较少，不太建议使用。\n\n## 并集选择器\n\n并集选择器（CSS 选择器分组）是各个选择器通过<strong style=\"color:#f00\">逗号</strong>连接而成的，任何形式的选择器（包括标签选择器、class 类选择器 id 选择器等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，或部分相同，就可以利用并集选择器为它们定义相同的 CSS 样式。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/bing.png\" />\n\n记忆技巧：\n\n并集选择器 和 的意思， 就是说，只要逗号隔开的，所有选择器都会执行后面样式。\n\n```\n比如  .one, p , #test {color: #F00;}  表示   .one 和 p  和 #test 这三个选择器都会执行颜色为红色。  通常用于集体声明。\n```\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/hu.gif\" /> 他和他，在一起， 在一起 一起的意思\n\n## 后代选择器\n\n后代选择器又称为包含选择器，用来选择元素或元素组的后代，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/hou.png\" />\n\n子孙后代都可以这么选择。 或者说，它能选择任何包含在内 的标签。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/li.png\" />\n\n## 子元素选择器\n\n子元素选择器只能选择作为某元素子元素的元素。其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 &gt; 进行连接，注意，符号左右两侧各保留一个空格。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/zi1.png\" />\n\n白话： 这里的子 指的是 亲儿子 不包含孙子 重孙子之类。\n\n```\n 比如：  .demo > h3 {color: red;}   说明  h3 一定是demo 亲儿子。  demo 元素包含着h3。\n```\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/san.jpg\" />\n\n## 测试题\n\n```html\n<div class=\"nav\">\n  <!-- 主导航栏 -->\n  <ul>\n    <li><a href=\"#\">公司首页</a></li>\n    <li><a href=\"#\">公司简介</a></li>\n    <li><a href=\"#\">公司产品</a></li>\n    <li>\n      <a href=\"#\">联系我们</a>\n      <ul>\n        <li><a href=\"#\">公司邮箱</a></li>\n        <li><a href=\"#\">公司电话</a></li>\n      </ul>\n    </li>\n  </ul>\n</div>\n<div class=\"sitenav\">\n  <!-- 侧导航栏 -->\n  <div class=\"site-l\">左侧侧导航栏</div>\n  <div class=\"site-r\"><a href=\"#\">登录</a></div>\n</div>\n```\n\n在不修改以上代码的前提下，完成以下任务：\n\n1. 链接 登录 的颜色为红色,同时主导航栏里面的所有的链接改为蓝色 (简单)\n\n2. 主导航栏和侧导航栏里面文字都是 14 像素并且是微软雅黑。（中等)\n\n3. 主导航栏里面的一级菜单链接文字颜色为绿色。（难)\n\n   ​\n\n## 属性选择器\n\n选取标签带有某些特殊属性的选择器 我们成为属性选择器\n\n```css\n/* 获取到 拥有 该属性的元素 */\ndiv[class^='font'] {\n  /*  class^=font 表示 font 开始位置就行了 */\n  color: pink;\n}\ndiv[class$='footer'] {\n  /*  class$=footer 表示 footer 结束位置就行了 */\n  color: skyblue;\n}\ndiv[class*='tao'] {\n  /* class*=tao  *=  表示tao 在任意位置都可以 */\n  color: green;\n}\n```\n\n```html\n<div class=\"font12\">属性选择器</div>\n<div class=\"font12\">属性选择器</div>\n<div class=\"font24\">属性选择器</div>\n<div class=\"font24\">属性选择器</div>\n<div class=\"font24\">属性选择器</div>\n<div class=\"24font\">属性选择器123</div>\n<div class=\"sub-footer\">属性选择器footer</div>\n<div class=\"jd-footer\">属性选择器footer</div>\n<div class=\"news-tao-nav\">属性选择器</div>\n<div class=\"news-tao-header\">属性选择器</div>\n<div class=\"tao-header\">属性选择器</div>\n```\n\n## 伪元素选择器（CSS3)\n\n1. E::first-letter 文本的第一个单词或字（如中文、日文、韩文等）\n2. E::first-line 文本第一行；\n3. E::selection 可改变选中文本的样式；\n\n```css\np::first-letter {\n  font-size: 20px;\n  color: hotpink;\n}\n\n/* 首行特殊样式 */\np::first-line {\n  color: skyblue;\n}\n\np::selection {\n  /* font-size: 50px; */\n  color: orange;\n}\n```\n\n4、E::before 和 E::after\n\n在 E 元素内部的开始位置和结束位创建一个元素，该元素为行内元素，且必须要结合 content 属性使用。\n\n```css\ndiv::befor {\n  content: '开始';\n}\ndiv::after {\n  content: '结束';\n}\n```\n\nE:after、E:before 在旧版本里是伪元素，CSS3 的规范里“:”用来表示伪类，“::”用来表示伪元素，但是在高版本浏览器下 E:after、E:before 会被自动识别为 E::after、E::before，这样做的目的是用来做兼容处理。\n\nE:after、E:before 后面的练习中会反复用到，目前只需要有个大致了解\n\n\":\" 与 \"::\" 区别在于区分伪类和伪元素\n\n# CSS 书写规范\n\n开始就形成良好的书写规范，是你专业化的开始。\n\n## 空格规范\n\n【强制】 选择器 与 { 之间必须包含空格。\n\n示例： .selector { }\n\n【强制】 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。\n\n示例：\n\nfont-size: 12px;\n\n## 选择器规范\n\n【强制】 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。\n\n示例：\n\n```\n/* good */\n.post,\n.page,\n.comment {\n    line-height: 1.5;\n}\n\n\n/* bad */\n.post, .page, .comment {\n    line-height: 1.5;\n}\n```\n\n【建议】 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。\n\n示例：\n\n```\n/* good */\n#username input {}\n.comment .avatar {}\n\n/* bad */\n.page .header .login #username input {}\n.comment div * {}\n```\n\n## 属性规范\n\n【强制】 属性定义必须另起一行。\n\n示例：\n\n```\n/* good */\n.selector {\n    margin: 0;\n    padding: 0;\n}\n\n/* bad */\n.selector { margin: 0; padding: 0; }\n```\n\n【强制】 属性定义后必须以分号结尾。\n\n示例：\n\n```\n/* good */\n.selector {\n    margin: 0;\n}\n\n/* bad */\n.selector {\n    margin: 0\n}\n```\n\n# CSS 背景(background)\n\nCSS 可以添加背景颜色和背景图片，以及来进行图片设置。\n\n| background-color                                            | 背景颜色         |\n| ----------------------------------------------------------- | ---------------- |\n| background-image                                            | 背景图片地址     |\n| background-repeat                                           | 是否平铺         |\n| background-position                                         | 背景位置         |\n| background-attachment                                       | 背景固定还是滚动 |\n| 背景的合写（复合属性）                                      |                  |\n| background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置 |                  |\n\n## 背景图片(image)\n\n语法：\n\n```css\nbackground-image: none | url (url);\n```\n\n参数：\n\nnone : 　无背景图（默认的）\nurl : 　使用绝对或相对地址指定背景图像\n\nbackground-image 属性允许指定一个图片展示在背景中（只有 CSS3 才可以多背景）可以和 background-color 连用。 如果图片不重复地话，图片覆盖不到地地方都会被背景色填充。 如果有背景图片平铺，则会覆盖背景颜色。\n\n小技巧： 我们提倡 背景图片后面的地址，url 不要加引号。\n\n## 背景平铺（repeat）\n\n语法：\n\n```css\nbackground-repeat: repeat | no-repeat | repeat-x | repeat-y;\n```\n\n参数：\n\nrepeat : 　背景图像在纵向和横向上平铺（默认的）\n\nno-repeat : 　背景图像不平铺\n\nrepeat-x : 　背景图像在横向上平铺\n\nrepeat-y : 　背景图像在纵向平铺\n\n设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。\n\nrepeat-x : 　背景图像在横向上平铺\n\nrepeat-y : 　背景图像在纵向平铺\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/y.png\" width=\"600\"/>\n\n设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/q.png\" width=\"600\"/>\n\n## 背景位置(position)\n\n语法：\n\n```css\nbackground-position : length || length\n\nbackground-position : position || position\n```\n\n参数：\n\nlength : 　百分数 | 由浮点数字和单位标识符组成的长度值。请参阅长度单位\nposition : 　 top | center | bottom | left | center | right\n\n说明：\n\n设置或检索对象的背景图像位置。必须先指定 background-image 属性。默认值为：(0% 0%)。\n如果只指定了一个值，该值将用于横坐标。纵坐标将默认为 50%。第二个值将用于纵坐标。\n\n注意：\n\n1. position 后面是 x 坐标和 y 坐标。 可以使用方位名词或者 精确单位。\n2. 如果和精确单位和方位名字混合使用，则必须是 x 坐标在前，y 坐标后面。比如 background-position: 15px top; 则 15px 一定是 x 坐标 top 是 y 坐标。\n\n实际工作用的最多的，就是背景图片居中对齐了。\n\n## 背景附着\n\n语法：\n\n```css\nbackground-attachment: scroll | fixed;\n```\n\n参数：\n\nscroll : 　背景图像是随对象内容滚动\nfixed : 　背景图像固定\n\n说明：\n\n设置或检索背景图像是随对象内容滚动还是固定的。\n\n## 背景简写\n\nbackground 属性的值的书写顺序官方并没有强制标准的。为了可读性，建议大家如下写：\n\nbackground:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置\n\n```css\nbackground: transparent url(image.jpg) repeat-y scroll 50% 0;\n```\n\n## 背景透明(CSS3)\n\nCSS3 支持背景半透明的写法语法格式是:\n\n```css\nbackground: rgba(0, 0, 0, 0.3);\n```\n\n最后一个参数是 alpha 透明度 取值范围 0~1 之间\n\n注意： 背景半透明是指盒子背景半透明， 盒子里面的内容不收影响。\n\n## 背景缩放(CSS3)\n\n通过 background-size 设置背景图片的尺寸，就像我们设置 img 的尺寸一样，在移动 Web 开发中做屏幕适配应用非常广泛。\n\n其参数设置如下：\n\na) 可以设置长度单位(px)或百分比（设置百分比时，参照盒子的宽高）\n\nb) 设置为 cover 时，会自动调整缩放比例，保证图片始终填充满背景区域，如有溢出部分则会被隐藏。我们平时用的 cover 最多\n\nc) 设置为 contain 会自动调整缩放比例，保证图片始终完整显示在背景区域。\n\n```css\nbackground-image: url('images/gyt.jpg');\nbackground-size: 300px 100px;\n/* background-size: contain; */\n/* background-size: cover; */\n```\n\n## 多背景(CSS3)\n\n以逗号分隔可以设置多背景，可用于自适应布局 做法就是 用逗号隔开就好了。\n\n- 一个元素可以设置多重背景图像。\n- 每组属性间使用逗号分隔。\n- 如果设置的多重背景图之间存在着交集（即存在着重叠关系），前面的背景图会覆盖在后面的背景图之上。\n- 为了避免背景色将图像盖住，背景色通常都定义在最后一组上，\n\n```css\nbackground: url(test1.jpg) no-repeat scroll 10px 20px/50px 60px, url(test1.jpg)\n    no-repeat scroll 10px 20px/70px 90px,\n  url(test1.jpg) no-repeat scroll 10px 20px/110px 130px c #aaa;\n```\n\n- ​\n\n## 凹凸文字\n\n```css\n<head>\n        <meta charset=\"utf-8\">\n        <style>\n        body {\n        \tbackground-color: #ccc;\n        }\n\t\tdiv {\n\t\t\tcolor: #ccc;\n\t\t\tfont: 700 80px \"微软雅黑\";\n\t\t}\n\t\tdiv:first-child {\n\t\t\t/* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */\n\t\t\ttext-shadow: 1px 1px 1px #000, -1px -1px 1px #fff;\n\t\t}\n\t\tdiv:last-child {\n\t\t\t/* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */\n\t\t\ttext-shadow: -1px -1px 1px #000, 1px 1px 1px #fff;\n\t\t}\n\n        </style>\n    </head>\n    <body>\n    <div>我是凸起的文字</div>\n    <div>我是凹下的文字</div>\n    </body>\n```\n\n![1498467533412](https://zclzone.gitee.io/resource/image/blog/media/1498467533412.png)\n\n## 导航栏案例\n\n### 文本的装饰\n\ntext-decoration 通常我们用于给链接修改装饰效果\n\n| 值           | 描述                                          |\n| ------------ | --------------------------------------------- |\n| none         | 默认。定义标准的文本。                        |\n| underline    | 定义文本下的一条线。下划线 也是我们链接自带的 |\n| overline     | 定义文本上的一条线。                          |\n| line-through | 定义穿过文本下的一条线。                      |\n|              |                                               |\n|              |                                               |\n\n**使用技巧**：在一行内的盒子内，我们设定行高等于盒子的高度，就可以使文字垂直居中。\n\n```html\n<head>\n  <meta charset=\"utf-8\" />\n  <style>\n    body {\n      background-color: #000;\n    }\n    a {\n      width: 200px;\n      height: 50px;\n      /* background-color: orange; */\n      display: inline-block; /* 把a 行内元素转换为行内块元素 */\n      text-align: center; /* 文字水平居中 */\n      line-height: 50px; /* 我们设定行高等于盒子的高度，就可以使文字垂直居中 */\n      color: #fff;\n      font-size: 22px;\n      text-decoration: none; /* 取消下划线 文本装饰 */\n    }\n    a:hover {\n      /* 鼠标经过 给我们的链接添加背景图片*/\n      background: url(images/h.png) no-repeat;\n    }\n  </style>\n</head>\n<body>\n  <a href=\"#\">专区说明</a>\n  <a href=\"#\">申请资格</a>\n  <a href=\"#\">兑换奖励</a>\n  <a href=\"#\">下载游戏</a>\n</body>\n```\n\n# CSS 三大特性\n\n层叠 继承 优先级 是我们学习 CSS 必须掌握的三个特性。\n\n## CSS 层叠性\n\n所谓层叠性是指多种 CSS 样式的叠加。\n\n是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉\n\n比如先给某个标签指定了内部文字颜色为红色，接着又指定了颜色为蓝色，此时出现一个标签指定了相同样式不同值的情况，这就是样式冲突。\n\n一般情况下，如果出现样式冲突，则会按照 CSS 书写的顺序，以最后的样式为准。\n\n1. 样式冲突，遵循的原则是就近原则。 那个样式离着结构近，就执行那个样式。\n2. 样式不冲突，不会层叠\n\n```\nCSS最后的执行口诀：  长江后浪推前浪，前浪死在沙滩上。\n```\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/hai.gif\"  width=\"600\" height=\"400\" />\n\n## CSS 继承性\n\n所谓继承性是指书写 CSS 样式表时，子标签会继承父标签的某些样式，如文本颜色和字号。想要设置一个可继承的属性，只需将它应用于父元素即可。\n\n简单的理解就是： 子承父业。\n\n```\nCSS最后的执行口诀：  龙生龙，凤生凤，老鼠生的孩子会打洞。\n```\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/shu.gif\" />\n\n注意：\n\n```\n恰当地使用继承可以简化代码，降低CSS样式的复杂性。子元素可以继承父元素的样式（text-，font-，line-这些元素开头的都可以继承，以及color属性）\n```\n\n## CSS 优先级\n\n定义 CSS 样式时，经常出现两个或更多规则应用在同一元素上，这时就会出现优先级的问题。\n\n在考虑权重时，初学者还需要注意一些特殊的情况，具体如下：\n\n```\n继承样式的权重为0。即在嵌套结构中，不管父元素样式的权重多大，被子元素继承时，他的权重都为0，也就是说子元素定义的样式会覆盖继承来的样式。\n\n行内样式优先。应用style属性的元素，其行内样式的权重非常高，可以理解为远大于100。总之，他拥有比上面提高的选择器都大的优先级。\n\n权重相同时，CSS遵循就近原则。也就是说靠近元素的样式具有最大的优先级，或者说排在最后的样式优先级最大。\n\nCSS定义了一个!important命令，该命令被赋予最大的优先级。也就是说不管权重如何以及样式位置的远近，!important都具有最大优先级。\n```\n\n### CSS 特殊性（Specificity）\n\n关于 CSS 权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity，我们称为 CSS 特性或称非凡性，它是一个衡量 CSS 值优先级的一个标准 具体规范入如下：\n\nspecificity 用一个四位的数 字串(CSS2 是三位)来表示，更像四个级别，值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。\n\n| 继承或者\\* 的贡献值      | 0,0,0,0  |\n| ------------------------ | -------- |\n| 每个元素（标签）贡献值为 | 0,0,0,1  |\n| 每个类，伪类贡献值为     | 0,0,1,0  |\n| 每个 ID 贡献值为         | 0,1,0,0  |\n| 每个行内样式贡献值       | 1,0,0,0  |\n| 每个!important 贡献值    | ∞ 无穷大 |\n\n权重是可以叠加的\n\n比如的例子：\n\n```\ndiv ul  li   ------>      0,0,0,3\n\n.nav ul li   ------>      0,0,1,2\n\na:hover      -----—>      0,0,1,1\n\n.nav a       ------>      0,0,1,1\n\n#nav p       ----->       0,1,0,1\n```\n\n​\n\n​\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/w.jpg\" /> 注意：\n\n1.数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 =0,0,0,10 而不是 0,0, 1, 0， 所以不会存在 10 个 div 能赶上一个类选择器的情况。\n\n2. 继承的 权重是 0\n\n总结优先级：\n\n1. 使用了 !important 声明的规则。\n2. 内嵌在 HTML 元素的 style 属性里面的声明。\n3. 使用了 ID 选择器的规则。\n4. 使用了类选择器、属性选择器、伪元素和伪类选择器的规则。\n5. 使用了元素选择器的规则。\n6. 只包含一个通用选择器的规则。\n7. 同一类选择器则遵循就近原则。\n\n```\n总结：权重是优先级的算法，层叠是优先级的表现\n```\n\n# 盒子模型（CSS 重点）\n\n其实，CSS 就三个大模块： 盒子模型 、 浮动 、 定位，其余的都是细节。要求这三部分，无论如何也要学的非常精通。\n\n所谓盒子模型就是把 HTML 页面中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。每个矩形都由元素的内容、内边距（padding）、边框（border）和外边距（margin）组成。\n\n## 看透网页布局的本质\n\n网页布局中，我们是如何把里面的文字，图片，按照美工给我们的效果图排列的整齐有序呢？\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/t.png\" />\n\n牛奶是怎样运输，让消费者购买的呢？\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/m.jpg\" />\n\n我们说过，行内元素比如 文字 类似牛奶，也需要一个盒子把他们装起来，我们前面学过的双标签都是一个盒子。有了盒子，我们就可以随意的，自由的，摆放位置了。\n\n看透网页布局的本质： 把网页元素比如文字图片等等，放入盒子里面，然后利用 CSS 摆放盒子的过程，就是网页布局。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/t1.png\" />\n\nCSS 其实没有太多逻辑可言 ， 类似我们小时候玩的积木,我们可以自由的，随意的摆放出我们想要的效果。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/j.jpg\" width=\"300\" />\n\n## 盒子模型（Box Model）\n\n这里略过 老旧的 ie 盒子模型（IE6 以下），对不起，我都没见过 IE5 的浏览器。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/d.jpg\" />\n\n。首先，我们来看一张图，来体会下什么是盒子模型。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/box.png\"  width=\"700\" />\n\n所有的文档元素（标签）都会生成一个矩形框，我们成为元素框（element box），它描述了一个文档元素再网页布局汇总所占的位置大小。因此，<strong style=\"color: #f00;\">每个盒子除了有自己大小和位置外，还影响着其他盒子的大小和位置。</strong>\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/boxs.png\"  width=\"700\" />\n\n## 盒子边框（border）\n\n边框就是那层皮。 橘子皮。。柚子皮。。橙子皮。。。\n\n语法：\n\n```css\nborder: border-width || border-style || border-color;\n```\n\n边框属性—设置边框样式（border-style）\n\n边框样式用于定义页面中边框的风格，常用属性值如下：\n\n```\nnone：没有边框即忽略所有边框的宽度（默认值）\n\nsolid：边框为单实线(最为常用的)\n\ndashed：边框为虚线\n\ndotted：边框为点线\n\ndouble：边框为双实线\n```\n\n### 盒子边框写法总结表\n\n|              |                                                                                                            |                                                                        |\n| ------------ | ---------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------- |\n| 设置内容     | 样式属性                                                                                                   | 常用属性值                                                             |\n| 上边框       | border-top-style:样式; border-top-width:宽度;border-top-color:颜色;border-top:宽度 样式 颜色;              |                                                                        |\n| 下边框       | border-bottom-style:样式;border- bottom-width:宽度;border- bottom-color:颜色;border-bottom:宽度 样式 颜色; |                                                                        |\n| 左边框       | border-left-style:样式; border-left-width:宽度;border-left-color:颜色;border-left:宽度 样式 颜色;          |                                                                        |\n| 右边框       | border-right-style:样式;border-right-width:宽度;border-right-color:颜色;border-right:宽度 样式 颜色;       |                                                                        |\n| 样式综合设置 | border-style:上边 [右边 下边 左边];                                                                        | none 无（默认）、solid 单实线、dashed 虚线、dotted 点线、double 双实线 |\n| 宽度综合设置 | border-width:上边 [右边 下边 左边];                                                                        | 像素值                                                                 |\n| 颜色综合设置 | border-color:上边 [右边 下边 左边];                                                                        | 颜色值、#十六进制、rgb(r,g,b)、rgb(r%,g%,b%)                           |\n| 边框综合设置 | border:四边宽度 四边样式 四边颜色;                                                                         |                                                                        |\n\n### 表格的细线边框\n\n以前学过的 html 表格边框很粗，这里只需要 CSS 一句话就可以美观起来。 让我们真的相信，CSS 就是我们的白马王子（白雪公主）。\n\ntable{ border-collapse:collapse; } collapse 单词是合并的意思\n\nborder-collapse:collapse; 表示边框合并在一起。\n\n### 圆角边框(CSS3)\n\n从此以后，我们的世界不只有矩形。radius 半径（距离）\n\n语法格式：\n\n```css\nborder-radius: 左上角 右上角 右下角 左下角;\n```\n\n课堂案例:\n\n```html\n<style>\n  div {\n    width: 200px;\n    height: 200px;\n    border: 1px solid red;\n  }\n  div:first-child {\n    /* 结构伪类选择器 选亲兄弟 */\n    border-radius: 10px; /*  一个数值表示4个角都是相同的 10px 的弧度 */\n  }\n\n  div:nth-child(2) {\n    /*border-radius: 100px;    取宽度和高度 一半  则会变成一个圆形 */\n    border-radius: 50%; /*  100px   50% 取宽度和高度 一半  则会变成一个圆形 */\n  }\n\n  div:nth-child(3) {\n    border-radius: 10px 40px; /* 左上角  和 右下角  是 10px  右上角 左下角 40 对角线 */\n  }\n\n  div:nth-child(4) {\n    border-radius: 10px 40px 80px; /* 左上角 10    右上角  左下角 40   右下角80 */\n  }\n  div:nth-child(5) {\n    border-radius: 10px 40px 80px 100px; /* 左上角 10    右上角 40  右下角 80   左下角   右下角100 */\n  }\n  div:nth-child(6) {\n    border-radius: 100px;\n    height: 100px;\n  }\n  div:nth-child(7) {\n    border-radius: 100px 0;\n  }\n</style>\n```\n\n## 内边距（padding）\n\npadding 属性用于设置内边距。 是指 边框与内容之间的距离。\n\npadding-top:上内边距\n\npadding-right:右内边距\n\npadding-bottom:下内边距\n\npadding-left:左内边距\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/w.jpg\"/>注意： 后面跟几个数值表示的意思是不一样的。\n\n| 值的个数 | 表达意思                                                                                                                  |\n| -------- | ------------------------------------------------------------------------------------------------------------------------- |\n| 1 个值   | padding：上下左右边距 比如 padding: 3px; 表示上下左右都是 3 像素                                                          |\n| 2 个值   | padding: 上下边距 左右边距 比如 padding: 3px 5px; 表示 上下 3 像素 左右 5 像素                                            |\n| 3 个值   | padding：上边距 左右边距 下边距 比如 padding: 3px 5px 10px; 表示 上是 3 像素 左右是 5 像素 下是 10 像素                   |\n| 4 个值   | padding:上内边距 右内边距 下内边距 左内边距 比如: padding: 3px 5px 10px 15px; 表示 上 3px 右是 5px 下 10px 左 15px 顺时针 |\n\n课堂案例： 新浪导航\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/al.gif\" />\n\n## 外边距（margin）\n\nmargin 属性用于设置外边距。 设置外边距会在元素之间创建“空白”， 这段空白通常不能放置其他内容。\n\nmargin-top:上外边距\n\nmargin-right:右外边距\n\nmargin-bottom:下外边距\n\nmargin-left:上外边距\n\nmargin:上外边距 右外边距 下外边距 左外边\n\n取值顺序跟内边距相同。\n\n### 外边距实现盒子居中\n\n可以让一个盒子实现水平居中，需要满足一下两个条件：\n\n1. 必须是块级元素。\n2. 盒子必须指定了宽度（width）\n\n然后就给**左右的外边距都设置为 auto**，就可使块级元素水平居中。\n\n实际工作中常用这种方式进行网页布局，示例代码如下：\n\n```css\n.header {\n  width: 960px;\n  margin: 0 auto;\n}\n```\n\n### 文字盒子居中图片和背景区别\n\n1.  文字水平居中是 text-align: center\n2.  盒子水平居中 左右 margin 改为 auto\n\n```css\ntext-align: center; /*  文字居中水平 */\nmargin: 10px auto; /* 盒子水平居中  左右margin 改为 auto 就阔以了 */\n```\n\n3. 插入图片 我们用的最多 比如产品展示类\n4. 背景图片我们一般用于小图标背景 或者 超大背景图片\n\n```css\nsection img {\n  width: 200px; /* 插入图片更改大小 width 和 height */\n  height: 210px;\n  margin-top: 30px; /* 插入图片更改位置 可以用margin 或padding  盒模型 */\n  margin-left: 50px; /* 插入当图片也是一个盒子 */\n}\n\naside {\n  width: 400px;\n  height: 400px;\n  border: 1px solid purple;\n  background: #fff url(images/sun.jpg) no-repeat;\n\n  background-size: 200px 210px; /*  背景图片更改大小只能用 background-size */\n  background-position: 30px 50px; /* 背景图片更该位置 我用 background-position */\n}\n```\n\n### 清除元素的默认内外边距\n\n为了更方便地控制网页中的元素，制作网页时，可使用如下代码清除元素的默认内外边距：\n\n```css\n* {\n  padding: 0; /* 清除内边距 */\n  margin: 0; /* 清除外边距 */\n}\n```\n\n注意： 行内元素是只有左右外边距的，是没有上下外边距的。 内边距，在 ie6 等低版本浏览器也会有问题。\n\n我们尽量不要给行内元素指定上下的内外边距就好了。\n\n## 外边距合并\n\n使用 margin 定义块元素的垂直外边距时，可能会出现外边距的合并。\n\n### 相邻块元素垂直外边距的合并\n\n当上下相邻的两个块元素相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/www.png\" />\n\n解决方案： 避免就好了。\n\n### 嵌套块元素垂直外边距的合并\n\n对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的较大者，即使父元素的上外边距为 0，也会发生合并。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/n.png\" />\n\n解决方案：\n\n1. 可以为父元素定义 1 像素的上边框或上内边距。\n2. 可以为父元素添加 overflow:hidden。\n\n待续。。。。\n\n## content 宽度和高度\n\n使用宽度属性 width 和高度属性 height 可以对盒子的大小进行控制。\n\nwidth 和 height 的属性值可以为不同单位的数值或相对于父元素的百分比%，实际工作中最常用的是像素值。\n\n大多数浏览器，如 Firefox、IE6 及以上版本都采用了 W3C 规范，符合 CSS 规范的盒子模型的总宽度和总高度的计算原则是：\n\n```\n  /*外盒尺寸计算（元素空间尺寸）*/\n  Element空间高度 = content height + padding + border + margin\n  Element 空间宽度 = content width + padding + border + margin\n  /*内盒尺寸计算（元素实际大小）*/\n  Element Height = content height + padding + border （Height为内容高度）\n  Element Width = content width + padding + border （Width为内容宽度）\n```\n\n注意：\n\n1、宽度属性 width 和高度属性 height 仅适用于块级元素，对行内元素无效（ img 标签和 input 除外）。\n\n2、计算盒子模型的总高度时，还应考虑上下两个盒子垂直外边距合并的情况。\n\n3、**如果一个盒子没有给定宽度/高度或者继承父亲的宽度/高度，则 padding 不会影响本盒子大小**。\n\n## 盒子模型布局稳定性\n\n开始学习盒子模型，同学们最大的困惑就是， 分不清内外边距的使用，什么情况下使用内边距，什么情况下使用外边距？\n\n答案是： 其实他们大部分情况下是可以混用的。 就是说，你用内边距也可以，用外边距也可以。 你觉得哪个方便，就用哪个。\n\n但是，总有一个最好用的吧，我们根据稳定性来分，建议如下：\n\n按照 优先使用 宽度 （width） 其次 使用内边距（padding） 再次 外边距（margin）。\n\n```\n  width >  padding  >   margin\n```\n\n原因：\n\n1. margin 会有外边距合并 还有 ie6 下面 margin 加倍的 bug（讨厌）所以最后使用。\n\n2. padding 会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。\n\n3. width 没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。\n\n   ​\n\n## CSS3 盒模型\n\nCSS3 中可以通过 box-sizing 来指定盒模型，即可指定为 content-box、border-box，这样我们计算盒子大小的方式就发生了改变。\n\n可以分成两种情况：\n\n1、box-sizing: content-box 盒子大小为 width + padding + border content-box:此值为其默认值，其让元素维持 W3C 的标准 Box Mode\n\n2、box-sizing: border-box 盒子大小为 width 就是说 padding 和 border 是包含到 width 里面的\n\n注：上面的标注的 width 指的是 CSS 属性里设置的 width: length，content 的值是会自动调整的。\n\n```css\ndiv:first-child {\n  width: 200px;\n  height: 200px;\n  background-color: pink;\n  box-sizing: content-box; /*  就是以前的标准盒模型  w3c */\n  padding: 10px;\n  border: 15px solid red;\n  /* 盒子大小为 width + padding + border   content-box:此值为其默认值，其让元素维持W3C的标准Box Mode */\n}\ndiv:last-child {\n  width: 200px;\n  height: 200px;\n  background-color: purple;\n  padding: 10px;\n  box-sizing: border-box; /* padding border  不撑开盒子 */\n  border: 15px solid red;\n  /* margin: 10px; */\n  /* 盒子大小为 width    就是说  padding 和 border 是包含到width里面的 */\n}\n```\n\n## 盒子阴影\n\n语法格式：\n\n```css\nbox-shadow: 水平阴影 垂直阴影 模糊距离 阴影尺寸 阴影颜色 内/外阴影；;\n```\n\n![1498467567011](https://zclzone.gitee.io/resource/image/blog/media/1498467567011.png)\n\n1. 前两个属性是必须写的。其余的可以省略。\n2. 外阴影 (outset) 但是不能写 默认 想要内阴影 inset\n\n```css\ndiv {\n  width: 200px;\n  height: 200px;\n  border: 10px solid red;\n  /* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */\n  /* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影； */\n  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.4);\n}\n```\n\n# 浮动(float)\n\n## 普通流(normal flow)\n\n这个单词很多人翻译为 文档流 ， 字面翻译 普通流 或者标准流都可以。\n\n前面我们说过，网页布局的核心，就是用 CSS 来摆放盒子位置。如何把盒子摆放到合适的位置？\n\nCSS 的定位机制有 3 种：普通流（标准流）、浮动和定位。\n\nhtml 语言当中另外一个相当重要的概念----------标准流！或者普通流。普通流实际上就是一个网页内标签元素正常从上到下，从左到右排列顺序的意思，比如块级元素会独占一行，行内元素会按顺序依次前后排列；按照这种大前提的布局排列之下绝对不会出现例外的情况叫做普通流布局。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/t.jpg\" />\n\n## 浮动(float)\n\n浮动最早是用来控制图片，以便达到其他元素（特别是文字）实现“环绕”图片的效果。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/l.png\" style=\"width: 600px; border: 2px solid #000;\"/>\n\n后来，我们发现浮动有个很有意思的事情：就是让任何盒子可以一行排列,因此我们就慢慢的偏离主题，用浮动的特性来布局了。（CSS3 已经我们真正意义上的网页布局，具体 CSS3 我们会详细解释）\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/d.png\" />\n\n## 什么是浮动？\n\n元素的浮动是指设置了浮动属性的元素会脱离标准普通流的控制，移动到其父元素中指定位置的过程。\n\n在 CSS 中，通过 float 属性来定义浮动，其基本语法格式如下：\n\n```\n选择器{float:属性值;}\n```\n\n| 属性值 | 描述                 |\n| ------ | -------------------- |\n| left   | 元素向左浮动         |\n| right  | 元素向右浮动         |\n| none   | 元素不浮动（默认值） |\n\n## 浮动详细内幕特性\n\n浮动脱离标准流，不占位置，会影响标准流。浮动只有左右浮动。\n\n```\n浮动首先创建包含块的概念（包裹）。就是说， 浮动的元素总是找理它最近的父级元素对齐。但是不会超出内边距的范围。\n```\n\n   <img src=\"https://zclzone.gitee.io/resource/image/blog/media/one.jpg\" width=\"500\" />\n\n```\n浮动的元素排列位置，跟上一个元素（块级）有关系。如果上一个元素有浮动，则A元素顶部会和上一个元素的顶部对齐；如果上一个元素是标准流，则A元素的顶部会和上一个元素的底部对齐。\n```\n\n  <img src=\"https://zclzone.gitee.io/resource/image/blog/media/two.jpg\" width=\"400\" />\n\n```\n由2可以推断出，一个父盒子里面的子盒子，如果其中一个子级有浮动的，则其他子级都需要浮动。这样才能一行对齐显示。\n```\n\n```\n元素添加浮动后，元素会具有行内块元素的特性。元素的大小完全取决于定义的大小或者默认的内容多少浮动根据元素书写的位置来显示相应的浮动。\n```\n\n总结： 浮动 --->\n\n浮动的目的就是为了让多个块级元素同一行上显示。\n\nfloat 浮 漏 特\n\n浮： 加了浮动的元素盒子是浮起来的，漂浮在其他的标准流盒子上面。\n漏： 加了浮动的盒子，不占位置的，它浮起来了，它原来的位置漏 给了标准流的盒子。\n特： 特别注意，首先浮动的盒子需要和标准流的父级搭配使用， 其次 特别的注意浮动可以使元素显示模式体现为行内块特性。\n\n# 版心和布局流程\n\n阅读报纸时容易发现，虽然报纸中的内容很多，但是经过合理地排版，版面依然清晰、易读。同样，在制作网页时，要想使页面结构清晰、有条理，也需要对网页进行“排版”。\n\n“版心”(可视区) 是指网页中主体内容所在的区域。一般在浏览器窗口中水平居中显示，常见的宽度值为 960px、980px、1000px、1200px 等。\n\n## 布局流程\n\n为了提高网页制作的效率，布局时通常需要遵守一定的布局流程，具体如下：\n\n1、确定页面的版心（可视区）。\n\n2、分析页面中的行模块，以及每个行模块中的列模块。\n\n3、制作 HTML 结构 。\n\n4、CSS 初始化，然后开始运用盒子模型的原理，通过 DIV+CSS 布局来控制网页的各个模块。\n\n## 一列固定宽度且居中\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/yl.jpg\" width=\"400\" />\n\n最普通的，最为常用的结构\n\n## 两列左窄右宽型\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/ll.jpg\" width=\"400\" />\n\n比如小米 <a href=\"http://www.mi.com\" target=\"_blank\"> 小米官网 </a>\n\n## 通栏平均分布型\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/tl.jpg\" width=\"600\" />\n\n比如锤子 <a href=\"http://www.smartisan.com/\" target=\"_blank\"> 锤子官网 </a>\n\n# 清除浮动\n\n人生就像乘坐北京地铁一号线：\n\n途经国贸，羡慕繁华；\n\n途经天安门，幻想权力；\n\n途经金融街，梦想发财；\n\n经过公主坟，遥想华丽家族；\n\n经过玉泉路，依然雄心勃勃…\n\n这时，有个声音飘然入耳:乘客你好,八宝山马上就要到了！\n\n顿时醒悟：人生苦短，有始有终。\n\n好比我们的浮动，有浮动开始，则就应该有浮动结束。\n\n## 为什么要清除浮动\n\n我们前面说过，浮动本质是用来做一些文字混排效果的，但是被我们拿来做布局用，则会有很多的问题出现， 但是，你不能说浮动不好 <img src=\"https://zclzone.gitee.io/resource/image/blog/media/wq.jpg\" height=\"100\" />。\n\n由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响，为了解决这些问题，此时就需要在该元素中清除浮动。\n\n准确地说，并不是清除浮动，而是**清除浮动后造成的影响**\n\n如果浮动一开始就是一个美丽的错误，那么请用正确的方法挽救它。\n\n## 清除浮动本质\n\n清除浮动主要为了解决父级元素因为子级浮动引起内部高度为 0 的问题。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/n.jpg\" />\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/no.jpg\" />\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/kc.jpg\" />\n\n## 清除浮动的方法\n\n其实本质叫做闭合浮动更好一些, 记住，清除浮动就是把浮动的盒子圈到里面，让父盒子闭合出口和入口不让他们出来影响其他元素。\n\n在 CSS 中，clear 属性用于清除浮动，其基本语法格式如下：\n\n```\n选择器{clear:属性值;}\n```\n\n| 属性值 | 描述                                       |\n| ------ | ------------------------------------------ |\n| left   | 不允许左侧有浮动元素（清除左侧浮动的影响） |\n| right  | 不允许右侧有浮动元素（清除右侧浮动的影响） |\n| both   | 同时清除左右两侧浮动的影响                 |\n\n### 额外标签法\n\n```html\n是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如\n<div style=\"”clear:both”\"></div>\n，或则其他标签br等亦可。\n```\n\n优点： 通俗易懂，书写方便\n\n缺点： 添加许多无意义的标签，结构化较差。 我只能说，w3c 你推荐的方法我不接受，你不值得拥有。。。\n\n### 父级添加 overflow 属性方法\n\n可以通过触发 BFC 的方式，可以实现清除浮动效果。（BFC 后面讲解）\n\n```css\n可以给父级添加： overflow为 hidden|auto|scroll  都可以实现。\n```\n\n优点： 代码简洁\n\n缺点： 内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。\n\n### 使用 after 伪元素清除浮动\n\n**:after 方式为空元素的升级版，好处是不用单独加标签了**\n\n使用方法：\n\n```css\n.clearfix:after {\n  content: '.';\n  display: block;\n  height: 0;\n  clear: both;\n  visibility: hidden;\n}\n\n.clearfix {\n  *zoom: 1;\n} /* IE6、7 专有 */\n```\n\n优点： 符合闭合浮动思想 结构语义化正确\n\n缺点： 由于 IE6-7 不支持:after，使用 zoom:1 触发 hasLayout。\n\n代表网站： 百度、淘宝网、网易等\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/163.png\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n注意： content:\".\" 里面尽量跟一个小点，或者其他，尽量不要为空，否则再 firefox 7.0 前的版本会有生成空格。\n\n### 使用 before 和 after 双伪元素清除浮动\n\n使用方法：\n\n```css\n.clearfix:before,\n.clearfix:after {\n  content: '';\n  display: table; /* 这句话可以出发BFC BFC可以清除浮动,BFC我们后面讲 */\n}\n.clearfix:after {\n  clear: both;\n}\n.clearfix {\n  *zoom: 1;\n}\n```\n\n优点： 代码更简洁\n\n缺点： 由于 IE6-7 不支持:after，使用 zoom:1 触发 hasLayout。\n\n代表网站： 小米、腾讯等\n\n# Photoshop 图像处理专家\n\n![1498465020015](https://zclzone.gitee.io/resource/image/blog/media/1498465020015.png)\n\nPS 工具是我们使用频率比较高的软件之一， 我们学习 PS 目的不是为了设计海报做电商和 UI 的，而是要求：\n\n1. 会简单的抠图\n2. 会简单的修改 PSD 效果图\n3. **熟练的切图**\n4. 能和网站美工美眉有共同话题。。。。。\n\n## Photoshop 基本使用\n\n## PS 界面组成：\n\n菜单栏、选项栏、工具栏、浮动面板（拖拽名称，可单独操作面板）、绘图窗口\n​ 窗口菜单，可显示隐藏所有面板\n\n工作区：（新建）\n\n调整浮动面板\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/jiemian.png\"/>\n\n## 基本操作\n\n文件下拉菜单：\n​ 1、新建 新建文档 CTRL+N\n\n单位：像素 厘米 毫米\n\n屏幕显示： 单位 像素 72 像素/英寸 RGB 颜色模式\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/huabu.png\"/>\n\n2、关闭文档 CTRL+W\n\n3、存储 CTRL+S （替存）\n\n4、存储为 CTRL+SHIFT+S 另存一份文件\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/baocun.png\"/>\n\n5、格式：\n​ .psd PS 源文件格式 图层、文字、样式等，可再次编辑\n​ （给自己）\n​ .jpg 有损压缩格式 （给客户） 品质 最高 12\n\n6、文件打开：\n​ 1）文件下拉菜单-打开（CTRL+O 欧）\n\n​ 2）双击软件空白处也能打开\n​\n\n## 移动工具 V\n\n1、不同文件之间拖拽图像。\n\n## 自由变形\n\nctrl + T 可以改变图像的大小\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/bianhuan.png\" />\n\n按下 enter 回车确认操作。\n\n## 图层操作(重点)\n\n图层面板快捷键 F7 其实图层就是一张张透明的纸 可以实现叠加问题。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/tuceng.png\" />\n\n图层选择： 使用移动工具 V\n\n1、图层缩览图判断\n\n2、按住 CTRL,在目标图像上单击\n\n3、将光标放置在目标图像上右键，选择图层名称\n\n图层面板中加选图层：\n\n1、按 SHIFT，单击另一目标图层 中间所有图层被选中\n\n2、按 CTRL，单击另一目标图层 只选中目标图层\n\n复制图层：选中目标图层后（移动工具状态下）\n\n1、按 ALT 拖拽图像\n\n2、CTRL+J （重合）\n\n案例： 摆放一个自行车\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/bike.jpg\" />\n\n## 图层编组\n\n选中目标图层，CTRL+G\n\n取消编组：CTRL+SHIFT+G\n\n双击图层名称可重新命名\n\n双击组名称，可命名组\n\n移动工具 V 选择组或图层时，需设置选项栏\n\n![1498465862231](https://zclzone.gitee.io/resource/image/blog/media/1498465862231.png)\n\n## 图层上下位置移动\n\n1、选中目标图层，在图层面拖拽\n\n2、CTRL+] 向上移动图层\n​ CTRL+[ 向下移动图层\n\n3、CTRL+SHIFT+] 图层置顶\n​ CTRL+SHIFT+[ 图层置底\n\n移动选区或图像时：\n\n移动过程中，没释放鼠标，按住 SHIFT，可同一水平线、同一垂线、45 度移动。\n\nps 中的撤销操作是：\n\nctrl+z 撤销一步\n\nctrl+alt+z 撤销多步\n\n## 图层合并\n\nctrl+e 可以合并图层\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/hebing.png\" />\n\n## 图层透明度\n\n不透明度：设置图层的不透明程度 0%完全透明，不可见\n\n​ 100%完全不透明，真实可见\n\n填充：与不透明度效果类似\n\n![1498465905203](https://zclzone.gitee.io/resource/image/blog/media/1498465905203.png))\n\n键盘数字键，可快速设置透明度数值\n\n## 矩形选区工具 M\n\n用来选择某部分区域 我们成为选区工具\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/gongjuxiang.png\" />\n\n取消选区： ctrl+d\n\n## 颜色填充\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/yanse1.png\" />\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/yanse2.png\" />\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/miqi.jpg\"/>\n\n## 套索工具 L\n\n1、套索工具 L 在屏幕上拖拽鼠标左键，释放后生成选区\n\n2、多边形套索 L 连续单击绘制多边形选区\n\n​ 闭合方法：1、单击起始点 2、双击任意位置\n\n​ DELETE 删除当前点\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/shiboguan.jpg\" />\n\n## 磁性套索 L\n\nL 在颜色交界的位置单击后拖动。单击起始点后，生成选区。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/cixing.jpg\" />\n\n## 魔棒工具 W\n\n以单击位置为选择色，选择相似颜色生成选区。\n\n![1498465928343](https://zclzone.gitee.io/resource/image/blog/media/1498465928343.png)\n\n容差：选择颜色的范围 容差小，颜色选择精确。 0-255\n\n连续：勾选连续时，相连颜色生成选区。\n\n​ 不勾选，画面中所有相似颜色被选中生成选区。\n\n按 SHIFT 在未生成选区位置单击，可选区相加。\n\n选区反选：CTRL+SHIFT+I\n\n## 选区布尔运算\n\n![1498465944087](https://zclzone.gitee.io/resource/image/blog/media/1498465944087.png)\n\n选区面积大小的变化。\n\n新选区：保持选中状态\n\n添加到选区：相加运算（按住 SHIFT 再绘制选区）\n\n从选区减去：相减（按住 ALT 再绘制选区）\n\n与选区交叉：重合部分保留。（按住 ALT+SHIFT 再绘制选区）\n\n梦幻星球\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/chengshi.jpg\" />\n\n## 钢笔工具： P\n\n作用：绘制路径，生成选区，抠图。\n\n组成;路径线和锚点\n\n绘制路径后，CTRL+回车，生成选区。\n\n路径类型：\n\n直线型路径：连续单击\n\n曲线型路径：第一点单击，第二点拖动鼠标。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/jiu.png\"/>\n\n## 文字工具\n\nT 可以直接输入文字\n\n## Photoshop 切图\n\nPS 切图 可以 分为 手动 利用切片切图 以及 利用 PS 的插件快速切图\n\n### 切片工具\n\n![1498466173246](https://zclzone.gitee.io/resource/image/blog/media/1498466173246.png)\n\n1. 利用切片工具手动划出\n\n2. 图层菜单---新建基于图层的切片\n\n3. 利用标尺 基于参考线的切片 （选择切片工具）\n\n   ​\n\n   ![1498466734205](https://zclzone.gitee.io/resource/image/blog/media/1498466734205.png)\n\n4. 先选个一个整个的切片， 切片选择工具-- 属性面板中有 “划分” --可以等分数平分切图\n\n导出切片： 文件-- 存储为 web 设备所用格式\n\n### 辅助线和切片使用及清除\n\n视图菜单-- 清除 辅助线/ 清除切片\n\n### 切图插件\n\nCutterman 是一款运行在 photoshop 中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 \"导出 web 所用格式\" 以及使用切片工具进行挨个切图的繁琐流程。 它支持各种各样的图片尺寸、格式、形态输出，方便你在 pc、ios、Android 等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。\n\n官网: http://www.cutterman.cn/zh/cutterman\n\n注意： cutterman 插件要求你的 ps 必须是完整版，不能是绿色版，所以大家需要从新安装完整版本。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/sample1.gif\" />\n\n# 项目案例： 学成网\n\n案例练习目的是总结以前的 css 和 html\n\n还有 ps 的使用。\n\n制作步骤：\n\n1. 准备相关文件。（内部样式表) html 文件(index.html) 图片文件\n2. 准备 CSS 初始化。 书写结构和样式\n3. 确定版心（是 1200 像素)和各个模块。\n\n# 定位(position)\n\n如果，说浮动， 关键在一个 “浮” 字上面， 那么 我们的定位，关键在于一个 “位” 上。\n\nPS: 定位是我们 CSS 算是数一数二难点的了，但是，你务必要学好它，我们 CSS 离不开定位，特别是后面的 js 特效，天天和定位打交道。不要抵触它，反而要爱上它，它可以让我们工作更加轻松哦！\n\n## 为什么要用定位？\n\n那么定位，最长运用的场景再那里呢？ 来看几幅图片，你一定会有感悟！\n\n第一幅图， 小黄色块可以再图片上移动：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/1.gif\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n第二幅图， 左右箭头压住图片：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/2.gif\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n第三幅图, hot 再盒子外面多出一块，更加突出：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/it.png\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n以上三个小地方，如果用标准流或者浮动，实现会比较复杂或者难以实现，此时我们用定位来做，just soso！\n\n## 元素的定位属性\n\n元素的定位属性主要包括定位模式和边偏移两部分。\n\n1、边偏移\n\n| 边偏移属性 | 描述                                           |\n| ---------- | ---------------------------------------------- |\n| top        | 顶端偏移量，定义元素相对于其父元素上边线的距离 |\n| bottom     | 底部偏移量，定义元素相对于其父元素下边线的距离 |\n| left       | 左侧偏移量，定义元素相对于其父元素左边线的距离 |\n| right      | 右侧偏移量，定义元素相对于其父元素右边线的距离 |\n\n也就说，以后定位要和这边偏移搭配使用了， 比如 top: 100px; left: 30px; 等等\n\n2、定位模式(定位的分类)\n\n在 CSS 中，position 属性用于定义元素的定位模式，其基本语法格式如下：\n\n选择器{position:属性值;}\n\nposition 属性的常用值\n\n| 值       | 描述                                             |\n| -------- | ------------------------------------------------ |\n| static   | 自动定位（默认定位方式）                         |\n| relative | 相对定位，相对于其原文档流的位置进行定位         |\n| absolute | 绝对定位，相对于其上一个已经定位的父元素进行定位 |\n| fixed    | 固定定位，相对于浏览器窗口进行定位               |\n\n## 静态定位(static)\n\n静态定位是所有元素的默认定位方式，当 position 属性的取值为 static 时，可以将元素定位于静态位置。 所谓静态位置就是各个元素在 HTML 文档流中默认的位置。\n\n上面的话翻译成白话： 就是网页中所有元素都默认的是静态定位哦！ 其实就是标准流的特性。\n\n在静态定位状态下，无法通过边偏移属性（top、bottom、left 或 right）来改变元素的位置。\n\nPS： 静态定位其实没啥可说的。\n\n## 相对定位 relative(自恋型)\n\n```\n小笑话：\n刚刚看到一个超级超级帅的帅哥，看得我都忍不住想和他搞基了。世间怎会有如此之完美的男人。我和他就这样一动不动的对视着，就仿佛一见钟情。时间也在这一瞬间停止了。直到我的手麻了。才恋恋不舍的放下镜子。。。。\n```\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/smail.gif\" width=\"100\"/>\n\n相对定位是将元素相对于它在标准流中的位置进行定位，当 position 属性的取值为 relative 时，可以将元素定位于相对位置。\n\n对元素设置相对定位后，可以通过边偏移属性改变元素的位置，但是它在文档流中的位置仍然保留。如下图所示，即是一个相对定位的效果展示：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/r.png\"  />\n\n注意：\n\n1. 相对定位最重要的一点是，它可以通过边偏移移动位置，但是原来的所占的位置，继续占有。\n2. 其次，每次移动的位置，是以自己的左上角为基点移动（相对于自己来移动位置）\n\n就是说，相对定位的盒子仍在标准流中，它后面的盒子仍以标准流方式对待它。（相对定位不脱标）\n\n如果说浮动的主要目的是 让多个块级元素一行显示，那么定位的主要价值就是 移动位置， 让盒子到我们想要的位置上去。\n\n## 绝对定位 absolute (拼爹型)\n\n```\n小笑话：\n\n吃早饭时，老婆往儿子碗里放了两个煎蛋，儿子全给了我，还一本正经地说：“爸爸，多吃点，男人养家不容易。” <br/>\n\n我一阵感动，刚想夸他两句。\n\n儿子接着说：“以后全靠你让我拼爹了！”\n```\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/smail.gif\" width=\"100\"/>\n\n[注意] 如果文档可滚动，绝对定位元素会随着它滚动，因为元素最终会相对于正常流的某一部分定位。\n\n当 position 属性的取值为 absolute 时，可以将元素的定位模式设置为绝对定位。\n\n注意： 绝对定位最重要的一点是，它可以通过边偏移移动位置，但是它完全脱标，完全不占位置。\n\n### 父级没有定位\n\n若所有父元素都没有定位，以浏览器为准对齐(document 文档)。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/ab.png\" />\n\n### 父级有定位\n\n绝对定位是将元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/ab1.png\" />\n\n### 子绝父相\n\n这个“子绝父相”太重要了，是我们学习定位的口诀，时时刻刻记住的。\n\n这句话的意思是 子级是绝对定位的话， 父级要用相对定位。\n\n首先， 我们说下， 绝对定位是将元素依据最近的已经定位绝对、固定或相对定位）的父元素（祖先）进行定位。\n\n就是说， 子级是绝对定位，父亲只要是定位即可（不管父亲是绝对定位还是相对定位，甚至是固定定位都可以），就是说， 子绝父绝，子绝父相都是正确的。\n\n但是，在我们网页布局的时候， 最常说的 子绝父相是怎么来的呢？ 请看如下图：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/zi.png\"  style=\"border: 1px dashed #3c3c3c;\"/>\n\n所以，我们可以得出如下结论：\n\n因为子级是绝对定位，不会占有位置， 可以放到父盒子里面的任何一个地方。\n\n父盒子布局时，需要占有位置，因此父亲只能是 相对定位.\n\n这就是子绝父相的由来。\n\n## 绝对定位的盒子水平/垂直居中\n\n普通的盒子是左右 margin 改为 auto 就可， 但是对于绝对定位就无效了\n\n定位的盒子也可以水平或者垂直居中，有一个算法。\n\n1. 首先 left 50% 父盒子的一半大小\n\n2. 然后走自己外边距负的一半值就可以了 margin-left。\n\n   ​\n\n## 固定定位 fixed(认死理型)\n\n固定定位是绝对定位的一种特殊形式，类似于 正方形是一个特殊的 矩形。它以浏览器窗口作为参照物来定义网页元素。当 position 属性的取值为 fixed 时，即可将元素的定位模式设置为固定定位。\n\n当对元素设置固定定位后，它将脱离标准文档流的控制，始终依据浏览器窗口来定义自己的显示位置。不管浏览器滚动条如何滚动也不管浏览器窗口的大小如何变化，该元素都会始终显示在浏览器窗口的固定位置。\n\n固定定位有两点：\n\n1. 固定定位的元素跟父亲没有任何关系，只认浏览器。\n2. 固定定位完全脱标，不占有位置，不随着滚动条滚动。\n\n记忆法： 就类似于孙猴子， 无父无母，好不容易找到一个可靠的师傅（浏览器），就听的师傅的，别的都不听。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/sun.jpg\" width=\"100\">\n\nie6 等低版本浏览器不支持固定定位。\n\n## 叠放次序（z-index）\n\n当对多个元素同时设置定位时，定位元素之间有可能会发生重叠。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/zzz.png\" />\n\n在 CSS 中，要想调整重叠定位元素的堆叠顺序，可以对定位元素应用 z-index 层叠等级属性，其取值可为正整数、负整数和 0。\n\n比如： z-index: 2;\n\n注意：\n\n1. z-index 的默认属性值是 0，取值越大，定位元素在层叠元素中越居上。\n\n2. 如果取值相同，则根据书写顺序，后来居上。\n\n3. 后面数字一定不能加单位。\n\n4. 只有相对定位，绝对定位，固定定位有此属性，其余标准流，浮动，静态定位都无此属性，亦不可指定此属性。\n\n# 四种定位总结\n\n| 定位模式          | 是否脱标占有位置     | 是否可以使用边偏移 | 移动位置基准                     |\n| ----------------- | -------------------- | ------------------ | -------------------------------- |\n| 静态 static       | 不脱标，正常模式     | 不可以             | 正常模式                         |\n| 相对定位 relative | 不脱标，占有位置     | 可以               | 相对自身位置移动（自恋型）       |\n| 绝对定位 absolute | 完全脱标，不占有位置 | 可以               | 相对于定位父级移动位置（拼爹型） |\n| 固定定位 fixed    | 完全脱标，不占有位置 | 可以               | 相对于浏览器移动位置（认死理型） |\n\n# 定位模式转换\n\n跟 浮动一样， 元素添加了 绝对定位和固定定位之后， 元素模式也会发生转换， 都转换为 行内块模式，\n\n** 因此 比如 行内元素 如果添加了 绝对定位或者 固定定位后 浮动后，可以不用转换模式，直接给高度和宽度就可以了。**\n\n# 元素的显示与隐藏\n\n在 CSS 中有三个显示和隐藏的单词比较常见，我们要区分开，他们分别是 display visibility 和 overflow。\n\n他们的主要目的是让一个元素在页面中消失，但是不在文档源码中删除。 最常见的是网站广告，当我们点击类似关闭不见了，但是我们重新刷新页面，它们又会出现和你玩躲猫猫！！\n\n## display 显示\n\ndisplay 设置或检索对象是否及如何显示。\n\ndisplay : none 隐藏对象 与它相反的是 display:block 除了转换为块级元素之外，同时还有显示元素的意思。\n\n特点： 隐藏之后，不再保留位置。\n\n## visibility 可见性\n\n设置或检索是否显示对象。\n\nvisible : 　对象可视\n\nhidden : 　对象隐藏\n\n特点： 隐藏之后，继续保留原有位置。（停职留薪）\n\n## overflow 溢出\n\n检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。\n\nvisible : 　不剪切内容也不添加滚动条。\n\nauto : 　 超出自动显示滚动条，不超出不显示滚动条\n\nhidden : 　不显示超过对象尺寸的内容，超出的部分隐藏掉\n\nscroll : 　不管超出内容否，总是显示滚动条\n\n# CSS 高级技巧\n\n## CSS 用户界面样式\n\n所谓的界面样式， 就是更改一些用户操作样式， 比如 更改用户的鼠标样式， 表单轮廓等。但是比如滚动条的样式改动受到了很多浏览器的抵制，因此我们就放弃了。 防止表单域拖拽\n\n### 鼠标样式 cursor\n\n设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。\n\n```html\ncursor : default 小白 | pointer 小手 | move 移动 | text 文本\n```\n\n鼠标放我身上查看效果哦：\n\n```html\n<ul>\n  <li style=\"cursor:default\">我是小白</li>\n  <li style=\"cursor:pointer\">我是小手</li>\n  <li style=\"cursor:move\">我是移动</li>\n  <li style=\"cursor:text\">我是文本</li>\n</ul>\n```\n\n尽量不要用 hand 因为 火狐不支持 pointer ie6 以上都支持的尽量用\n\n### 轮廓 outline\n\n是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。\n\n```css\noutline: outline-color ||outline-style || outline-width;\n```\n\n但是我们都不关心可以设置多少，我们平时都是去掉的。\n\n最直接的写法是 ： outline: 0; 或者 outline: none;\n\n```html\n<input type=\"text\" style=\"outline: 0;\" />\n```\n\n### 防止拖拽文本域 resize\n\nresize：none 这个单词可以防止 火狐 谷歌等浏览器随意的拖动 文本域。\n\n右下角可以拖拽：\n\n<textarea></textarea>\n\n右下角不可以拖拽：\n\n```html\n<textarea style=\"resize: none;\"></textarea>\n```\n\n## vertical-align 垂直对齐\n\n以前我们讲过让带有宽度的块级元素居中对齐，是 margin: 0 auto;\n\n以前我们还讲过让文字居中对齐，是 text-align: center;\n\n但是我们从来没有讲过有垂直居中的属性， 我们的妈妈一直很担心我们的垂直居中怎么做。\n\nvertical-align 垂直对齐， 这个看上去很美好的一个属性， 实际有着不可捉摸的脾气，否则我们也不会这么晚来讲解。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/xian.jpg\" />\n\n```css\nvertical-align: baseline |top |middle |bottom;\n```\n\n设置或检索对象内容的垂直对其方式。\n\nvertical-align 不影响块级元素中的内容对齐，它只针对于 行内元素或者行内块元素，特别是行内块元素， **通常用来控制图片/表单与文字的对齐**。\n\n![1498467742995](https://zclzone.gitee.io/resource/image/blog/media/1498467742995.png)\n\n### 图片、表单和文字对齐\n\n所以我们知道，我们可以通过 vertical-align 控制图片和文字的垂直关系了。 默认的图片会和文字基线对齐。\n\n### 去除图片底侧空白缝隙\n\n有个很重要特性你要记住： 图片或者表单等行内块元素，他的底线会和父级盒子的基线对齐。这样会造成一个问题，就是图片底侧会有一个空白缝隙。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/3.jpg\" />\n\n解决的方法就是：\n\n1. 给 img vertical-align:middle | top 等等。 让图片不要和基线对齐。<img src=\"https://zclzone.gitee.io/resource/image/blog/media/1633.png\"  width=\"500\"  style=\"border: 1px dashed #ccc;\" />\n\n1) 给 img 添加 display：block; 转换为块级元素就不会存在问题了。<img src=\"https://zclzone.gitee.io/resource/image/blog/media/sina1.png\" width=\"500\" style=\"border: 1px dashed #ccc;\"/>\n\n# 溢出的文字隐藏\n\n## word-break:自动换行\n\nnormal 使用浏览器默认的换行规则。\n\nbreak-all 允许在单词内换行。\n\nkeep-all 只能在半角空格或连字符处换行。\n\n主要处理英文单词\n\n## white-space\n\nwhite-space 设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容\n\nnormal : 　默认处理方式\nnowrap : 　强制在同一行内显示所有文本，直到文本结束或者遭遇 br 标签对象才换行。\n\n可以处理中文\n\n## text-overflow 文字溢出\n\ntext-overflow : clip | ellipsis\n\n设置或检索是否使用一个省略标记（...）标示对象内文本的溢出\n\nclip : 　不显示省略标记（...），而是简单的裁切\n\nellipsis : 　当对象内文本溢出时显示省略标记（...）\n\n注意一定要首先强制一行内显示，再次和 overflow 属性 搭配使用\n\n## CSS 精灵技术（sprite） 小妖精 雪碧\n\n### 精灵技术产生的背景\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/sss.png\" />\n\n图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。\n\n然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度，出现了 CSS 精灵技术（也称 CSS Sprites、CSS 雪碧）。\n\n### 精灵技术本质\n\n简单地说，CSS 精灵是一种处理网页背景图像的方式。它将一个页面涉及到的所有零星背景图像都集中到一张大图中去，然后将大图应用于网页，这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。通常情况下，这个由很多小的背景图像合成的大图被称为精灵图（雪碧图），如下图所示为京东网站中的一个精灵图。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/jds.png\"  style=\"border: 1px dashed #ccc;\" />\n\n### 精灵技术的使用\n\nCSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图，就需要使用 CSS 的 background-image、background-repeat 和 background-position 属性进行背景定位，其中最关键的是使用 background-position 属性精确地定位。\n\n### 制作精灵图\n\nCSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），那我们要做的，就是把小图拼合成一张大图。\n\n大部分情况下，精灵图都是网页美工做。\n\n```\n我们精灵图上放的都是小的装饰性质的背景图片。 插入图片不能往上放。\n我们精灵图的宽度取决于最宽的那个背景。\n我们可以横向摆放也可以纵向摆放，但是每个图片之间，间隔至少隔开偶数像素合适。\n在我们精灵图的最低端，留一片空隙，方便我们以后添加其他精灵图。\n```\n\n结束语： 小公司，背景图片很少的情况，没有必要使用精灵技术，维护成本太高。 如果是背景图片比较多，可以建议使用精灵技术。\n\n## 字体图标\n\n图片是有诸多优点的，但是缺点很明显，比如图片不但增加了总文件的大小，还增加了很多额外的\"http 请求\"，这都会大大降低网页的性能的。更重要的是图片不能很好的进行“缩放”，因为图片放大和缩小会失真。 我们后面会学习移动端响应式，很多情况下希望我们的图标是可以缩放的。此时，一个非常重要的技术出现了，额不是出现了，是以前就有，是被从新\"宠幸\"啦。。 这就是字体图标（iconfont).\n\n### 字体图标优点\n\n```\n可以做出跟图片一样可以做的事情,改变透明度、旋转度，等..\n但是本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果等等...\n本身体积更小，但携带的信息并没有削减。\n几乎支持所有的浏览器\n移动端设备必备良药...\n```\n\n### 字体图标使用流程\n\n总体来说，字体图标按照如下流程：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/fontt.png\" />\n\n#### 设计字体图标\n\n假如图标是我们公司单独设计，那就需要第一步了，这个属于 UI 设计人员的工作， 他们在 illustrator 或 Sketch 这类矢量图形软件里创建 icon 图标， 比如下图：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/03.jpg\" />\n\n之后保存为 svg 格式，然后给我们前端人员就好了。\n\n其实第一步，我们不需要关心，只需要给我们这些图标就可以了，如果图标是大众的，网上本来就有的，可以直接跳过第一步，进入第三步。\n\n#### 上传生成字体包\n\n当 UI 设计人员给我们 svg 文件的时候，我们需要转换成我们页面能使用的字体文件， 而且需要生成的是兼容性的适合各个浏览器的。\n\n​ 推荐网站： http://icomoon.io\n\n**icomoon 字库**\n\nIcoMoon 成立于 2011 年，推出的第一个自定义图标字体生成器，它允许用户选择他们所需要的图标，使它们成一字型。 内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。\n\n推荐网站： http://www.iconfont.cn/\n\n**阿里 icon font 字库**\n\nhttp://www.iconfont.cn/\n\n这个是阿里妈妈 M2UX 的一个 icon font 字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用 AI 制作图标上传生成。 一个字，免费，免费！！\n\n**fontello**\n\n[http://fontello.com/](http://fontello.com/)\n\n在线定制你自己的 icon font 字体图标字库，也可以直接从 GitHub 下载整个图标集，该项目也是开源的。\n\n**Font-Awesome**\n\n[http://fortawesome.github.io/Font-Awesome/](http://fortawesome.github.io/Font-Awesome/)\n\n这是我最喜欢的字库之一了，更新比较快。目前已经有 369 个图标了。\n\n**Glyphicon Halflings**\n\n[http://glyphicons.com/](http://glyphicons.com/)\n\n这个字体图标可以在 Bootstrap 下免费使用。自带了 200 多个图标。\n\n**Icons8**\n\n[https://icons8.com/](https://icons8.com/)\n\n提供 PNG 免费下载，像素大能到 500PX\n\n#### 下载兼容字体包\n\n刚才上传完毕， 网站会给我们把 UI 做的 svg 图片转换为我们的字体格式， 然后下载下来就好了\n\n当然，我们不需要自己专门的图标，是想网上找几个图标使用，以上 2 步可以直接省略了， 直接到刚才的网站上找喜欢的下载使用吧。\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/fontt1.png\" />\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/fontt2.png\" />\n\n#### 字体引入到 HTML\n\n得到压缩包之后，最后一步，是最重要的一步了， 就是字体文件已经有了，我们需要引入到我们页面中。\n\n1. 首先把 以下 4 个文件放入到 fonts 文件夹里面。 通俗的做法\n\n   ![1498032122244](https://zclzone.gitee.io/resource/image/blog/media/1498032122244.png)\n\n   ##### 第一步：在样式里面声明字体： 告诉别人我们自己定义的字体\n\n   ```css\n   @font-face {\n     font-family: 'icomoon';\n     src: url('fonts/icomoon.eot?7kkyc2');\n     src: url('fonts/icomoon.eot?7kkyc2#iefix') format('embedded-opentype'), url('fonts/icomoon.ttf?7kkyc2')\n         format('truetype'), url('fonts/icomoon.woff?7kkyc2') format('woff'), url('fonts/icomoon.svg?7kkyc2#icomoon')\n         format('svg');\n     font-weight: normal;\n     font-style: normal;\n   }\n   ```\n\n   ##### 第二步：给盒子使用字体\n\n   ```css\n   span {\n     font-family: 'icomoon';\n   }\n   ```\n\n   ##### 第三步：盒子里面添加结构\n\n   ```css\n   span::before {\n   \t\t content: \"\\e900\";\n   \t}\n   或者\n   <span></span>\n   ```\n\n   ### 追加新图标到原来库里面\n\n   如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标，但是原来的不能删除，继续使用，此时我们需要这样做\n\n   把压缩包里面的 selection.json 从新上传，然后，选中自己想要新的图标，从新下载压缩包，替换原来文件即可。\n\n   <img src=\"https://zclzone.gitee.io/resource/image/blog/media/fontt5.png\" />\n\n## 滑动门\n\n先来体会下现实中的滑动门,或者你可以叫做推拉门：\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/h.gif\" />\n\n### 滑动门出现的背景\n\n制作网页时，为了美观，常常需要为网页元素设置特殊形状的背景，比如微信导航栏，有凸起和凹下去的感觉，最大的问题是里面的字数不一样多，咋办？\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/wxx.jpg\" />\n\n为了使各种特殊形状的背景能够自适应元素中文本内容的多少，出现了 CSS 滑动门技术。它从新的角度构建页面，使各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，可用性更强。 最常见于各种导航栏的滑动门。\n\n### 核心技术\n\n核心技术就是利用 CSS 精灵（主要是背景位置）和盒子 padding 撑开宽度, 以便能适应不同字数的导航栏。\n\n一般的经典布局都是这样的：\n\n```html\n<li>\n  <a href=\"#\">\n    <span>导航栏内容</span>\n  </a>\n</li>\n```\n\n总结：\n\n1. a 设置 背景左侧，padding 撑开合适宽度。\n2. span 设置背景右侧， padding 撑开合适宽度 剩下由文字继续撑开宽度。\n3. 之所以 a 包含 span 就是因为 整个导航都是可以点击的。\n\n## before 和 after 伪元素(详解)\n\n之所以被称为伪元素，是因为他们不是真正的页面元素，html 没有对应的元素，但是其所有用法和表现行为与真正的页面元素一样，可以对其使用诸如页面元素一样的 css 样式，表面上看上去貌似是页面的某些元素来展现，实际上是 css 样式展现的行为，因此被称为伪元素。是伪元素在 html 代码机构中的展现，可以看出无法伪元素的结构无法审查\n\n**注意**\n\n伪元素:before 和:after 添加的内容默认是 inline 元素\\*\\*；这个两个伪元素的`content`属性，表示伪元素的内容,设置:before 和:after 时必须设置其`content`属性，否则伪元素就不起作用。\n\n## 过渡(CSS3)\n\n过渡（transition)是 CSS3 中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。\n\n帧动画：通过一帧一帧的画面按照固定顺序和速度播放。如电影胶片\n\n![1498445034712](https://zclzone.gitee.io/resource/image/blog/media/1498445034712.png)\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/zhen.gif\" />\n\n在 CSS3 里使用 transition 可以实现补间动画（过渡效果），并且当前元素只要有“属性”发生变化时即存在两种状态(我们用 A 和 B 代指），就可以实现平滑的过渡，为了方便演示采用 hover 切换两种状态，但是并不仅仅局限于 hover 状态来实现过渡。\n\n语法格式:\n\n```\ntransition: 要过渡的属性  花费时间  运动曲线  何时开始;\n如果有多组属性变化，还是用逗号隔开。\n```\n\n| 属性                       | 描述                                         | CSS |\n| -------------------------- | -------------------------------------------- | --- |\n| transition                 | 简写属性，用于在一个属性中设置四个过渡属性。 | 3   |\n| transition-property        | 规定应用过渡的 CSS 属性的名称。              | 3   |\n| transition-duration        | 定义过渡效果花费的时间。默认是 0。           | 3   |\n| transition-timing-function | 规定过渡效果的时间曲线。默认是 \"ease\"。      | 3   |\n| transition-delay           | 规定过渡效果何时开始。默认是 0。             | 3   |\n\n如果想要所有的属性都变化过渡， 写一个 all 就可以\n\ntransition-duration 花费时间 单位是 秒 s 比如 0.5s 这个 s 单位必须写 ms 毫秒\n\n运动曲线 默认是 ease\n\n何时开始 默认是 0s 立马开始\n\n运动曲线示意图：\n\n![1498445454760](https://zclzone.gitee.io/resource/image/blog/media/1498445454760.png)\n\n```css\ndiv {\n  width: 200px;\n  height: 100px;\n  background-color: pink;\n  /* transition: 要过渡的属性  花费时间  运动曲线  何时开始; */\n  transition: width 0.6s ease 0s, height 0.3s ease-in 1s;\n  /* transtion 过渡的意思  这句话写到div里面而不是 hover里面 */\n}\ndiv:hover {\n  /* 鼠标经过盒子，我们的宽度变为400 */\n\n  width: 600px;\n  height: 300px;\n}\n\ntransition: all 0.6s; /* 所有属性都变化用all 就可以了  后面俩个属性可以省略 */\n```\n\n## 2D 变形(CSS3) transform\n\ntransform 是 CSS3 中具有颠覆性的特征之一，可以实现元素的位移、旋转、倾斜、缩放，甚至支持矩阵方式，配合过渡和即将学习的动画知识，可以取代大量之前只能靠 Flash 才可以实现的效果。\n\n变形转换 transform transform 变换 变形的意思 《 transformers 变形金刚》\n\n### 移动 translate(x, y)\n\ntranslate 移动平移的意思\n\n![1498443715586](https://zclzone.gitee.io/resource/image/blog/media/1498443715586.png)\n\n```css\ntranslate(50px,50px);\n```\n\n使用 translate 方法来将文字或图像在水平方向和垂直方向上分别垂直移动 50 像素。\n\n可以改变元素的位置，x、y 可为负值；\n\n```\n translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）\n translateX(x)仅水平方向移动（X轴移动）\n translateY(Y)仅垂直方向移动（Y轴移动）\n```\n\n```css\n.box {\n  width: 499.9999px;\n  height: 400px;\n  background: pink;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%); /* 走的自己的一半 */\n}\n```\n\n让定位的盒子水平居中\n\n### 缩放 scale(x, y)\n\n![1498444645795](https://zclzone.gitee.io/resource/image/blog/media/1498444645795.png)\n\n```css\ntransform: scale(0.8, 1);\n```\n\n可以对元素进行水平和垂直方向的缩放。该语句使用 scale 方法使该元素在水平方向上缩小了 20%，垂直方向上不缩放。\n\n```\nscale(X,Y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）\nscaleX(x)元素仅水平方向缩放（X轴缩放）\nscaleY(y)元素仅垂直方向缩放（Y轴缩放）\n```\n\nscale()的取值默认的值为 1，当值设置为 0.01 到 0.99 之间的任何值，作用使一个元素缩小；而任何大于或等于 1.01 的值，作用是让元素放大\n\n### 旋转 rotate(deg)\n\n可以对元素进行旋转，正值为顺时针，负值为逆时针；\n\n![1498443651293](https://zclzone.gitee.io/resource/image/blog/media/1498443651293.png)\n\n```css\ntransform: rotate(45deg);\n```\n\n注意单位是 deg 度数\n\n### transform-origin 可以调整元素转换变形的原点\n\n![1498443912530](https://zclzone.gitee.io/resource/image/blog/media/1498443912530.png)\n\n```css\ndiv {\n  transform-origin: left top;\n  transform: rotate(45deg);\n} /* 改变元素原点到左上角，然后进行顺时旋转45度 */\n```\n\n如果是 4 个角，可以用 left top 这些，如果想要精确的位置， 可以用 px 像素。\n\n```css\ndiv {\n  transform-origin: 10px 10px;\n  transform: rotate(45deg);\n} /* 改变元素原点到x 为10  y 为10，然后进行顺时旋转45度 */\n```\n\n案例旋转楚乔传\n\n```css\ndiv {\n  width: 250px;\n  height: 170px;\n  border: 1px solid pink;\n  margin: 200px auto;\n  position: relative;\n}\ndiv img {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  transition: all 0.6s;\n  transform-origin: top right;\n}\ndiv:hover img:nth-child(1) {\n  /* 鼠标经过div  第一张图片旋转 */\n  transform: rotate(60deg);\n}\ndiv:hover img:nth-child(2) {\n  transform: rotate(120deg);\n}\ndiv:hover img:nth-child(3) {\n  transform: rotate(180deg);\n}\ndiv:hover img:nth-child(4) {\n  transform: rotate(240deg);\n}\ndiv:hover img:nth-child(5) {\n  transform: rotate(300deg);\n}\ndiv:hover img:nth-child(6) {\n  transform: rotate(360deg);\n}\n```\n\n### 倾斜 skew(deg, deg)\n\n![1498443827389](https://zclzone.gitee.io/resource/image/blog/media/1498443827389.png)\n\n```css\ntransform: skew(30deg, 0deg);\n```\n\n该实例通过 skew 方法把元素水平方向上倾斜 30 度，处置方向保持不变。\n\n可以使元素按一定的角度进行倾斜，可为负值，第二个参数不写默认为 0。\n\n## 3D 变形(CSS3) transform\n\n2d x y\n\n3d x y z\n\n左手坐标系\n\n伸出左手，让拇指和食指成“L”形，大拇指向右，食指向上，中指指向前方。这样我们就建立了一个左手坐标系，拇指、食指和中指分别代表 X、Y、Z 轴的正方向。如下图\n\n![1498445587576](https://zclzone.gitee.io/resource/image/blog/media/1498445587576.png)\n\nCSS3 中的 3D 坐标系与上述的 3D 坐标系是有一定区别的，相当于其绕着 X 轴旋转了 180 度，如下图\n\n![1498459001951](https://zclzone.gitee.io/resource/image/blog/media/1498459001951.png)\n\n简单记住他们的坐标：\n\nx 左边是负的，右边是正的\n\ny 上面是负的， 下面是正的\n\nz 里面是负的， 外面是正的\n\n### rotateX()\n\n就是沿着 x 立体旋转.\n\n![1498445756802](https://zclzone.gitee.io/resource/image/blog/media/1498445756802.png)\n\n```css\nimg {\n  transition: all 0.5s ease 0s;\n}\nimg:hove {\n  transform: rotateX(180deg);\n}\n```\n\n### rotateY()\n\n沿着 y 轴进行旋转\n\n![1498446043198](https://zclzone.gitee.io/resource/image/blog/media/1498446043198.png)\n\n```css\nimg {\n  transition: all 0.5s ease 0s;\n}\nimg:hove {\n  transform: rotateX(180deg);\n}\n```\n\n### rotateZ()\n\n沿着 z 轴进行旋转\n\n```css\nimg {\n  transition: all 0.25s ease-in 0s;\n}\nimg:hover {\n  /* transform:rotateX(180deg); */\n  /* transform:rotateY(180deg); */\n  /* transform:rotateZ(180deg); */\n  /* transform:rotateX(45deg) rotateY(180deg) rotateZ(90deg) skew(0,10deg); */\n}\n```\n\n### 透视(perspective)\n\n电脑显示屏是一个 2D 平面，图像之所以具有立体感（3D 效果），其实只是一种视觉呈现，通过透视可以实现此目的。\n\n透视可以将一个 2D 平面，在转换的过程当中，呈现 3D 效果。\n\n- 透视原理： 近大远小 。\n- 浏览器透视：把近大远小的所有图像，透视在屏幕上。\n- perspective：视距，表示视点距离屏幕的长短。视点，用于模拟透视效果时人眼的位置\n\n注：并非任何情况下需要透视效果，根据开发需要进行设置。\n\nperspective 一般作为一个属性，设置给父元素，作用于所有 3D 转换的子元素\n\n理解透视距离原理：\n\n![1498446715314](https://zclzone.gitee.io/resource/image/blog/media/1498446715314.png)\n\n### translateX(x)\n\n仅水平方向移动\\*\\*（X 轴移动）\n\n![1498459697576](https://zclzone.gitee.io/resource/image/blog/media/1498459697576.png)\n\n主要目的实现移动效果\n\n### translateY(y)\n\n仅垂直方向移动（Y 轴移动）\n\n![1498459770252](https://zclzone.gitee.io/resource/image/blog/media/1498459770252.png)\n\n### translateZ(z)\n\ntransformZ 的直观表现形式就是大小变化，实质是 XY 平面相对于视点的远近变化（说远近就一定会说到离什么参照物远或近，在这里参照物就是 perspective 属性）。比如设置了 perspective 为 200px;那么 transformZ 的值越接近 200，就是离的越近，看上去也就越大，超过 200 就看不到了，因为相当于跑到后脑勺去了，我相信你正常情况下，是看不到自己的后脑勺的。\n\n### translate3d(x,y,z)\n\n[注意]其中，x 和 y 可以是长度值，也可以是百分比，百分比是相对于其本身元素水平方向的宽度和垂直方向的高度和；z 只能设置长度值\n\n### 开门案例\n\n```css\nbody {\n}\n.door {\n  width: 300px;\n  height: 300px;\n  margin: 100px auto;\n  border: 1px solid gray;\n  perspective: 1000px;\n  background: url('images/dog.gif') no-repeat cover;\n  position: relative;\n}\n.door > div {\n  box-sizing: border-box;\n  border: 1px solid black;\n}\n.left {\n  float: left;\n  width: 50%;\n  height: 100%;\n  background-color: brown;\n  transform-origin: left center;\n  transition: 1s;\n  position: relative;\n}\n.left::before {\n  content: '';\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  top: 50%;\n  right: 0px;\n  transform: translateY(-10px);\n  border: 1px solid whitesmoke;\n}\n.right {\n  width: 50%;\n  height: 100%;\n  float: left;\n  background-color: brown;\n  transform-origin: right center;\n  transition: 1s;\n  position: relative;\n}\n.right::before {\n  content: '';\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  top: 50%;\n  left: 0px;\n  transform: translateY(-10px);\n  border: 1px solid whitesmoke;\n}\n.door:hover .left {\n  transform: rotateY(-130deg);\n}\n.door:hover .right {\n  transform: rotateY(130deg);\n}\n```\n\n### backface-visibility\n\nbackface-visibility 属性定义当元素不面向屏幕时是否可见。\n\n### 翻转盒子案例\n\n```css\ndiv {\n  width: 224px;\n  height: 224px;\n  margin: 100px auto;\n  position: relative;\n}\ndiv img {\n  position: absolute;\n  top: 0;\n  left: 0;\n  transition: all 1s;\n}\ndiv img:first-child {\n  z-index: 1;\n  backface-visibility: hidden; /* 不是正面对象屏幕，就隐藏 */\n}\ndiv:hover img {\n  transform: rotateY(180deg);\n}\n```\n\n## 动画(CSS3) animation\n\n动画是 CSS3 中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。\n\n语法格式：\n\n```css\nanimation: 动画名称 动画时间 运动曲线 何时开始 播放次数 是否反方向;\n```\n\n![1498461096243](https://zclzone.gitee.io/resource/image/blog/media/1498461096243.png)\n\n关于几个值，除了名字，动画时间，延时有严格顺序要求其它随意 r\n\n```css\n@keyframes 动画名称 {\n  from{ 开始位置 }  0%\n  to{  结束  }  100%\n}\n```\n\n```\nanimation-iteration-count:infinite;  无限循环播放\nanimation-play-state:paused;   暂停动画\"\n```\n\n### 小汽车案例\n\n```css\nbody {\n  background: white;\n}\nimg {\n  width: 200px;\n}\n.animation {\n  animation-name: goback;\n  animation-duration: 5s;\n  animation-timing-function: ease;\n  animation-iteration-count: infinite;\n}\n@keyframes goback {\n  0% {\n  }\n  49% {\n    transform: translateX(1000px);\n  }\n  55% {\n    transform: translateX(1000px) rotateY(180deg);\n  }\n  95% {\n    transform: translateX(0) rotateY(180deg);\n  }\n  100% {\n    transform: translateX(0) rotateY(0deg);\n  }\n}\n```\n\n## 伸缩布局(CSS3)\n\nCSS3 在布局方面做了非常大的改进，使得我们对块级元素的布局排列变得十分灵活，适应性非常强，其强大的伸缩性，在响应式开中可以发挥极大的作用。\n\n主轴：Flex 容器的主轴主要用来配置 Flex 项目，默认是水平方向\n\n侧轴：与主轴垂直的轴称作侧轴，默认是垂直方向的\n\n方向：默认主轴从左向右，侧轴默认从上到下\n\n主轴和侧轴并不是固定不变的，通过 flex-direction 可以互换。\n\n![1498441839910](https://zclzone.gitee.io/resource/image/blog/media/1498441839910.png)\n\nFlex 布局的语法规范经过几年发生了很大的变化，也给 Flexbox 的使用带来一定的局限性，因为语法规范版本众多，浏览器支持不一致，致使 Flexbox 布局使用不多\n\n**2、各属性详解\\*\\*\\*\\***\n\n1.flex 子项目在主轴的缩放比例，不指定 flex 属性，则不参与伸缩分配\n\nmin-width 最小值 min-width: 280px 最小宽度 不能小于 280\n\nmax-width: 1280px 最大宽度 不能大于 1280\n\n2.flex-direction 调整主轴方向（默认为水平方向）\n\nflex-direction: column 垂直排列\n\nflex-direction: row 水平排列\n\nhttp://m.ctrip.com/html5/ 携程网手机端地址\n\n3、justify-content 调整主轴对齐（水平对齐）\n\n子盒子如何在父盒子里面水平对齐\n\n| 值            | 描述                                             | 白话文                                         |\n| ------------- | ------------------------------------------------ | ---------------------------------------------- |\n| flex-start    | 默认值。项目位于容器的开头。                     | 让子元素从父容器的开头开始排序但是盒子顺序不变 |\n| flex-end      | 项目位于容器的结尾。                             | 让子元素从父容器的后面开始排序但是盒子顺序不变 |\n| center        | 项目位于容器的中心。                             | 让子元素在父容器中间显示                       |\n| space-between | 项目位于各行之间留有空白的容器内。               | 左右的盒子贴近父盒子，中间的平均分布空白间距   |\n| space-around  | 项目位于各行之前、之间、之后都留有空白的容器内。 | 相当于给每个盒子添加了左右 margin 外边距       |\n\n4、align-items 调整侧轴对齐（垂直对齐）\n\n子盒子如何在父盒子里面垂直对齐（单行）\n\n| 值         | 描述                           | 白话文                                                |\n| ---------- | ------------------------------ | ----------------------------------------------------- |\n| stretch    | 默认值。项目被拉伸以适应容器。 | 让子元素的高度拉伸适用父容器（子元素不给高度的前提下) |\n| center     | 项目位于容器的中心。           | 垂直居中                                              |\n| flex-start | 项目位于容器的开头。           | 垂直对齐开始位置 上对齐                               |\n| flex-end   | 项目位于容器的结尾。           | 垂直对齐结束位置 底对齐                               |\n|            |                                |                                                       |\n\n5、flex-wrap 控制是否换行\n\n当我们子盒子内容宽度多于父盒子的时候如何处理\n\n| 值           | 描述                                                                               |\n| ------------ | ---------------------------------------------------------------------------------- |\n| nowrap       | 默认值。规定灵活的项目不拆行或不拆列。 不换行，则 收缩（压缩） 显示 强制一行内显示 |\n| wrap         | 规定灵活的项目在必要的时候拆行或拆列。                                             |\n| wrap-reverse | 规定灵活的项目在必要的时候拆行或拆列，但是以相反的顺序。                           |\n|              |                                                                                    |\n|              |                                                                                    |\n\n6、flex-flow 是 flex-direction、flex-wrap 的简写形式\n\n```css\nflex-flow: flex-direction flex-wrap;\n```\n\n白话记： flex-flow: 排列方向 换不换行;\n\n两个中间用空格\n\n例如：\n\n```css\ndisplay: flex;\n/* flex-direction: row;\nflex-wrap: wrap;   这两句话等价于下面的这句话*/\nflex-flow: column wrap; /* 两者的综合 */\n```\n\n7、align-content 堆栈（由 flex-wrap 产生的独立行）多行垂直对齐方式齐\n\nalign-content 是针对 flex 容器里面多轴(多行)的情况,align-items 是针对一行的情况进行排列。\n\n必须对父元素设置自由盒属性 display:flex;，并且设置排列方式为横向排列 flex-direction:row;并且设置换行，flex-wrap:wrap;这样这个属性的设置才会起作用。\n\n| 值            | 描述                                             | 测试 |\n| ------------- | ------------------------------------------------ | ---- |\n| stretch       | 默认值。项目被拉伸以适应容器。                   |      |\n| center        | 项目位于容器的中心。                             |      |\n| flex-start    | 项目位于容器的开头。                             |      |\n| flex-end      | 项目位于容器的结尾。                             |      |\n| space-between | 项目位于各行之间留有空白的容器内。               |      |\n| space-around  | 项目位于各行之前、之间、之后都留有空白的容器内。 |      |\n\n8、order 控制子项目的排列顺序，正序方式排序，从小到大\n\n用 css 来控制盒子的前后顺序。 用 order 就可以\n\n用整数值来定义排列顺序，数值小的排在前面。可以为负值。 默认值是 0\n\n```css\norder: 1;\n```\n\n此知识点重在理解，要明确找出主轴、侧轴、方向，各属性对应的属性值\n","slug":"CSS学习笔记","published":1,"updated":"2020-08-15T00:46:22.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckduyy4wy0010qsnv7ed8h9s3","content":"<hr>\n<h1 id=\"课程目标\"><a href=\"#课程目标\" class=\"headerlink\" title=\"课程目标:\"></a>课程目标:</h1><blockquote>\n<ol>\n<li>学会使用 CSS 选择器</li>\n<li>熟记 CSS 样式和外观属性</li>\n<li>熟练掌握 CSS 各种选择器</li>\n<li>熟练掌握 CSS 各种选择器</li>\n<li>熟练掌握 CSS 三种显示模式</li>\n<li>熟练掌握 CSS 背景属性</li>\n<li>熟练掌握 CSS 三大特性</li>\n<li>熟练掌握 CSS 盒子模型</li>\n<li>熟练掌握 CSS 浮动 10.熟练掌握 CSS 定位 11.熟练掌握 CSS 高级技巧强化 CSS</li>\n</ol>\n</blockquote>\n<hr>\n<h1 id=\"CSS-的发展历程\"><a href=\"#CSS-的发展历程\" class=\"headerlink\" title=\"CSS 的发展历程\"></a>CSS 的发展历程</h1><p>从 HTML 被发明开始，样式就以各种形式存在。不同的浏览器结合它们各自的样式语言为用户提供页面效果的控制。最初的 HTML 只包含很少的显示属性。<br>随着 HTML 的成长，为了满足页面设计者的要求，HTML 添加了很多显示功能。但是随着这些功能的增加，HTML 变的越来越杂乱，而且 HTML 页面也越来越臃肿。于是 CSS 便诞生了。</p>\n<h1 id=\"CSS-网页的美容师\"><a href=\"#CSS-网页的美容师\" class=\"headerlink\" title=\"CSS 网页的美容师\"></a>CSS 网页的美容师</h1><p>CSS 的出现，拯救了混乱的 HTML，当让更加拯救了我们 web 开发者。 让我们的网页更加丰富多彩。</p>\n<p>CSS 的最大贡献就是： 让 HTML 从样式中解脱苦海， 实现了 HTML 专注去做 结构呈现。 而样式交给 CSS 后，你完全可以放心的早点洗洗睡了！</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/x.jpg\" width=\"250\" />\n\n<p>而且。。。。。 CSS 做的很出色，如果 JavaScript 是网页的魔法师，那么 CSS 它是我们网页的美容师，不信，你看:</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/baby.jpeg\" />\n\n<p>ps: 你跟 Angelababy 只差了一个妆容的距离</p>\n<p>来个更直观的认识吧：</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/db.png\" />\n\n<p>有人说， 没有不漂亮的女人，只有不会打扮的女人。</p>\n<p>我想说， 没有不好看的网页，只有不会 CSS 的前端。</p>\n<p>网页添加 CSS 和不添加 CSS 的对比：</p>\n<p>带有 CSS 的页面</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/Cc.png\" />\n\n<p>没有 CSS 的页面</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/fff.png\" />\n\n<h1 id=\"CSS-初识\"><a href=\"#CSS-初识\" class=\"headerlink\" title=\"CSS 初识\"></a>CSS 初识</h1><p>CSS(Cascading Style Sheets)</p>\n<p>CSS 通常称为 CSS 样式表或层叠样式表（级联样式表），主要用于设置 HTML 页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。</p>\n<p>CSS 以 HTML 为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。</p>\n<h1 id=\"CSS-样式规则\"><a href=\"#CSS-样式规则\" class=\"headerlink\" title=\"CSS 样式规则\"></a>CSS 样式规则</h1><p>使用 HTML 时，需要遵从一定的规范。CSS 亦如此，要想熟练地使用 CSS 对网页进行修饰，首先需要了解 CSS 样式规则，具体格式如下：</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/gz.png\" />\n\n<pre><code>在上面的样式规则中:\n\n1.选择器用于指定CSS样式作用的HTML对象，花括号内是对该对象设置的具体样式。\n2.属性和属性值以“键值对”的形式出现。\n3.属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。\n4.属性和属性值之间用英文“:”连接。\n5.多个“键值对”之间用英文“;”进行区分。\n可以用段落 和 表格的对齐的演示。</code></pre>\n<h1 id=\"CSS-字体样式属性\"><a href=\"#CSS-字体样式属性\" class=\"headerlink\" title=\"CSS 字体样式属性\"></a>CSS 字体样式属性</h1><h2 id=\"font-size-字号大小\"><a href=\"#font-size-字号大小\" class=\"headerlink\" title=\"font-size:字号大小\"></a>font-size:字号大小</h2><p>font-size 属性用于设置字号，该属性的值可以使用相对长度单位，也可以使用绝对长度单位。其中，相对长度单位比较常用，推荐使用像素单位 px，绝对长度单位使用较少。具体如下：</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/dd.png\" />\n\n<h2 id=\"font-family-字体\"><a href=\"#font-family-字体\" class=\"headerlink\" title=\"font-family:字体\"></a>font-family:字体</h2><p>font-family 属性用于设置字体。网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑，可以使用如下 CSS 样式代码：</p>\n<p>p{ font-family:”微软雅黑”;}</p>\n<p>可以同时指定多个字体，中间以逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体。</p>\n<blockquote>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/good.png\" />常用技巧：</p>\n</blockquote>\n<pre><code>1. 现在网页中普遍使用14px+。\n2. 尽量使用偶数的数字字号。ie6等老式浏览器支持奇数会有bug。\n3. 各种字体之间必须使用英文状态下的逗号隔开。\n4. 中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。\n5. 如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: &quot;Times New Roman&quot;;。\n6. 尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。</code></pre>\n<h2 id=\"CSS-Unicode-字体\"><a href=\"#CSS-Unicode-字体\" class=\"headerlink\" title=\"CSS Unicode 字体\"></a>CSS Unicode 字体</h2><p>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。xp 系统不支持 类似微软雅黑的中文。</p>\n<p>方案一： 你可以使用英文来替代。 比如 font-family:”Microsoft Yahei”。</p>\n<p>方案二： 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。<br>font-family: “\\5FAE\\8F6F\\96C5\\9ED1”，表示设置字体为“微软雅黑”。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/shs.png\" />\n\n<p>可以通过 escape() 来测试属于什么字体。</p>\n<table>\n<thead>\n<tr>\n<th>字体名称</th>\n<th>英文名称</th>\n<th>Unicode 编码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>宋体</td>\n<td>SimSun</td>\n<td>\\5B8B\\4F53</td>\n</tr>\n<tr>\n<td>新宋体</td>\n<td>NSimSun</td>\n<td>\\65B0\\5B8B\\4F53</td>\n</tr>\n<tr>\n<td>黑体</td>\n<td>SimHei</td>\n<td>\\9ED1\\4F53</td>\n</tr>\n<tr>\n<td>微软雅黑</td>\n<td>Microsoft YaHei</td>\n<td>\\5FAE\\8F6F\\96C5\\9ED1</td>\n</tr>\n<tr>\n<td>楷体_GB2312</td>\n<td>KaiTi_GB2312</td>\n<td>\\6977\\4F53_GB2312</td>\n</tr>\n<tr>\n<td>隶书</td>\n<td>LiSu</td>\n<td>\\96B6\\4E66</td>\n</tr>\n<tr>\n<td>幼园</td>\n<td>YouYuan</td>\n<td>\\5E7C\\5706</td>\n</tr>\n<tr>\n<td>华文细黑</td>\n<td>STXihei</td>\n<td>\\534E\\6587\\7EC6\\9ED1</td>\n</tr>\n<tr>\n<td>细明体</td>\n<td>MingLiU</td>\n<td>\\7EC6\\660E\\4F53</td>\n</tr>\n<tr>\n<td>新细明体</td>\n<td>PMingLiU</td>\n<td>\\65B0\\7EC6\\660E\\4F53</td>\n</tr>\n</tbody></table>\n<p>为了照顾不同电脑的字体安装问题，我们尽量只使用宋体和微软雅黑中文字体</p>\n<h2 id=\"font-weight-字体粗细\"><a href=\"#font-weight-字体粗细\" class=\"headerlink\" title=\"font-weight:字体粗细\"></a>font-weight:字体粗细</h2><p>字体加粗除了用 b 和 strong 标签之外，可以使用 CSS 来实现，但是 CSS 是没有语义的。</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">font-weight属性用于定义字体的粗细，其可用属性值：normal、bold、bolder、lighter、100~900（100的整数倍）。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/good.png\" />小技巧：</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\">数字 <span class=\"token number\">400</span> 等价于 normal，而 <span class=\"token number\">700</span> 等价于 bold。  但是我们更喜欢用数字来表示。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"font-style-字体风格\"><a href=\"#font-style-字体风格\" class=\"headerlink\" title=\"font-style:字体风格\"></a>font-style:字体风格</h2><p>字体倾斜除了用 i 和 em 标签之外，可以使用 CSS 来实现，但是 CSS 是没有语义的。</p>\n<p>font-style 属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：</p>\n<p>normal：默认值，浏览器会显示标准的字体样式。</p>\n<p>italic：浏览器会显示斜体的字体样式。</p>\n<p>oblique：浏览器会显示倾斜的字体样式。</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/good.png\" />小技巧：</p>\n<pre><code>平时我们很少给文字加斜体，反而喜欢给斜体标签（em，i）改为普通模式。</code></pre>\n<h2 id=\"font-综合设置字体样式-重点\"><a href=\"#font-综合设置字体样式-重点\" class=\"headerlink\" title=\"font:综合设置字体样式 (重点)\"></a>font:综合设置字体样式 (重点)</h2><p>font 属性用于对字体样式进行综合设置，其基本语法格式如下：</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\">选择器 &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font</span><span class=\"token punctuation\">:</span> font-style font-weight font-size/line-height font-family<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre><code>使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开。\n\n注意：其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。\n</code></pre>\n<h1 id=\"开发者工具（chrome）\"><a href=\"#开发者工具（chrome）\" class=\"headerlink\" title=\"开发者工具（chrome）\"></a>开发者工具（chrome）</h1><p>此工具是我们的必备工具，以后代码出了问题，我们首先第一反应就是：</p>\n<p>“按 F12”或者是 “shift+ctrl+i” 打开 开发者工具。</p>\n<p>菜单： 右击网页空白出—查看</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/chrome.png\" />\n\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/good.png\" />小技巧：</p>\n<ol>\n<li>ctrl+滚轮 可以 放大开发者工具代码大小。</li>\n<li>左边是 HTML 元素结构 右边是 CSS 样式。</li>\n<li>右边 CSS 样式可以改动数值和颜色查看更改后效果。</li>\n</ol>\n<h1 id=\"选择器（重点）\"><a href=\"#选择器（重点）\" class=\"headerlink\" title=\"选择器（重点）\"></a>选择器（重点）</h1><p>要想将 CSS 样式应用于特定的 HTML 元素，首先需要找到该目标元素。在 CSS 中，执行这一任务的样式规则部分被称为选择器（选择符）。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/ax.png\" />\n\n<p>如上图所以，要把里面的小黄人分为 2 组，最快的方法怎办？</p>\n<p>很多， 比如 一只眼睛的一组，剩下的一组</p>\n<p>这就用到基础选择器组：</p>\n<h2 id=\"标签选择器（元素选择器）\"><a href=\"#标签选择器（元素选择器）\" class=\"headerlink\" title=\"标签选择器（元素选择器）\"></a>标签选择器（元素选择器）</h2><p>标签选择器是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。其基本语法格式如下：</p>\n<pre><code>标签名&amp;#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &amp;#125;  或者\n元素名&amp;#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &amp;#125;</code></pre>\n<p>标签选择器最大的优点是能快速为页面中同类型的标签统一样式，同时这也是他的缺点，不能设计差异化样式。</p>\n<p>课堂案例：</p>\n<p>传智简介</p>\n<h2 id=\"类选择器\"><a href=\"#类选择器\" class=\"headerlink\" title=\"类选择器\"></a>类选择器</h2><p>类选择器使用“.”（英文点号）进行标识，后面紧跟类名，其基本语法格式如下：</p>\n<pre><code>.类名&amp;#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &amp;#125;</code></pre>\n<pre><code> 标签调用的时候用 class=“类名”  即可。</code></pre>\n<p>类选择器最大的优势是可以为元素对象定义单独或相同的样式。</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/good.png\" />小技巧：</p>\n<pre><code>1.长名称或词组可以使用中横线来为选择器命名。\n2.不建议使用“_”下划线来命名CSS选择器。</code></pre>\n<p>​ 输入的时候少按一个 shift 键;<br>　浏览器兼容问题 (比如使用<em>tips 的选择器命名，在 IE6 是无效的)<br>　能良好区分 JavaScript 变量命名(JS 变量命名是用“</em>”)</p>\n<pre><code>3.不要纯数字、中文等命名， 尽量使用英文字母来表示。</code></pre>\n<p>猜谜底游戏：</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/midi.png\" width=\"450\" /> 你猜？</p>\n<p>命名规范： 见附件（Web 前端开发规范手册.doc）</p>\n<p>命名是我们通俗约定的，但是没有规定必须用这些常用的命名。</p>\n<p>课堂案例：</p>\n <img src=\"https://zclzone.gitee.io/resource/image/blog/media/go.png\" />\n\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n    span &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>blue &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>red &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>orange &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> orange<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>green &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>G<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>o<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>orange<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>o<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>g<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>green<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>l<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>e<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"多类名选择器\"><a href=\"#多类名选择器\" class=\"headerlink\" title=\"多类名选择器\"></a>多类名选择器</h2><p>我们可以给标签指定多个类名，从而达到更多的选择目的。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/lei.png\" />\n\n<p>注意：</p>\n<pre><code>1. 样式显示效果跟HTML元素中的类名先后顺序没有关系,受CSS样式书写的上下顺序有关。\n2. 各个类名中间用空格隔开。</code></pre>\n<p>多类名选择器在后期布局比较复杂的情况下，还是较多使用的。</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>pink fontWeight font20<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>亚瑟<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>font20<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>刘备<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>font14 pink<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>安其拉<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>font14<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>貂蝉<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"id-选择器\"><a href=\"#id-选择器\" class=\"headerlink\" title=\"id 选择器\"></a>id 选择器</h2><p>id 选择器使用“#”进行标识，后面紧跟 id 名，其基本语法格式如下：</p>\n<pre><code>#id名&amp;#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &amp;#125;</code></pre>\n<p>该语法中，id 名即为 HTML 元素的 id 属性值，大多数 HTML 元素都可以定义 id 属性，元素的 id 值是唯一的，只能对应于文档中某一个具体的元素。</p>\n<p>用法基本和类选择器相同。</p>\n<h2 id=\"id-选择器和类选择器区别\"><a href=\"#id-选择器和类选择器区别\" class=\"headerlink\" title=\"id 选择器和类选择器区别\"></a>id 选择器和类选择器区别</h2><p>W3C 标准规定，在同一个页面内，不允许有相同名字的 id 对象出现，但是允许相同名字的 class。</p>\n<p>类选择器（class） 好比人的名字， 是可以多次重复使用的， 比如 张伟 王伟 李伟 李娜</p>\n<p>id 选择器 好比人的身份证号码， 全中国是唯一的， 不得重复。 只能使用一次。</p>\n<p><strong><em>id 选择器和类选择器最大的不同在于 使用次数上。</em></strong></p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/zfb.jpg\" />\n\n<h2 id=\"通配符选择器\"><a href=\"#通配符选择器\" class=\"headerlink\" title=\"通配符选择器\"></a>通配符选择器</h2><p>通配符选择器用“*”号表示，他是所有选择器中作用范围最广的，能匹配页面中所有的元素。其基本语法格式如下：</p>\n<pre><code>* &amp;#123; 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &amp;#125;</code></pre>\n<p>例如下面的代码，使用通配符选择器定义 CSS 样式，清除所有 HTML 标记的默认边距。</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\">* &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 定义外边距*/</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 定义内边距*/</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意：</p>\n<p>这个通配符选择器，就像我们的电影明星中的梦中情人， 想想它就好了，但是它不会和你过日子。</p>\n<h2 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h2><p>伪类选择器用于向某些选择器添加特殊的效果。比如给链接添加特殊效果， 比如可以选择 第 1 个，第 n 个元素。</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\">为了和我们刚才学的类选择器相区别， 类选择器是一个点 比如 <span class=\"token number\">.</span>demo &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n而我们的伪类 用 <span class=\"token number\">2</span>个点 就是 冒号 比如 <span class=\"token punctuation\">:</span>link &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"链接伪类选择器\"><a href=\"#链接伪类选择器\" class=\"headerlink\" title=\"链接伪类选择器\"></a>链接伪类选择器</h3><ul>\n<li>:link /_ 未访问的链接 _/</li>\n<li>:visited /_ 已访问的链接 _/</li>\n<li>:hover /_ 鼠标移动到链接上 _/</li>\n<li>:active /_ 选定的链接 _/</li>\n</ul>\n<p>注意写的时候，他们的顺序尽量不要颠倒 按照 lvha 的顺序。 love hate 爱上了讨厌 记忆法 或者 lv 包包 非常 hao</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\">a &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">/* a是标签选择器  所有的链接 */</span>\n  <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> <span class=\"token number\">700</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">16</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> gray<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">a</span><span class=\"token punctuation\">:</span>hover &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">/* :hover 是链接伪类选择器 鼠标经过 */</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/*  鼠标经过的时候，由原来的 灰色 变成了红色 */</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"结构-位置-伪类选择器（CSS3\"><a href=\"#结构-位置-伪类选择器（CSS3\" class=\"headerlink\" title=\"结构(位置)伪类选择器（CSS3)\"></a>结构(位置)伪类选择器（CSS3)</h3><ul>\n<li>:first-child :选取属于其父元素的首个子元素的指定选择器</li>\n<li>:last-child :选取属于其父元素的最后一个子元素的指定选择器</li>\n<li>:nth-child(n) ： 匹配属于其父元素的第 N 个子元素，不论元素的类型</li>\n<li>:nth-last-child(n) ：选择器匹配属于其元素的第 N 个子元素的每个元素，不论元素的类型，从最后一个子元素开始计数。<br>n 可以是数字、关键词或公式</li>\n<li>​</li>\n</ul>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">li</span><span class=\"token punctuation\">:</span>first-child &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">/*  选择第一个孩子 */</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">li</span><span class=\"token punctuation\">:</span>last-child &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">/* 最后一个孩子 */</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> purple<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">li</span><span class=\"token punctuation\">:</span><span class=\"token function\">nth-child</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">/* 选择第4个孩子  n  代表 第几个的意思 */</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> skyblue<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"目标伪类选择器-CSS3\"><a href=\"#目标伪类选择器-CSS3\" class=\"headerlink\" title=\"目标伪类选择器(CSS3)\"></a>目标伪类选择器(CSS3)</h3><p>:target 目标伪类选择器 :选择器可用于选取当前活动的目标元素</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token punctuation\">:</span>target &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span>px<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"CSS-注释\"><a href=\"#CSS-注释\" class=\"headerlink\" title=\"CSS 注释\"></a>CSS 注释</h1><pre><code>CSS规则是使用     /*  需要注释的内容  */  进行注释的，即在需要注释的内容前使用 “/*” 标记开始注释，在内容的结尾使用 “*/”结束。</code></pre>\n<p>例如：</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\">p &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">14</span>px<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 所有的字体是14像素大小*/</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"CSS-外观属性\"><a href=\"#CSS-外观属性\" class=\"headerlink\" title=\"CSS 外观属性\"></a>CSS 外观属性</h1><h2 id=\"color-文本颜色\"><a href=\"#color-文本颜色\" class=\"headerlink\" title=\"color:文本颜色\"></a>color:文本颜色</h2><p>color 属性用于定义文本的颜色，其取值方式有如下 3 种：</p>\n<p>1.预定义的颜色值，如 red，green，blue 等。</p>\n<p>2.十六进制，如#FF0000，#FF6600，#29D794 等。实际工作中，十六进制是最常用的定义颜色的方式。</p>\n<p>3.RGB 代码，如红色可以表示为 rgb(255,0,0)或 rgb(100%,0%,0%)。</p>\n<p>需要注意的是，如果使用 RGB 代码的百分比颜色值，取值为 0 时也不能省略百分号，必须写为 0%。</p>\n<h2 id=\"line-height-行间距\"><a href=\"#line-height-行间距\" class=\"headerlink\" title=\"line-height:行间距\"></a>line-height:行间距</h2><p>ine-height 属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。line-height 常用的属性值单位有三种，分别为像素 px，相对值 em 和百分比%，实际工作中使用最多的是像素 px</p>\n<p>一般情况下，行距比字号大 7.8 像素左右就可以了。</p>\n<h2 id=\"text-align-水平对齐方式\"><a href=\"#text-align-水平对齐方式\" class=\"headerlink\" title=\"text-align:水平对齐方式\"></a>text-align:水平对齐方式</h2><pre><code>text-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性。其可用属性值如下：</code></pre>\n<p>left：左对齐（默认值）</p>\n<p>right：右对齐</p>\n<p>center：居中对齐</p>\n<h2 id=\"text-indent-首行缩进\"><a href=\"#text-indent-首行缩进\" class=\"headerlink\" title=\"text-indent:首行缩进\"></a>text-indent:首行缩进</h2><p>text-indent 属性用于设置首行文本的缩进，其属性值可为不同单位的数值、em 字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值, 建议使用 em 作为设置单位。</p>\n<p>1em 就是一个字的宽度 如果是汉字的段落， 1em 就是一个汉字的宽度</p>\n<h2 id=\"letter-spacing-字间距\"><a href=\"#letter-spacing-字间距\" class=\"headerlink\" title=\"letter-spacing:字间距\"></a>letter-spacing:字间距</h2><p>letter-spacing 属性用于定义字间距，所谓字间距就是字符与字符之间的空白。其属性值可为不同单位的数值，允许使用负值，默认为 normal。</p>\n<h2 id=\"word-spacing-单词间距\"><a href=\"#word-spacing-单词间距\" class=\"headerlink\" title=\"word-spacing:单词间距\"></a>word-spacing:单词间距</h2><p>word-spacing 属性用于定义英文单词之间的间距，对中文字符无效。和 letter-spacing 一样，其属性值可为不同单位的数值，允许使用负值，默认为 normal。</p>\n<p>word-spacing 和 letter-spacing 均可对英文进行设置。不同的是 letter-spacing 定义的为字母之间的间距，而 word-spacing 定义的为英文单词之间的间距。</p>\n<h2 id=\"颜色半透明-css3\"><a href=\"#颜色半透明-css3\" class=\"headerlink\" title=\"颜色半透明(css3)\"></a>颜色半透明(css3)</h2><p>文字颜色到了 CSS3 我们可以采取半透明的格式了语法格式如下：</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\">    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>r,g,b,a<span class=\"token punctuation\">)</span>  a 是alpha  透明的意思  取值范围 <span class=\"token number\">0</span>~<span class=\"token number\">1</span>之间    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>,<span class=\"token number\">0</span>,<span class=\"token number\">0</span>,<span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"文字阴影-CSS3\"><a href=\"#文字阴影-CSS3\" class=\"headerlink\" title=\"文字阴影(CSS3)\"></a>文字阴影(CSS3)</h2><p>以后我们可以给我们的文字添加阴影效果了 Shadow 影子</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">text-shadow</span><span class=\"token punctuation\">:</span> 水平位置 垂直位置 模糊距离 阴影颜色<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498467502625.png\" alt=\"1498467502625\"></p>\n<ol>\n<li>前两项是必须写的。 后两项可以选写。</li>\n</ol>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498467519665.png\" alt=\"1498467519665\"></p>\n<h1 id=\"sublime-快捷方式\"><a href=\"#sublime-快捷方式\" class=\"headerlink\" title=\"sublime 快捷方式\"></a>sublime 快捷方式</h1><p>sublime 可以快速提高我们代码的书写方式</p>\n<ol>\n<li><p>生成标签 直接输入标签名 按 tab 键即可 比如 div 然后 tab 键， 就可以生成 <div></div></p>\n</li>\n<li><p>如果想要生成多个相同标签 加上 * 就可以了 比如 div*3 就可以快速生成 3 个 div</p>\n</li>\n<li><p>如果有父子级关系的标签，可以用 &gt; 比如 ul &gt; li 就可以了</p>\n</li>\n<li><p>如果有兄弟关系的标签，用 + 就可以了 比如 div+p</p>\n</li>\n<li><p>如果生成带有类名或者 id 名字的， 直接写 .demo 或者 #two tab 键就可以了</p>\n<p>​</p>\n</li>\n</ol>\n<h1 id=\"引入-CSS-样式表（书写位置）\"><a href=\"#引入-CSS-样式表（书写位置）\" class=\"headerlink\" title=\"引入 CSS 样式表（书写位置）\"></a>引入 CSS 样式表（书写位置）</h1><p>CSS 可以写到那个位置？ 是不是一定写到 html 文件里面呢？</p>\n<h2 id=\"内部样式表\"><a href=\"#内部样式表\" class=\"headerlink\" title=\"内部样式表\"></a>内部样式表</h2><p>内嵌式是将 CSS 代码集中写在 HTML 文档的 head 头部标签中，并且用 style 标签定义，其基本语法格式如下：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/CSS<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n    选择器 &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n      属性<span class=\"token property\">1</span><span class=\"token punctuation\">:</span> 属性值<span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      属性<span class=\"token property\">2</span><span class=\"token punctuation\">:</span> 属性值<span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n      属性<span class=\"token property\">3</span><span class=\"token punctuation\">:</span> 属性值<span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>语法中，style 标签一般位于 head 标签中 title 标签之后，也可以把他放在 HTML 文档的任何地方。</p>\n<p>type=”text/CSS” 在 html5 中可以省略， 写上也比较符合规范， 所以这个地方可以写也可以省略。</p>\n<h2 id=\"行内式（内联样式）\"><a href=\"#行内式（内联样式）\" class=\"headerlink\" title=\"行内式（内联样式）\"></a>行内式（内联样式）</h2><p>内联样式，又有人称行内样式、行间样式、内嵌样式。是通过标签的 style 属性来设置元素的样式，其基本语法格式如下：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>标签名</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\">属性<span class=\"token property\">1</span><span class=\"token punctuation\">:</span>属性值<span class=\"token number\">1</span><span class=\"token punctuation\">;</span> 属性<span class=\"token property\">2</span><span class=\"token punctuation\">:</span>属性值<span class=\"token number\">2</span><span class=\"token punctuation\">;</span> 属性<span class=\"token property\">3</span><span class=\"token punctuation\">:</span>属性值<span class=\"token number\">3</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> 内容 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>标签名</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>语法中 style 是标签的属性，实际上任何 HTML 标签都拥有 style 属性，用来设置行内式。其中属性和值的书写规范与 CSS 样式规则相同，行内式只对其所在的标签及嵌套在其中的子标签起作用。</p>\n<h2 id=\"外部样式表（外链式）\"><a href=\"#外部样式表（外链式）\" class=\"headerlink\" title=\"外部样式表（外链式）\"></a>外部样式表（外链式）</h2><p>链入式是将所有的样式放在一个或多个以.CSS 为扩展名的外部样式表文件中，通过 link 标签将外部样式表文件链接到 HTML 文档中，其基本语法格式如下：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>CSS文件的路径<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/CSS<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>注意： link 是个单标签哦!!!</p>\n<p>该语法中，link 标签需要放在 head 头部标签中，并且必须指定 link 标签的三个属性，具体如下：</p>\n<pre><code>href：定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。\ntype：定义所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。\nrel：定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。</code></pre>\n<h2 id=\"三种样式表总结\"><a href=\"#三种样式表总结\" class=\"headerlink\" title=\"三种样式表总结\"></a>三种样式表总结</h2><table>\n<thead>\n<tr>\n<th>样式表</th>\n<th>优点</th>\n<th>缺点</th>\n<th>使用情况</th>\n<th>控制范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>行内样式表</td>\n<td>书写方便，权重高</td>\n<td>没有实现样式和结构相分离</td>\n<td>较少</td>\n<td>控制一个标签（少）</td>\n</tr>\n<tr>\n<td>内部样式表</td>\n<td>部分结构和样式相分离</td>\n<td>没有彻底分离</td>\n<td>较多</td>\n<td>控制一个页面（中）</td>\n</tr>\n<tr>\n<td>外部样式表</td>\n<td>完全实现结构和样式相分离</td>\n<td>需要引入</td>\n<td>最多，强烈推荐</td>\n<td>控制整个站点（多）</td>\n</tr>\n</tbody></table>\n<h1 id=\"标签显示模式（display）\"><a href=\"#标签显示模式（display）\" class=\"headerlink\" title=\"标签显示模式（display）\"></a>标签显示模式（display）</h1><img src=\"https://zclzone.gitee.io/resource/image/blog/media/people.png\" />\n\n<p>非洲黑人： 皮肤内黑色素含量高，以吸收阳光中的紫外线，保护皮肤内部结构免遭损害，头发象羊毛一样卷曲，使每根卷发周围都有许多空隙，空隙充满空气，卷发有隔热作用。</p>\n<p>欧洲白人： 生活寒带或着是说常年温度较低的地缘,加上年日照时间少，身体的黑色素沉淀比较少``所以出现皮肤、发色、瞳晕都呈现浅色</p>\n<p>传智黄人： 我中间的。。。 <img src=\"https://zclzone.gitee.io/resource/image/blog/media/h.jpg\" alt=\"\" /></p>\n<p>最重要的总结： 是为了更好的适应环境而完成的自然选择。</p>\n<p>同理，我们网页的标签非常多，再不同地方会用到不同类型的标签，以便更好的完成我们的网页。</p>\n<p>标签的类型(显示模式)</p>\n<p>HTML 标签一般分为块标签和行内标签两种类型，它们也称块元素和行内元素。具体如下：</p>\n<h2 id=\"块级元素-block-level\"><a href=\"#块级元素-block-level\" class=\"headerlink\" title=\"块级元素(block-level)\"></a>块级元素(block-level)</h2><p>每个块元素通常都会独自占据一整行或多整行，可以对其设置宽度、高度、对齐等属性，常用于网页布局和网页结构的搭建。</p>\n<pre><code>常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等，其中&lt;div&gt;标签是最典型的块元素。</code></pre>\n  <img src=\"https://zclzone.gitee.io/resource/image/blog/media/xtf.jpg\" />\n\n<p>块级元素的特点：</p>\n<p>（1）总是从新行开始</p>\n<p>（2）高度，行高、外边距以及内边距都可以控制。</p>\n<p>（3）宽度默认是容器的 100%</p>\n<p>（4）可以容纳内联元素和其他块元素。</p>\n<h2 id=\"行内元素-inline-level\"><a href=\"#行内元素-inline-level\" class=\"headerlink\" title=\"行内元素(inline-level)\"></a>行内元素(inline-level)</h2><p>行内元素（内联元素）不占有独立的区域，仅仅靠自身的字体大小和图像尺寸来支撑结构，一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式。</p>\n<pre><code>常见的行内元素有&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;等，其中&lt;span&gt;标签最典型的行内元素。</code></pre>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/wf.jpg\" /> 我一样重要</p>\n<p>行内元素的特点：</p>\n<p>（1）和相邻行内元素在一行上。</p>\n<p>（2）高、宽无效，但水平方向的 padding 和 margin 可以设置，垂直方向的无效。</p>\n<p>（3）默认宽度就是它本身内容的宽度。</p>\n<p>（4）行内元素只能容纳文本或则其他行内元素。（a 特殊）</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/w.jpg\" /> 注意：</p>\n<ol>\n<li>只有 文字才 能组成段落 因此 p 里面不能放块级元素，同理还有这些标签 h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。</li>\n<li>链接里面不能再放链接。</li>\n</ol>\n<h2 id=\"块级元素和行内元素区别\"><a href=\"#块级元素和行内元素区别\" class=\"headerlink\" title=\"块级元素和行内元素区别\"></a>块级元素和行内元素区别</h2><pre><code>块级元素的特点：\n（1）总是从新行开始\n（2）高度，行高、外边距以及内边距都可以控制。\n（3）宽度默认是容器的100%\n（4）可以容纳内联元素和其他块元素。</code></pre>\n<pre><code>行内元素的特点：\n（1）和相邻行内元素在一行上。\n（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。\n（3）默认宽度就是它本身内容的宽度。\n（4）行内元素只能容纳文本或则其他行内元素。</code></pre>\n<h2 id=\"行内块元素（inline-block）\"><a href=\"#行内块元素（inline-block）\" class=\"headerlink\" title=\"行内块元素（inline-block）\"></a>行内块元素（inline-block）</h2><pre><code>在行内元素中有几个特殊的标签——&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。\n\n行内块元素的特点：\n（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。\n（2）默认宽度就是它本身内容的宽度。\n（3）高度，行高、外边距以及内边距都可以控制。</code></pre>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/lyc.jpg\" width=\"400\" />\n\n<h2 id=\"标签显示模式转换-display\"><a href=\"#标签显示模式转换-display\" class=\"headerlink\" title=\"标签显示模式转换 display\"></a>标签显示模式转换 display</h2><p>块转行内：display:inline;</p>\n<p>行内转块：display:block;</p>\n<p>块、行内元素转换为行内块： display: inline-block;</p>\n<p>此阶段，我们只需关心这三个，其他的是我们后面的工作。</p>\n<h1 id=\"CSS-复合选择器\"><a href=\"#CSS-复合选择器\" class=\"headerlink\" title=\"CSS 复合选择器\"></a>CSS 复合选择器</h1><p>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的,目的是为了可以选择更准确更精细的目标元素标签。</p>\n<h2 id=\"交集选择器\"><a href=\"#交集选择器\" class=\"headerlink\" title=\"交集选择器\"></a>交集选择器</h2><p>交集选择器由两个选择器构成，其中第一个为标签选择器，第二个为 class 选择器，两个选择器之间不能有空格，如 h3.special。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/jiao.png\" />\n\n<p><strong>记忆技巧：</strong></p>\n<p>交集选择器 是 并且的意思。 即…又…的意思</p>\n<pre><code>比如：   p.one   选择的是： 类名为 .one  的 段落标签。</code></pre>\n<p>用的相对来说比较少，不太建议使用。</p>\n<h2 id=\"并集选择器\"><a href=\"#并集选择器\" class=\"headerlink\" title=\"并集选择器\"></a>并集选择器</h2><p>并集选择器（CSS 选择器分组）是各个选择器通过<strong style=\"color:#f00\">逗号</strong>连接而成的，任何形式的选择器（包括标签选择器、class 类选择器 id 选择器等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，或部分相同，就可以利用并集选择器为它们定义相同的 CSS 样式。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/bing.png\" />\n\n<p>记忆技巧：</p>\n<p>并集选择器 和 的意思， 就是说，只要逗号隔开的，所有选择器都会执行后面样式。</p>\n<pre><code>比如  .one, p , #test &amp;#123;color: #F00;&amp;#125;  表示   .one 和 p  和 #test 这三个选择器都会执行颜色为红色。  通常用于集体声明。</code></pre>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/hu.gif\" /> 他和他，在一起， 在一起 一起的意思</p>\n<h2 id=\"后代选择器\"><a href=\"#后代选择器\" class=\"headerlink\" title=\"后代选择器\"></a>后代选择器</h2><p>后代选择器又称为包含选择器，用来选择元素或元素组的后代，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/hou.png\" />\n\n<p>子孙后代都可以这么选择。 或者说，它能选择任何包含在内 的标签。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/li.png\" />\n\n<h2 id=\"子元素选择器\"><a href=\"#子元素选择器\" class=\"headerlink\" title=\"子元素选择器\"></a>子元素选择器</h2><p>子元素选择器只能选择作为某元素子元素的元素。其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 &gt; 进行连接，注意，符号左右两侧各保留一个空格。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/zi1.png\" />\n\n<p>白话： 这里的子 指的是 亲儿子 不包含孙子 重孙子之类。</p>\n<pre><code> 比如：  .demo &gt; h3 &amp;#123;color: red;&amp;#125;   说明  h3 一定是demo 亲儿子。  demo 元素包含着h3。</code></pre>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/san.jpg\" />\n\n<h2 id=\"测试题\"><a href=\"#测试题\" class=\"headerlink\" title=\"测试题\"></a>测试题</h2><pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>nav<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 主导航栏 --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>公司首页<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>公司简介<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>公司产品<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>联系我们<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>公司邮箱<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>公司电话<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>sitenav<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 侧导航栏 --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>site-l<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>左侧侧导航栏<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>site-r<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在不修改以上代码的前提下，完成以下任务：</p>\n<ol>\n<li><p>链接 登录 的颜色为红色,同时主导航栏里面的所有的链接改为蓝色 (简单)</p>\n</li>\n<li><p>主导航栏和侧导航栏里面文字都是 14 像素并且是微软雅黑。（中等)</p>\n</li>\n<li><p>主导航栏里面的一级菜单链接文字颜色为绿色。（难)</p>\n<p>​</p>\n</li>\n</ol>\n<h2 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h2><p>选取标签带有某些特殊属性的选择器 我们成为属性选择器</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token comment\" spellcheck=\"true\">/* 获取到 拥有 该属性的元素 */</span>\ndiv[class^=<span class=\"token string\">'font'</span>] &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">/*  class^=font 表示 font 开始位置就行了 */</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\ndiv[class$=<span class=\"token string\">'footer'</span>] &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">/*  class$=footer 表示 footer 结束位置就行了 */</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> skyblue<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\ndiv[class*=<span class=\"token string\">'tao'</span>] &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">/* class*=tao  *=  表示tao 在任意位置都可以 */</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>font12<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>属性选择器<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>font12<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>属性选择器<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>font24<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>属性选择器<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>font24<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>属性选择器<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>font24<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>属性选择器<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>24font<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>属性选择器123<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>sub-footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>属性选择器footer<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>jd-footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>属性选择器footer<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>news-tao-nav<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>属性选择器<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>news-tao-header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>属性选择器<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>tao-header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>属性选择器<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"伪元素选择器（CSS3\"><a href=\"#伪元素选择器（CSS3\" class=\"headerlink\" title=\"伪元素选择器（CSS3)\"></a>伪元素选择器（CSS3)</h2><ol>\n<li>E::first-letter 文本的第一个单词或字（如中文、日文、韩文等）</li>\n<li>E::first-line 文本第一行；</li>\n<li>E::selection 可改变选中文本的样式；</li>\n</ol>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">p</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>first-letter &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> hotpink<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/* 首行特殊样式 */</span>\n<span class=\"token property\">p</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>first-line &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> skyblue<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token property\">p</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>selection &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">/* font-size: 50px; */</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> orange<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>4、E::before 和 E::after</p>\n<p>在 E 元素内部的开始位置和结束位创建一个元素，该元素为行内元素，且必须要结合 content 属性使用。</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">div</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>befor &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'开始'</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">div</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>after &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'结束'</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>E:after、E:before 在旧版本里是伪元素，CSS3 的规范里“:”用来表示伪类，“::”用来表示伪元素，但是在高版本浏览器下 E:after、E:before 会被自动识别为 E::after、E::before，这样做的目的是用来做兼容处理。</p>\n<p>E:after、E:before 后面的练习中会反复用到，目前只需要有个大致了解</p>\n<p>“:” 与 “::” 区别在于区分伪类和伪元素</p>\n<h1 id=\"CSS-书写规范\"><a href=\"#CSS-书写规范\" class=\"headerlink\" title=\"CSS 书写规范\"></a>CSS 书写规范</h1><p>开始就形成良好的书写规范，是你专业化的开始。</p>\n<h2 id=\"空格规范\"><a href=\"#空格规范\" class=\"headerlink\" title=\"空格规范\"></a>空格规范</h2><p>【强制】 选择器 与 { 之间必须包含空格。</p>\n<p>示例： .selector { }</p>\n<p>【强制】 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。</p>\n<p>示例：</p>\n<p>font-size: 12px;</p>\n<h2 id=\"选择器规范\"><a href=\"#选择器规范\" class=\"headerlink\" title=\"选择器规范\"></a>选择器规范</h2><p>【强制】 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。</p>\n<p>示例：</p>\n<pre><code>/* good */\n.post,\n.page,\n.comment &amp;#123;\n    line-height: 1.5;\n&amp;#125;\n\n\n/* bad */\n.post, .page, .comment &amp;#123;\n    line-height: 1.5;\n&amp;#125;</code></pre>\n<p>【建议】 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。</p>\n<p>示例：</p>\n<pre><code>/* good */\n#username input &amp;#123;&amp;#125;\n.comment .avatar &amp;#123;&amp;#125;\n\n/* bad */\n.page .header .login #username input &amp;#123;&amp;#125;\n.comment div * &amp;#123;&amp;#125;</code></pre>\n<h2 id=\"属性规范\"><a href=\"#属性规范\" class=\"headerlink\" title=\"属性规范\"></a>属性规范</h2><p>【强制】 属性定义必须另起一行。</p>\n<p>示例：</p>\n<pre><code>/* good */\n.selector &amp;#123;\n    margin: 0;\n    padding: 0;\n&amp;#125;\n\n/* bad */\n.selector &amp;#123; margin: 0; padding: 0; &amp;#125;</code></pre>\n<p>【强制】 属性定义后必须以分号结尾。</p>\n<p>示例：</p>\n<pre><code>/* good */\n.selector &amp;#123;\n    margin: 0;\n&amp;#125;\n\n/* bad */\n.selector &amp;#123;\n    margin: 0\n&amp;#125;</code></pre>\n<h1 id=\"CSS-背景-background\"><a href=\"#CSS-背景-background\" class=\"headerlink\" title=\"CSS 背景(background)\"></a>CSS 背景(background)</h1><p>CSS 可以添加背景颜色和背景图片，以及来进行图片设置。</p>\n<table>\n<thead>\n<tr>\n<th>background-color</th>\n<th>背景颜色</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>background-image</td>\n<td>背景图片地址</td>\n</tr>\n<tr>\n<td>background-repeat</td>\n<td>是否平铺</td>\n</tr>\n<tr>\n<td>background-position</td>\n<td>背景位置</td>\n</tr>\n<tr>\n<td>background-attachment</td>\n<td>背景固定还是滚动</td>\n</tr>\n<tr>\n<td>背景的合写（复合属性）</td>\n<td></td>\n</tr>\n<tr>\n<td>background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"背景图片-image\"><a href=\"#背景图片-image\" class=\"headerlink\" title=\"背景图片(image)\"></a>背景图片(image)</h2><p>语法：</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> none | url <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>参数：</p>\n<p>none : 　无背景图（默认的）<br>url : 　使用绝对或相对地址指定背景图像</p>\n<p>background-image 属性允许指定一个图片展示在背景中（只有 CSS3 才可以多背景）可以和 background-color 连用。 如果图片不重复地话，图片覆盖不到地地方都会被背景色填充。 如果有背景图片平铺，则会覆盖背景颜色。</p>\n<p>小技巧： 我们提倡 背景图片后面的地址，url 不要加引号。</p>\n<h2 id=\"背景平铺（repeat）\"><a href=\"#背景平铺（repeat）\" class=\"headerlink\" title=\"背景平铺（repeat）\"></a>背景平铺（repeat）</h2><p>语法：</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">background-repeat</span><span class=\"token punctuation\">:</span> repeat | no-repeat | repeat-x | repeat-y<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>参数：</p>\n<p>repeat : 　背景图像在纵向和横向上平铺（默认的）</p>\n<p>no-repeat : 　背景图像不平铺</p>\n<p>repeat-x : 　背景图像在横向上平铺</p>\n<p>repeat-y : 　背景图像在纵向平铺</p>\n<p>设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。</p>\n<p>repeat-x : 　背景图像在横向上平铺</p>\n<p>repeat-y : 　背景图像在纵向平铺</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/y.png\" width=\"600\"/>\n\n<p>设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/q.png\" width=\"600\"/>\n\n<h2 id=\"背景位置-position\"><a href=\"#背景位置-position\" class=\"headerlink\" title=\"背景位置(position)\"></a>背景位置(position)</h2><p>语法：</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">background-position</span> <span class=\"token punctuation\">:</span> length || length\n\n<span class=\"token property\">background-position</span> <span class=\"token punctuation\">:</span> position || position<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>参数：</p>\n<p>length : 　百分数 | 由浮点数字和单位标识符组成的长度值。请参阅长度单位<br>position : 　 top | center | bottom | left | center | right</p>\n<p>说明：</p>\n<p>设置或检索对象的背景图像位置。必须先指定 background-image 属性。默认值为：(0% 0%)。<br>如果只指定了一个值，该值将用于横坐标。纵坐标将默认为 50%。第二个值将用于纵坐标。</p>\n<p>注意：</p>\n<ol>\n<li>position 后面是 x 坐标和 y 坐标。 可以使用方位名词或者 精确单位。</li>\n<li>如果和精确单位和方位名字混合使用，则必须是 x 坐标在前，y 坐标后面。比如 background-position: 15px top; 则 15px 一定是 x 坐标 top 是 y 坐标。</li>\n</ol>\n<p>实际工作用的最多的，就是背景图片居中对齐了。</p>\n<h2 id=\"背景附着\"><a href=\"#背景附着\" class=\"headerlink\" title=\"背景附着\"></a>背景附着</h2><p>语法：</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">background-attachment</span><span class=\"token punctuation\">:</span> scroll | fixed<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>参数：</p>\n<p>scroll : 　背景图像是随对象内容滚动<br>fixed : 　背景图像固定</p>\n<p>说明：</p>\n<p>设置或检索背景图像是随对象内容滚动还是固定的。</p>\n<h2 id=\"背景简写\"><a href=\"#背景简写\" class=\"headerlink\" title=\"背景简写\"></a>背景简写</h2><p>background 属性的值的书写顺序官方并没有强制标准的。为了可读性，建议大家如下写：</p>\n<p>background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> transparent <span class=\"token url\">url(image.jpg)</span> repeat-y scroll <span class=\"token number\">50%</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"背景透明-CSS3\"><a href=\"#背景透明-CSS3\" class=\"headerlink\" title=\"背景透明(CSS3)\"></a>背景透明(CSS3)</h2><p>CSS3 支持背景半透明的写法语法格式是:</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">0</span>, <span class=\"token number\">0</span>, <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>最后一个参数是 alpha 透明度 取值范围 0~1 之间</p>\n<p>注意： 背景半透明是指盒子背景半透明， 盒子里面的内容不收影响。</p>\n<h2 id=\"背景缩放-CSS3\"><a href=\"#背景缩放-CSS3\" class=\"headerlink\" title=\"背景缩放(CSS3)\"></a>背景缩放(CSS3)</h2><p>通过 background-size 设置背景图片的尺寸，就像我们设置 img 的尺寸一样，在移动 Web 开发中做屏幕适配应用非常广泛。</p>\n<p>其参数设置如下：</p>\n<p>a) 可以设置长度单位(px)或百分比（设置百分比时，参照盒子的宽高）</p>\n<p>b) 设置为 cover 时，会自动调整缩放比例，保证图片始终填充满背景区域，如有溢出部分则会被隐藏。我们平时用的 cover 最多</p>\n<p>c) 设置为 contain 会自动调整缩放比例，保证图片始终完整显示在背景区域。</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('images/gyt.jpg')</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">300</span>px <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/* background-size: contain; */</span>\n<span class=\"token comment\" spellcheck=\"true\">/* background-size: cover; */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"多背景-CSS3\"><a href=\"#多背景-CSS3\" class=\"headerlink\" title=\"多背景(CSS3)\"></a>多背景(CSS3)</h2><p>以逗号分隔可以设置多背景，可用于自适应布局 做法就是 用逗号隔开就好了。</p>\n<ul>\n<li>一个元素可以设置多重背景图像。</li>\n<li>每组属性间使用逗号分隔。</li>\n<li>如果设置的多重背景图之间存在着交集（即存在着重叠关系），前面的背景图会覆盖在后面的背景图之上。</li>\n<li>为了避免背景色将图像盖住，背景色通常都定义在最后一组上，</li>\n</ul>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url(test1.jpg)</span> no-repeat scroll <span class=\"token number\">10</span>px <span class=\"token number\">20</span>px/<span class=\"token number\">50</span>px <span class=\"token number\">60</span>px, <span class=\"token url\">url(test1.jpg)</span>\n    no-repeat scroll <span class=\"token number\">10</span>px <span class=\"token number\">20</span>px/<span class=\"token number\">70</span>px <span class=\"token number\">90</span>px,\n  <span class=\"token url\">url(test1.jpg)</span> no-repeat scroll <span class=\"token number\">10</span>px <span class=\"token number\">20</span>px/<span class=\"token number\">110</span>px <span class=\"token number\">130</span>px c <span class=\"token hexcode\">#aaa</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>​</li>\n</ul>\n<h2 id=\"凹凸文字\"><a href=\"#凹凸文字\" class=\"headerlink\" title=\"凹凸文字\"></a>凹凸文字</h2><pre class=\"line-numbers language-css\"><code class=\"language-css\">&lt;head>\n        &lt;meta charset=<span class=\"token string\">\"utf-8\"</span>>\n        &lt;style>\n        body &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#ccc</span><span class=\"token punctuation\">;</span>\n        &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n        div &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#ccc</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">font</span><span class=\"token punctuation\">:</span> <span class=\"token number\">700</span> <span class=\"token number\">80</span>px <span class=\"token string\">\"微软雅黑\"</span><span class=\"token punctuation\">;</span>\n        &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">div</span><span class=\"token punctuation\">:</span>first-child &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">/* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */</span>\n            <span class=\"token property\">text-shadow</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>px <span class=\"token number\">1</span>px <span class=\"token number\">1</span>px <span class=\"token hexcode\">#000</span>, -<span class=\"token number\">1</span>px -<span class=\"token number\">1</span>px <span class=\"token number\">1</span>px <span class=\"token hexcode\">#fff</span><span class=\"token punctuation\">;</span>\n        &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">div</span><span class=\"token punctuation\">:</span>last-child &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">/* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */</span>\n            <span class=\"token property\">text-shadow</span><span class=\"token punctuation\">:</span> -<span class=\"token number\">1</span>px -<span class=\"token number\">1</span>px <span class=\"token number\">1</span>px <span class=\"token hexcode\">#000</span>, <span class=\"token number\">1</span>px <span class=\"token number\">1</span>px <span class=\"token number\">1</span>px <span class=\"token hexcode\">#fff</span><span class=\"token punctuation\">;</span>\n        &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n\n        &lt;/style>\n    &lt;/head>\n    &lt;body>\n    &lt;div>我是凸起的文字&lt;/div>\n    &lt;div>我是凹下的文字&lt;/div>\n    &lt;/body><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498467533412.png\" alt=\"1498467533412\"></p>\n<h2 id=\"导航栏案例\"><a href=\"#导航栏案例\" class=\"headerlink\" title=\"导航栏案例\"></a>导航栏案例</h2><h3 id=\"文本的装饰\"><a href=\"#文本的装饰\" class=\"headerlink\" title=\"文本的装饰\"></a>文本的装饰</h3><p>text-decoration 通常我们用于给链接修改装饰效果</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>none</td>\n<td>默认。定义标准的文本。</td>\n</tr>\n<tr>\n<td>underline</td>\n<td>定义文本下的一条线。下划线 也是我们链接自带的</td>\n</tr>\n<tr>\n<td>overline</td>\n<td>定义文本上的一条线。</td>\n</tr>\n<tr>\n<td>line-through</td>\n<td>定义穿过文本下的一条线。</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>使用技巧</strong>：在一行内的盒子内，我们设定行高等于盒子的高度，就可以使文字垂直居中。</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n    body &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#000</span><span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    a &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50</span>px<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">/* background-color: orange; */</span>\n      <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 把a 行内元素转换为行内块元素 */</span>\n      <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 文字水平居中 */</span>\n      <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50</span>px<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 我们设定行高等于盒子的高度，就可以使文字垂直居中 */</span>\n      <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#fff</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22</span>px<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 取消下划线 文本装饰 */</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">a</span><span class=\"token punctuation\">:</span>hover &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">/* 鼠标经过 给我们的链接添加背景图片*/</span>\n      <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url(images/h.png)</span> no-repeat<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>专区说明<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>申请资格<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>兑换奖励<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>下载游戏<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"CSS-三大特性\"><a href=\"#CSS-三大特性\" class=\"headerlink\" title=\"CSS 三大特性\"></a>CSS 三大特性</h1><p>层叠 继承 优先级 是我们学习 CSS 必须掌握的三个特性。</p>\n<h2 id=\"CSS-层叠性\"><a href=\"#CSS-层叠性\" class=\"headerlink\" title=\"CSS 层叠性\"></a>CSS 层叠性</h2><p>所谓层叠性是指多种 CSS 样式的叠加。</p>\n<p>是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉</p>\n<p>比如先给某个标签指定了内部文字颜色为红色，接着又指定了颜色为蓝色，此时出现一个标签指定了相同样式不同值的情况，这就是样式冲突。</p>\n<p>一般情况下，如果出现样式冲突，则会按照 CSS 书写的顺序，以最后的样式为准。</p>\n<ol>\n<li>样式冲突，遵循的原则是就近原则。 那个样式离着结构近，就执行那个样式。</li>\n<li>样式不冲突，不会层叠</li>\n</ol>\n<pre><code>CSS最后的执行口诀：  长江后浪推前浪，前浪死在沙滩上。</code></pre>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/hai.gif\"  width=\"600\" height=\"400\" />\n\n<h2 id=\"CSS-继承性\"><a href=\"#CSS-继承性\" class=\"headerlink\" title=\"CSS 继承性\"></a>CSS 继承性</h2><p>所谓继承性是指书写 CSS 样式表时，子标签会继承父标签的某些样式，如文本颜色和字号。想要设置一个可继承的属性，只需将它应用于父元素即可。</p>\n<p>简单的理解就是： 子承父业。</p>\n<pre><code>CSS最后的执行口诀：  龙生龙，凤生凤，老鼠生的孩子会打洞。</code></pre>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/shu.gif\" />\n\n<p>注意：</p>\n<pre><code>恰当地使用继承可以简化代码，降低CSS样式的复杂性。子元素可以继承父元素的样式（text-，font-，line-这些元素开头的都可以继承，以及color属性）</code></pre>\n<h2 id=\"CSS-优先级\"><a href=\"#CSS-优先级\" class=\"headerlink\" title=\"CSS 优先级\"></a>CSS 优先级</h2><p>定义 CSS 样式时，经常出现两个或更多规则应用在同一元素上，这时就会出现优先级的问题。</p>\n<p>在考虑权重时，初学者还需要注意一些特殊的情况，具体如下：</p>\n<pre><code>继承样式的权重为0。即在嵌套结构中，不管父元素样式的权重多大，被子元素继承时，他的权重都为0，也就是说子元素定义的样式会覆盖继承来的样式。\n\n行内样式优先。应用style属性的元素，其行内样式的权重非常高，可以理解为远大于100。总之，他拥有比上面提高的选择器都大的优先级。\n\n权重相同时，CSS遵循就近原则。也就是说靠近元素的样式具有最大的优先级，或者说排在最后的样式优先级最大。\n\nCSS定义了一个!important命令，该命令被赋予最大的优先级。也就是说不管权重如何以及样式位置的远近，!important都具有最大优先级。</code></pre>\n<h3 id=\"CSS-特殊性（Specificity）\"><a href=\"#CSS-特殊性（Specificity）\" class=\"headerlink\" title=\"CSS 特殊性（Specificity）\"></a>CSS 特殊性（Specificity）</h3><p>关于 CSS 权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity，我们称为 CSS 特性或称非凡性，它是一个衡量 CSS 值优先级的一个标准 具体规范入如下：</p>\n<p>specificity 用一个四位的数 字串(CSS2 是三位)来表示，更像四个级别，值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。</p>\n<table>\n<thead>\n<tr>\n<th>继承或者* 的贡献值</th>\n<th>0,0,0,0</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>每个元素（标签）贡献值为</td>\n<td>0,0,0,1</td>\n</tr>\n<tr>\n<td>每个类，伪类贡献值为</td>\n<td>0,0,1,0</td>\n</tr>\n<tr>\n<td>每个 ID 贡献值为</td>\n<td>0,1,0,0</td>\n</tr>\n<tr>\n<td>每个行内样式贡献值</td>\n<td>1,0,0,0</td>\n</tr>\n<tr>\n<td>每个!important 贡献值</td>\n<td>∞ 无穷大</td>\n</tr>\n</tbody></table>\n<p>权重是可以叠加的</p>\n<p>比如的例子：</p>\n<pre><code>div ul  li   ------&gt;      0,0,0,3\n\n.nav ul li   ------&gt;      0,0,1,2\n\na:hover      -----—&gt;      0,0,1,1\n\n.nav a       ------&gt;      0,0,1,1\n\n#nav p       -----&gt;       0,1,0,1</code></pre>\n<p>​</p>\n<p>​</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/w.jpg\" /> 注意：</p>\n<p>1.数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 =0,0,0,10 而不是 0,0, 1, 0， 所以不会存在 10 个 div 能赶上一个类选择器的情况。</p>\n<ol start=\"2\">\n<li>继承的 权重是 0</li>\n</ol>\n<p>总结优先级：</p>\n<ol>\n<li>使用了 !important 声明的规则。</li>\n<li>内嵌在 HTML 元素的 style 属性里面的声明。</li>\n<li>使用了 ID 选择器的规则。</li>\n<li>使用了类选择器、属性选择器、伪元素和伪类选择器的规则。</li>\n<li>使用了元素选择器的规则。</li>\n<li>只包含一个通用选择器的规则。</li>\n<li>同一类选择器则遵循就近原则。</li>\n</ol>\n<pre><code>总结：权重是优先级的算法，层叠是优先级的表现</code></pre>\n<h1 id=\"盒子模型（CSS-重点）\"><a href=\"#盒子模型（CSS-重点）\" class=\"headerlink\" title=\"盒子模型（CSS 重点）\"></a>盒子模型（CSS 重点）</h1><p>其实，CSS 就三个大模块： 盒子模型 、 浮动 、 定位，其余的都是细节。要求这三部分，无论如何也要学的非常精通。</p>\n<p>所谓盒子模型就是把 HTML 页面中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。每个矩形都由元素的内容、内边距（padding）、边框（border）和外边距（margin）组成。</p>\n<h2 id=\"看透网页布局的本质\"><a href=\"#看透网页布局的本质\" class=\"headerlink\" title=\"看透网页布局的本质\"></a>看透网页布局的本质</h2><p>网页布局中，我们是如何把里面的文字，图片，按照美工给我们的效果图排列的整齐有序呢？</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/t.png\" />\n\n<p>牛奶是怎样运输，让消费者购买的呢？</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/m.jpg\" />\n\n<p>我们说过，行内元素比如 文字 类似牛奶，也需要一个盒子把他们装起来，我们前面学过的双标签都是一个盒子。有了盒子，我们就可以随意的，自由的，摆放位置了。</p>\n<p>看透网页布局的本质： 把网页元素比如文字图片等等，放入盒子里面，然后利用 CSS 摆放盒子的过程，就是网页布局。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/t1.png\" />\n\n<p>CSS 其实没有太多逻辑可言 ， 类似我们小时候玩的积木,我们可以自由的，随意的摆放出我们想要的效果。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/j.jpg\" width=\"300\" />\n\n<h2 id=\"盒子模型（Box-Model）\"><a href=\"#盒子模型（Box-Model）\" class=\"headerlink\" title=\"盒子模型（Box Model）\"></a>盒子模型（Box Model）</h2><p>这里略过 老旧的 ie 盒子模型（IE6 以下），对不起，我都没见过 IE5 的浏览器。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/d.jpg\" />\n\n<p>。首先，我们来看一张图，来体会下什么是盒子模型。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/box.png\"  width=\"700\" />\n\n<p>所有的文档元素（标签）都会生成一个矩形框，我们成为元素框（element box），它描述了一个文档元素再网页布局汇总所占的位置大小。因此，<strong style=\"color: #f00;\">每个盒子除了有自己大小和位置外，还影响着其他盒子的大小和位置。</strong></p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/boxs.png\"  width=\"700\" />\n\n<h2 id=\"盒子边框（border）\"><a href=\"#盒子边框（border）\" class=\"headerlink\" title=\"盒子边框（border）\"></a>盒子边框（border）</h2><p>边框就是那层皮。 橘子皮。。柚子皮。。橙子皮。。。</p>\n<p>语法：</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">border</span><span class=\"token punctuation\">:</span> border-width || border-style || border-color<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>边框属性—设置边框样式（border-style）</p>\n<p>边框样式用于定义页面中边框的风格，常用属性值如下：</p>\n<pre><code>none：没有边框即忽略所有边框的宽度（默认值）\n\nsolid：边框为单实线(最为常用的)\n\ndashed：边框为虚线\n\ndotted：边框为点线\n\ndouble：边框为双实线</code></pre>\n<h3 id=\"盒子边框写法总结表\"><a href=\"#盒子边框写法总结表\" class=\"headerlink\" title=\"盒子边框写法总结表\"></a>盒子边框写法总结表</h3><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>设置内容</td>\n<td>样式属性</td>\n<td>常用属性值</td>\n</tr>\n<tr>\n<td>上边框</td>\n<td>border-top-style:样式; border-top-width:宽度;border-top-color:颜色;border-top:宽度 样式 颜色;</td>\n<td></td>\n</tr>\n<tr>\n<td>下边框</td>\n<td>border-bottom-style:样式;border- bottom-width:宽度;border- bottom-color:颜色;border-bottom:宽度 样式 颜色;</td>\n<td></td>\n</tr>\n<tr>\n<td>左边框</td>\n<td>border-left-style:样式; border-left-width:宽度;border-left-color:颜色;border-left:宽度 样式 颜色;</td>\n<td></td>\n</tr>\n<tr>\n<td>右边框</td>\n<td>border-right-style:样式;border-right-width:宽度;border-right-color:颜色;border-right:宽度 样式 颜色;</td>\n<td></td>\n</tr>\n<tr>\n<td>样式综合设置</td>\n<td>border-style:上边 [右边 下边 左边];</td>\n<td>none 无（默认）、solid 单实线、dashed 虚线、dotted 点线、double 双实线</td>\n</tr>\n<tr>\n<td>宽度综合设置</td>\n<td>border-width:上边 [右边 下边 左边];</td>\n<td>像素值</td>\n</tr>\n<tr>\n<td>颜色综合设置</td>\n<td>border-color:上边 [右边 下边 左边];</td>\n<td>颜色值、#十六进制、rgb(r,g,b)、rgb(r%,g%,b%)</td>\n</tr>\n<tr>\n<td>边框综合设置</td>\n<td>border:四边宽度 四边样式 四边颜色;</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"表格的细线边框\"><a href=\"#表格的细线边框\" class=\"headerlink\" title=\"表格的细线边框\"></a>表格的细线边框</h3><p>以前学过的 html 表格边框很粗，这里只需要 CSS 一句话就可以美观起来。 让我们真的相信，CSS 就是我们的白马王子（白雪公主）。</p>\n<p>table{ border-collapse:collapse; } collapse 单词是合并的意思</p>\n<p>border-collapse:collapse; 表示边框合并在一起。</p>\n<h3 id=\"圆角边框-CSS3\"><a href=\"#圆角边框-CSS3\" class=\"headerlink\" title=\"圆角边框(CSS3)\"></a>圆角边框(CSS3)</h3><p>从此以后，我们的世界不只有矩形。radius 半径（距离）</p>\n<p>语法格式：</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 左上角 右上角 右下角 左下角<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>课堂案例:</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n  div &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>px solid red<span class=\"token punctuation\">;</span>\n  &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">div</span><span class=\"token punctuation\">:</span>first-child &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/* 结构伪类选择器 选亲兄弟 */</span>\n    <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>px<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/*  一个数值表示4个角都是相同的 10px 的弧度 */</span>\n  &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">div</span><span class=\"token punctuation\">:</span><span class=\"token function\">nth-child</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/*border-radius: 100px;    取宽度和高度 一半  则会变成一个圆形 */</span>\n    <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50%</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/*  100px   50% 取宽度和高度 一半  则会变成一个圆形 */</span>\n  &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">div</span><span class=\"token punctuation\">:</span><span class=\"token function\">nth-child</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>px <span class=\"token number\">40</span>px<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 左上角  和 右下角  是 10px  右上角 左下角 40 对角线 */</span>\n  &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">div</span><span class=\"token punctuation\">:</span><span class=\"token function\">nth-child</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>px <span class=\"token number\">40</span>px <span class=\"token number\">80</span>px<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 左上角 10    右上角  左下角 40   右下角80 */</span>\n  &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">div</span><span class=\"token punctuation\">:</span><span class=\"token function\">nth-child</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>px <span class=\"token number\">40</span>px <span class=\"token number\">80</span>px <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 左上角 10    右上角 40  右下角 80   左下角   右下角100 */</span>\n  &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">div</span><span class=\"token punctuation\">:</span><span class=\"token function\">nth-child</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n  &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">div</span><span class=\"token punctuation\">:</span><span class=\"token function\">nth-child</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"内边距（padding）\"><a href=\"#内边距（padding）\" class=\"headerlink\" title=\"内边距（padding）\"></a>内边距（padding）</h2><p>padding 属性用于设置内边距。 是指 边框与内容之间的距离。</p>\n<p>padding-top:上内边距</p>\n<p>padding-right:右内边距</p>\n<p>padding-bottom:下内边距</p>\n<p>padding-left:左内边距</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/w.jpg\"/>注意： 后面跟几个数值表示的意思是不一样的。</p>\n<table>\n<thead>\n<tr>\n<th>值的个数</th>\n<th>表达意思</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1 个值</td>\n<td>padding：上下左右边距 比如 padding: 3px; 表示上下左右都是 3 像素</td>\n</tr>\n<tr>\n<td>2 个值</td>\n<td>padding: 上下边距 左右边距 比如 padding: 3px 5px; 表示 上下 3 像素 左右 5 像素</td>\n</tr>\n<tr>\n<td>3 个值</td>\n<td>padding：上边距 左右边距 下边距 比如 padding: 3px 5px 10px; 表示 上是 3 像素 左右是 5 像素 下是 10 像素</td>\n</tr>\n<tr>\n<td>4 个值</td>\n<td>padding:上内边距 右内边距 下内边距 左内边距 比如: padding: 3px 5px 10px 15px; 表示 上 3px 右是 5px 下 10px 左 15px 顺时针</td>\n</tr>\n</tbody></table>\n<p>课堂案例： 新浪导航</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/al.gif\" />\n\n<h2 id=\"外边距（margin）\"><a href=\"#外边距（margin）\" class=\"headerlink\" title=\"外边距（margin）\"></a>外边距（margin）</h2><p>margin 属性用于设置外边距。 设置外边距会在元素之间创建“空白”， 这段空白通常不能放置其他内容。</p>\n<p>margin-top:上外边距</p>\n<p>margin-right:右外边距</p>\n<p>margin-bottom:下外边距</p>\n<p>margin-left:上外边距</p>\n<p>margin:上外边距 右外边距 下外边距 左外边</p>\n<p>取值顺序跟内边距相同。</p>\n<h3 id=\"外边距实现盒子居中\"><a href=\"#外边距实现盒子居中\" class=\"headerlink\" title=\"外边距实现盒子居中\"></a>外边距实现盒子居中</h3><p>可以让一个盒子实现水平居中，需要满足一下两个条件：</p>\n<ol>\n<li>必须是块级元素。</li>\n<li>盒子必须指定了宽度（width）</li>\n</ol>\n<p>然后就给<strong>左右的外边距都设置为 auto</strong>，就可使块级元素水平居中。</p>\n<p>实际工作中常用这种方式进行网页布局，示例代码如下：</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token number\">.</span>header &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">960</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> auto<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"文字盒子居中图片和背景区别\"><a href=\"#文字盒子居中图片和背景区别\" class=\"headerlink\" title=\"文字盒子居中图片和背景区别\"></a>文字盒子居中图片和背景区别</h3><ol>\n<li>文字水平居中是 text-align: center</li>\n<li>盒子水平居中 左右 margin 改为 auto</li>\n</ol>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/*  文字居中水平 */</span>\n<span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>px auto<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 盒子水平居中  左右margin 改为 auto 就阔以了 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol start=\"3\">\n<li>插入图片 我们用的最多 比如产品展示类</li>\n<li>背景图片我们一般用于小图标背景 或者 超大背景图片</li>\n</ol>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\">section img &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 插入图片更改大小 width 和 height */</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">210</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span>px<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 插入图片更改位置 可以用margin 或padding  盒模型 */</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50</span>px<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 插入当图片也是一个盒子 */</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n\naside &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">400</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">400</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>px solid purple<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#fff</span> <span class=\"token url\">url(images/sun.jpg)</span> no-repeat<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px <span class=\"token number\">210</span>px<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/*  背景图片更改大小只能用 background-size */</span>\n  <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span>px <span class=\"token number\">50</span>px<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 背景图片更该位置 我用 background-position */</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"清除元素的默认内外边距\"><a href=\"#清除元素的默认内外边距\" class=\"headerlink\" title=\"清除元素的默认内外边距\"></a>清除元素的默认内外边距</h3><p>为了更方便地控制网页中的元素，制作网页时，可使用如下代码清除元素的默认内外边距：</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\">* &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 清除内边距 */</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 清除外边距 */</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意： 行内元素是只有左右外边距的，是没有上下外边距的。 内边距，在 ie6 等低版本浏览器也会有问题。</p>\n<p>我们尽量不要给行内元素指定上下的内外边距就好了。</p>\n<h2 id=\"外边距合并\"><a href=\"#外边距合并\" class=\"headerlink\" title=\"外边距合并\"></a>外边距合并</h2><p>使用 margin 定义块元素的垂直外边距时，可能会出现外边距的合并。</p>\n<h3 id=\"相邻块元素垂直外边距的合并\"><a href=\"#相邻块元素垂直外边距的合并\" class=\"headerlink\" title=\"相邻块元素垂直外边距的合并\"></a>相邻块元素垂直外边距的合并</h3><p>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/www.png\" />\n\n<p>解决方案： 避免就好了。</p>\n<h3 id=\"嵌套块元素垂直外边距的合并\"><a href=\"#嵌套块元素垂直外边距的合并\" class=\"headerlink\" title=\"嵌套块元素垂直外边距的合并\"></a>嵌套块元素垂直外边距的合并</h3><p>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的较大者，即使父元素的上外边距为 0，也会发生合并。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/n.png\" />\n\n<p>解决方案：</p>\n<ol>\n<li>可以为父元素定义 1 像素的上边框或上内边距。</li>\n<li>可以为父元素添加 overflow:hidden。</li>\n</ol>\n<p>待续。。。。</p>\n<h2 id=\"content-宽度和高度\"><a href=\"#content-宽度和高度\" class=\"headerlink\" title=\"content 宽度和高度\"></a>content 宽度和高度</h2><p>使用宽度属性 width 和高度属性 height 可以对盒子的大小进行控制。</p>\n<p>width 和 height 的属性值可以为不同单位的数值或相对于父元素的百分比%，实际工作中最常用的是像素值。</p>\n<p>大多数浏览器，如 Firefox、IE6 及以上版本都采用了 W3C 规范，符合 CSS 规范的盒子模型的总宽度和总高度的计算原则是：</p>\n<pre><code>  /*外盒尺寸计算（元素空间尺寸）*/\n  Element空间高度 = content height + padding + border + margin\n  Element 空间宽度 = content width + padding + border + margin\n  /*内盒尺寸计算（元素实际大小）*/\n  Element Height = content height + padding + border （Height为内容高度）\n  Element Width = content width + padding + border （Width为内容宽度）</code></pre>\n<p>注意：</p>\n<p>1、宽度属性 width 和高度属性 height 仅适用于块级元素，对行内元素无效（ img 标签和 input 除外）。</p>\n<p>2、计算盒子模型的总高度时，还应考虑上下两个盒子垂直外边距合并的情况。</p>\n<p>3、<strong>如果一个盒子没有给定宽度/高度或者继承父亲的宽度/高度，则 padding 不会影响本盒子大小</strong>。</p>\n<h2 id=\"盒子模型布局稳定性\"><a href=\"#盒子模型布局稳定性\" class=\"headerlink\" title=\"盒子模型布局稳定性\"></a>盒子模型布局稳定性</h2><p>开始学习盒子模型，同学们最大的困惑就是， 分不清内外边距的使用，什么情况下使用内边距，什么情况下使用外边距？</p>\n<p>答案是： 其实他们大部分情况下是可以混用的。 就是说，你用内边距也可以，用外边距也可以。 你觉得哪个方便，就用哪个。</p>\n<p>但是，总有一个最好用的吧，我们根据稳定性来分，建议如下：</p>\n<p>按照 优先使用 宽度 （width） 其次 使用内边距（padding） 再次 外边距（margin）。</p>\n<pre><code>  width &gt;  padding  &gt;   margin</code></pre>\n<p>原因：</p>\n<ol>\n<li><p>margin 会有外边距合并 还有 ie6 下面 margin 加倍的 bug（讨厌）所以最后使用。</p>\n</li>\n<li><p>padding 会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。</p>\n</li>\n<li><p>width 没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。</p>\n<p>​</p>\n</li>\n</ol>\n<h2 id=\"CSS3-盒模型\"><a href=\"#CSS3-盒模型\" class=\"headerlink\" title=\"CSS3 盒模型\"></a>CSS3 盒模型</h2><p>CSS3 中可以通过 box-sizing 来指定盒模型，即可指定为 content-box、border-box，这样我们计算盒子大小的方式就发生了改变。</p>\n<p>可以分成两种情况：</p>\n<p>1、box-sizing: content-box 盒子大小为 width + padding + border content-box:此值为其默认值，其让元素维持 W3C 的标准 Box Mode</p>\n<p>2、box-sizing: border-box 盒子大小为 width 就是说 padding 和 border 是包含到 width 里面的</p>\n<p>注：上面的标注的 width 指的是 CSS 属性里设置的 width: length，content 的值是会自动调整的。</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">div</span><span class=\"token punctuation\">:</span>first-child &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> content-box<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/*  就是以前的标准盒模型  w3c */</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span>px solid red<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">/* 盒子大小为 width + padding + border   content-box:此值为其默认值，其让元素维持W3C的标准Box Mode */</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">div</span><span class=\"token punctuation\">:</span>last-child &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> purple<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* padding border  不撑开盒子 */</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span>px solid red<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">/* margin: 10px; */</span>\n  <span class=\"token comment\" spellcheck=\"true\">/* 盒子大小为 width    就是说  padding 和 border 是包含到width里面的 */</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"盒子阴影\"><a href=\"#盒子阴影\" class=\"headerlink\" title=\"盒子阴影\"></a>盒子阴影</h2><p>语法格式：</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 水平阴影 垂直阴影 模糊距离 阴影尺寸 阴影颜色 内/外阴影；<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498467567011.png\" alt=\"1498467567011\"></p>\n<ol>\n<li>前两个属性是必须写的。其余的可以省略。</li>\n<li>外阴影 (outset) 但是不能写 默认 想要内阴影 inset</li>\n</ol>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\">div &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>px solid red<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">/* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */</span>\n  <span class=\"token comment\" spellcheck=\"true\">/* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影； */</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token number\">15</span>px <span class=\"token number\">30</span>px <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">0</span>, <span class=\"token number\">0</span>, <span class=\"token number\">0.4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"浮动-float\"><a href=\"#浮动-float\" class=\"headerlink\" title=\"浮动(float)\"></a>浮动(float)</h1><h2 id=\"普通流-normal-flow\"><a href=\"#普通流-normal-flow\" class=\"headerlink\" title=\"普通流(normal flow)\"></a>普通流(normal flow)</h2><p>这个单词很多人翻译为 文档流 ， 字面翻译 普通流 或者标准流都可以。</p>\n<p>前面我们说过，网页布局的核心，就是用 CSS 来摆放盒子位置。如何把盒子摆放到合适的位置？</p>\n<p>CSS 的定位机制有 3 种：普通流（标准流）、浮动和定位。</p>\n<p>html 语言当中另外一个相当重要的概念———-标准流！或者普通流。普通流实际上就是一个网页内标签元素正常从上到下，从左到右排列顺序的意思，比如块级元素会独占一行，行内元素会按顺序依次前后排列；按照这种大前提的布局排列之下绝对不会出现例外的情况叫做普通流布局。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/t.jpg\" />\n\n<h2 id=\"浮动-float-1\"><a href=\"#浮动-float-1\" class=\"headerlink\" title=\"浮动(float)\"></a>浮动(float)</h2><p>浮动最早是用来控制图片，以便达到其他元素（特别是文字）实现“环绕”图片的效果。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/l.png\" style=\"width: 600px; border: 2px solid #000;\"/>\n\n<p>后来，我们发现浮动有个很有意思的事情：就是让任何盒子可以一行排列,因此我们就慢慢的偏离主题，用浮动的特性来布局了。（CSS3 已经我们真正意义上的网页布局，具体 CSS3 我们会详细解释）</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/d.png\" />\n\n<h2 id=\"什么是浮动？\"><a href=\"#什么是浮动？\" class=\"headerlink\" title=\"什么是浮动？\"></a>什么是浮动？</h2><p>元素的浮动是指设置了浮动属性的元素会脱离标准普通流的控制，移动到其父元素中指定位置的过程。</p>\n<p>在 CSS 中，通过 float 属性来定义浮动，其基本语法格式如下：</p>\n<pre><code>选择器&amp;#123;float:属性值;&amp;#125;</code></pre>\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>left</td>\n<td>元素向左浮动</td>\n</tr>\n<tr>\n<td>right</td>\n<td>元素向右浮动</td>\n</tr>\n<tr>\n<td>none</td>\n<td>元素不浮动（默认值）</td>\n</tr>\n</tbody></table>\n<h2 id=\"浮动详细内幕特性\"><a href=\"#浮动详细内幕特性\" class=\"headerlink\" title=\"浮动详细内幕特性\"></a>浮动详细内幕特性</h2><p>浮动脱离标准流，不占位置，会影响标准流。浮动只有左右浮动。</p>\n<pre><code>浮动首先创建包含块的概念（包裹）。就是说， 浮动的元素总是找理它最近的父级元素对齐。但是不会超出内边距的范围。</code></pre>\n   <img src=\"https://zclzone.gitee.io/resource/image/blog/media/one.jpg\" width=\"500\" />\n\n<pre><code>浮动的元素排列位置，跟上一个元素（块级）有关系。如果上一个元素有浮动，则A元素顶部会和上一个元素的顶部对齐；如果上一个元素是标准流，则A元素的顶部会和上一个元素的底部对齐。</code></pre>\n  <img src=\"https://zclzone.gitee.io/resource/image/blog/media/two.jpg\" width=\"400\" />\n\n<pre><code>由2可以推断出，一个父盒子里面的子盒子，如果其中一个子级有浮动的，则其他子级都需要浮动。这样才能一行对齐显示。</code></pre>\n<pre><code>元素添加浮动后，元素会具有行内块元素的特性。元素的大小完全取决于定义的大小或者默认的内容多少浮动根据元素书写的位置来显示相应的浮动。</code></pre>\n<p>总结： 浮动 —&gt;</p>\n<p>浮动的目的就是为了让多个块级元素同一行上显示。</p>\n<p>float 浮 漏 特</p>\n<p>浮： 加了浮动的元素盒子是浮起来的，漂浮在其他的标准流盒子上面。<br>漏： 加了浮动的盒子，不占位置的，它浮起来了，它原来的位置漏 给了标准流的盒子。<br>特： 特别注意，首先浮动的盒子需要和标准流的父级搭配使用， 其次 特别的注意浮动可以使元素显示模式体现为行内块特性。</p>\n<h1 id=\"版心和布局流程\"><a href=\"#版心和布局流程\" class=\"headerlink\" title=\"版心和布局流程\"></a>版心和布局流程</h1><p>阅读报纸时容易发现，虽然报纸中的内容很多，但是经过合理地排版，版面依然清晰、易读。同样，在制作网页时，要想使页面结构清晰、有条理，也需要对网页进行“排版”。</p>\n<p>“版心”(可视区) 是指网页中主体内容所在的区域。一般在浏览器窗口中水平居中显示，常见的宽度值为 960px、980px、1000px、1200px 等。</p>\n<h2 id=\"布局流程\"><a href=\"#布局流程\" class=\"headerlink\" title=\"布局流程\"></a>布局流程</h2><p>为了提高网页制作的效率，布局时通常需要遵守一定的布局流程，具体如下：</p>\n<p>1、确定页面的版心（可视区）。</p>\n<p>2、分析页面中的行模块，以及每个行模块中的列模块。</p>\n<p>3、制作 HTML 结构 。</p>\n<p>4、CSS 初始化，然后开始运用盒子模型的原理，通过 DIV+CSS 布局来控制网页的各个模块。</p>\n<h2 id=\"一列固定宽度且居中\"><a href=\"#一列固定宽度且居中\" class=\"headerlink\" title=\"一列固定宽度且居中\"></a>一列固定宽度且居中</h2><img src=\"https://zclzone.gitee.io/resource/image/blog/media/yl.jpg\" width=\"400\" />\n\n<p>最普通的，最为常用的结构</p>\n<h2 id=\"两列左窄右宽型\"><a href=\"#两列左窄右宽型\" class=\"headerlink\" title=\"两列左窄右宽型\"></a>两列左窄右宽型</h2><img src=\"https://zclzone.gitee.io/resource/image/blog/media/ll.jpg\" width=\"400\" />\n\n<p>比如小米 <a href=\"http://www.mi.com\" target=\"_blank\"> 小米官网 </a></p>\n<h2 id=\"通栏平均分布型\"><a href=\"#通栏平均分布型\" class=\"headerlink\" title=\"通栏平均分布型\"></a>通栏平均分布型</h2><img src=\"https://zclzone.gitee.io/resource/image/blog/media/tl.jpg\" width=\"600\" />\n\n<p>比如锤子 <a href=\"http://www.smartisan.com/\" target=\"_blank\"> 锤子官网 </a></p>\n<h1 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h1><p>人生就像乘坐北京地铁一号线：</p>\n<p>途经国贸，羡慕繁华；</p>\n<p>途经天安门，幻想权力；</p>\n<p>途经金融街，梦想发财；</p>\n<p>经过公主坟，遥想华丽家族；</p>\n<p>经过玉泉路，依然雄心勃勃…</p>\n<p>这时，有个声音飘然入耳:乘客你好,八宝山马上就要到了！</p>\n<p>顿时醒悟：人生苦短，有始有终。</p>\n<p>好比我们的浮动，有浮动开始，则就应该有浮动结束。</p>\n<h2 id=\"为什么要清除浮动\"><a href=\"#为什么要清除浮动\" class=\"headerlink\" title=\"为什么要清除浮动\"></a>为什么要清除浮动</h2><p>我们前面说过，浮动本质是用来做一些文字混排效果的，但是被我们拿来做布局用，则会有很多的问题出现， 但是，你不能说浮动不好 <img src=\"https://zclzone.gitee.io/resource/image/blog/media/wq.jpg\" height=\"100\" />。</p>\n<p>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响，为了解决这些问题，此时就需要在该元素中清除浮动。</p>\n<p>准确地说，并不是清除浮动，而是<strong>清除浮动后造成的影响</strong></p>\n<p>如果浮动一开始就是一个美丽的错误，那么请用正确的方法挽救它。</p>\n<h2 id=\"清除浮动本质\"><a href=\"#清除浮动本质\" class=\"headerlink\" title=\"清除浮动本质\"></a>清除浮动本质</h2><p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为 0 的问题。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/n.jpg\" />\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/no.jpg\" />\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/kc.jpg\" />\n\n<h2 id=\"清除浮动的方法\"><a href=\"#清除浮动的方法\" class=\"headerlink\" title=\"清除浮动的方法\"></a>清除浮动的方法</h2><p>其实本质叫做闭合浮动更好一些, 记住，清除浮动就是把浮动的盒子圈到里面，让父盒子闭合出口和入口不让他们出来影响其他元素。</p>\n<p>在 CSS 中，clear 属性用于清除浮动，其基本语法格式如下：</p>\n<pre><code>选择器&amp;#123;clear:属性值;&amp;#125;</code></pre>\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>left</td>\n<td>不允许左侧有浮动元素（清除左侧浮动的影响）</td>\n</tr>\n<tr>\n<td>right</td>\n<td>不允许右侧有浮动元素（清除右侧浮动的影响）</td>\n</tr>\n<tr>\n<td>both</td>\n<td>同时清除左右两侧浮动的影响</td>\n</tr>\n</tbody></table>\n<h3 id=\"额外标签法\"><a href=\"#额外标签法\" class=\"headerlink\" title=\"额外标签法\"></a>额外标签法</h3><pre class=\"line-numbers language-html\"><code class=\"language-html\">是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\">”<span class=\"token property\">clear</span><span class=\"token punctuation\">:</span>both”</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n，或则其他标签br等亦可。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>优点： 通俗易懂，书写方便</p>\n<p>缺点： 添加许多无意义的标签，结构化较差。 我只能说，w3c 你推荐的方法我不接受，你不值得拥有。。。</p>\n<h3 id=\"父级添加-overflow-属性方法\"><a href=\"#父级添加-overflow-属性方法\" class=\"headerlink\" title=\"父级添加 overflow 属性方法\"></a>父级添加 overflow 属性方法</h3><p>可以通过触发 BFC 的方式，可以实现清除浮动效果。（BFC 后面讲解）</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\">可以给父级添加： overflow为 hidden|auto|scroll  都可以实现。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>优点： 代码简洁</p>\n<p>缺点： 内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</p>\n<h3 id=\"使用-after-伪元素清除浮动\"><a href=\"#使用-after-伪元素清除浮动\" class=\"headerlink\" title=\"使用 after 伪元素清除浮动\"></a>使用 after 伪元素清除浮动</h3><p><strong>:after 方式为空元素的升级版，好处是不用单独加标签了</strong></p>\n<p>使用方法：</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token number\">.</span><span class=\"token property\">clearfix</span><span class=\"token punctuation\">:</span>after &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">clear</span><span class=\"token punctuation\">:</span> both<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">visibility</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">.</span>clearfix &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  *<span class=\"token property\">zoom</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* IE6、7 专有 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>优点： 符合闭合浮动思想 结构语义化正确</p>\n<p>缺点： 由于 IE6-7 不支持:after，使用 zoom:1 触发 hasLayout。</p>\n<p>代表网站： 百度、淘宝网、网易等</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/163.png\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n<p>注意： content:”.” 里面尽量跟一个小点，或者其他，尽量不要为空，否则再 firefox 7.0 前的版本会有生成空格。</p>\n<h3 id=\"使用-before-和-after-双伪元素清除浮动\"><a href=\"#使用-before-和-after-双伪元素清除浮动\" class=\"headerlink\" title=\"使用 before 和 after 双伪元素清除浮动\"></a>使用 before 和 after 双伪元素清除浮动</h3><p>使用方法：</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token number\">.</span><span class=\"token property\">clearfix</span><span class=\"token punctuation\">:</span>before,\n<span class=\"token number\">.</span><span class=\"token property\">clearfix</span><span class=\"token punctuation\">:</span>after &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> table<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 这句话可以出发BFC BFC可以清除浮动,BFC我们后面讲 */</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">.</span><span class=\"token property\">clearfix</span><span class=\"token punctuation\">:</span>after &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">clear</span><span class=\"token punctuation\">:</span> both<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">.</span>clearfix &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  *<span class=\"token property\">zoom</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>优点： 代码更简洁</p>\n<p>缺点： 由于 IE6-7 不支持:after，使用 zoom:1 触发 hasLayout。</p>\n<p>代表网站： 小米、腾讯等</p>\n<h1 id=\"Photoshop-图像处理专家\"><a href=\"#Photoshop-图像处理专家\" class=\"headerlink\" title=\"Photoshop 图像处理专家\"></a>Photoshop 图像处理专家</h1><p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498465020015.png\" alt=\"1498465020015\"></p>\n<p>PS 工具是我们使用频率比较高的软件之一， 我们学习 PS 目的不是为了设计海报做电商和 UI 的，而是要求：</p>\n<ol>\n<li>会简单的抠图</li>\n<li>会简单的修改 PSD 效果图</li>\n<li><strong>熟练的切图</strong></li>\n<li>能和网站美工美眉有共同话题。。。。。</li>\n</ol>\n<h2 id=\"Photoshop-基本使用\"><a href=\"#Photoshop-基本使用\" class=\"headerlink\" title=\"Photoshop 基本使用\"></a>Photoshop 基本使用</h2><h2 id=\"PS-界面组成：\"><a href=\"#PS-界面组成：\" class=\"headerlink\" title=\"PS 界面组成：\"></a>PS 界面组成：</h2><p>菜单栏、选项栏、工具栏、浮动面板（拖拽名称，可单独操作面板）、绘图窗口<br>​ 窗口菜单，可显示隐藏所有面板</p>\n<p>工作区：（新建）</p>\n<p>调整浮动面板</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/jiemian.png\"/>\n\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><p>文件下拉菜单：<br>​ 1、新建 新建文档 CTRL+N</p>\n<p>单位：像素 厘米 毫米</p>\n<p>屏幕显示： 单位 像素 72 像素/英寸 RGB 颜色模式</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/huabu.png\"/>\n\n<p>2、关闭文档 CTRL+W</p>\n<p>3、存储 CTRL+S （替存）</p>\n<p>4、存储为 CTRL+SHIFT+S 另存一份文件</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/baocun.png\"/>\n\n<p>5、格式：<br>​ .psd PS 源文件格式 图层、文字、样式等，可再次编辑<br>​ （给自己）<br>​ .jpg 有损压缩格式 （给客户） 品质 最高 12</p>\n<p>6、文件打开：<br>​ 1）文件下拉菜单-打开（CTRL+O 欧）</p>\n<p>​ 2）双击软件空白处也能打开<br>​</p>\n<h2 id=\"移动工具-V\"><a href=\"#移动工具-V\" class=\"headerlink\" title=\"移动工具 V\"></a>移动工具 V</h2><p>1、不同文件之间拖拽图像。</p>\n<h2 id=\"自由变形\"><a href=\"#自由变形\" class=\"headerlink\" title=\"自由变形\"></a>自由变形</h2><p>ctrl + T 可以改变图像的大小</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/bianhuan.png\" />\n\n<p>按下 enter 回车确认操作。</p>\n<h2 id=\"图层操作-重点\"><a href=\"#图层操作-重点\" class=\"headerlink\" title=\"图层操作(重点)\"></a>图层操作(重点)</h2><p>图层面板快捷键 F7 其实图层就是一张张透明的纸 可以实现叠加问题。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/tuceng.png\" />\n\n<p>图层选择： 使用移动工具 V</p>\n<p>1、图层缩览图判断</p>\n<p>2、按住 CTRL,在目标图像上单击</p>\n<p>3、将光标放置在目标图像上右键，选择图层名称</p>\n<p>图层面板中加选图层：</p>\n<p>1、按 SHIFT，单击另一目标图层 中间所有图层被选中</p>\n<p>2、按 CTRL，单击另一目标图层 只选中目标图层</p>\n<p>复制图层：选中目标图层后（移动工具状态下）</p>\n<p>1、按 ALT 拖拽图像</p>\n<p>2、CTRL+J （重合）</p>\n<p>案例： 摆放一个自行车</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/bike.jpg\" />\n\n<h2 id=\"图层编组\"><a href=\"#图层编组\" class=\"headerlink\" title=\"图层编组\"></a>图层编组</h2><p>选中目标图层，CTRL+G</p>\n<p>取消编组：CTRL+SHIFT+G</p>\n<p>双击图层名称可重新命名</p>\n<p>双击组名称，可命名组</p>\n<p>移动工具 V 选择组或图层时，需设置选项栏</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498465862231.png\" alt=\"1498465862231\"></p>\n<h2 id=\"图层上下位置移动\"><a href=\"#图层上下位置移动\" class=\"headerlink\" title=\"图层上下位置移动\"></a>图层上下位置移动</h2><p>1、选中目标图层，在图层面拖拽</p>\n<p>2、CTRL+] 向上移动图层<br>​ CTRL+[ 向下移动图层</p>\n<p>3、CTRL+SHIFT+] 图层置顶<br>​ CTRL+SHIFT+[ 图层置底</p>\n<p>移动选区或图像时：</p>\n<p>移动过程中，没释放鼠标，按住 SHIFT，可同一水平线、同一垂线、45 度移动。</p>\n<p>ps 中的撤销操作是：</p>\n<p>ctrl+z 撤销一步</p>\n<p>ctrl+alt+z 撤销多步</p>\n<h2 id=\"图层合并\"><a href=\"#图层合并\" class=\"headerlink\" title=\"图层合并\"></a>图层合并</h2><p>ctrl+e 可以合并图层</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/hebing.png\" />\n\n<h2 id=\"图层透明度\"><a href=\"#图层透明度\" class=\"headerlink\" title=\"图层透明度\"></a>图层透明度</h2><p>不透明度：设置图层的不透明程度 0%完全透明，不可见</p>\n<p>​ 100%完全不透明，真实可见</p>\n<p>填充：与不透明度效果类似</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498465905203.png\" alt=\"1498465905203\">)</p>\n<p>键盘数字键，可快速设置透明度数值</p>\n<h2 id=\"矩形选区工具-M\"><a href=\"#矩形选区工具-M\" class=\"headerlink\" title=\"矩形选区工具 M\"></a>矩形选区工具 M</h2><p>用来选择某部分区域 我们成为选区工具</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/gongjuxiang.png\" />\n\n<p>取消选区： ctrl+d</p>\n<h2 id=\"颜色填充\"><a href=\"#颜色填充\" class=\"headerlink\" title=\"颜色填充\"></a>颜色填充</h2><img src=\"https://zclzone.gitee.io/resource/image/blog/media/yanse1.png\" />\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/yanse2.png\" />\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/miqi.jpg\"/>\n\n<h2 id=\"套索工具-L\"><a href=\"#套索工具-L\" class=\"headerlink\" title=\"套索工具 L\"></a>套索工具 L</h2><p>1、套索工具 L 在屏幕上拖拽鼠标左键，释放后生成选区</p>\n<p>2、多边形套索 L 连续单击绘制多边形选区</p>\n<p>​ 闭合方法：1、单击起始点 2、双击任意位置</p>\n<p>​ DELETE 删除当前点</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/shiboguan.jpg\" />\n\n<h2 id=\"磁性套索-L\"><a href=\"#磁性套索-L\" class=\"headerlink\" title=\"磁性套索 L\"></a>磁性套索 L</h2><p>L 在颜色交界的位置单击后拖动。单击起始点后，生成选区。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/cixing.jpg\" />\n\n<h2 id=\"魔棒工具-W\"><a href=\"#魔棒工具-W\" class=\"headerlink\" title=\"魔棒工具 W\"></a>魔棒工具 W</h2><p>以单击位置为选择色，选择相似颜色生成选区。</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498465928343.png\" alt=\"1498465928343\"></p>\n<p>容差：选择颜色的范围 容差小，颜色选择精确。 0-255</p>\n<p>连续：勾选连续时，相连颜色生成选区。</p>\n<p>​ 不勾选，画面中所有相似颜色被选中生成选区。</p>\n<p>按 SHIFT 在未生成选区位置单击，可选区相加。</p>\n<p>选区反选：CTRL+SHIFT+I</p>\n<h2 id=\"选区布尔运算\"><a href=\"#选区布尔运算\" class=\"headerlink\" title=\"选区布尔运算\"></a>选区布尔运算</h2><p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498465944087.png\" alt=\"1498465944087\"></p>\n<p>选区面积大小的变化。</p>\n<p>新选区：保持选中状态</p>\n<p>添加到选区：相加运算（按住 SHIFT 再绘制选区）</p>\n<p>从选区减去：相减（按住 ALT 再绘制选区）</p>\n<p>与选区交叉：重合部分保留。（按住 ALT+SHIFT 再绘制选区）</p>\n<p>梦幻星球</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/chengshi.jpg\" />\n\n<h2 id=\"钢笔工具：-P\"><a href=\"#钢笔工具：-P\" class=\"headerlink\" title=\"钢笔工具： P\"></a>钢笔工具： P</h2><p>作用：绘制路径，生成选区，抠图。</p>\n<p>组成;路径线和锚点</p>\n<p>绘制路径后，CTRL+回车，生成选区。</p>\n<p>路径类型：</p>\n<p>直线型路径：连续单击</p>\n<p>曲线型路径：第一点单击，第二点拖动鼠标。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/jiu.png\"/>\n\n<h2 id=\"文字工具\"><a href=\"#文字工具\" class=\"headerlink\" title=\"文字工具\"></a>文字工具</h2><p>T 可以直接输入文字</p>\n<h2 id=\"Photoshop-切图\"><a href=\"#Photoshop-切图\" class=\"headerlink\" title=\"Photoshop 切图\"></a>Photoshop 切图</h2><p>PS 切图 可以 分为 手动 利用切片切图 以及 利用 PS 的插件快速切图</p>\n<h3 id=\"切片工具\"><a href=\"#切片工具\" class=\"headerlink\" title=\"切片工具\"></a>切片工具</h3><p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498466173246.png\" alt=\"1498466173246\"></p>\n<ol>\n<li><p>利用切片工具手动划出</p>\n</li>\n<li><p>图层菜单—新建基于图层的切片</p>\n</li>\n<li><p>利用标尺 基于参考线的切片 （选择切片工具）</p>\n<p>​</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498466734205.png\" alt=\"1498466734205\"></p>\n</li>\n<li><p>先选个一个整个的切片， 切片选择工具– 属性面板中有 “划分” –可以等分数平分切图</p>\n</li>\n</ol>\n<p>导出切片： 文件– 存储为 web 设备所用格式</p>\n<h3 id=\"辅助线和切片使用及清除\"><a href=\"#辅助线和切片使用及清除\" class=\"headerlink\" title=\"辅助线和切片使用及清除\"></a>辅助线和切片使用及清除</h3><p>视图菜单– 清除 辅助线/ 清除切片</p>\n<h3 id=\"切图插件\"><a href=\"#切图插件\" class=\"headerlink\" title=\"切图插件\"></a>切图插件</h3><p>Cutterman 是一款运行在 photoshop 中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 “导出 web 所用格式” 以及使用切片工具进行挨个切图的繁琐流程。 它支持各种各样的图片尺寸、格式、形态输出，方便你在 pc、ios、Android 等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。</p>\n<p>官网: <a href=\"http://www.cutterman.cn/zh/cutterman\">http://www.cutterman.cn/zh/cutterman</a></p>\n<p>注意： cutterman 插件要求你的 ps 必须是完整版，不能是绿色版，所以大家需要从新安装完整版本。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/sample1.gif\" />\n\n<h1 id=\"项目案例：-学成网\"><a href=\"#项目案例：-学成网\" class=\"headerlink\" title=\"项目案例： 学成网\"></a>项目案例： 学成网</h1><p>案例练习目的是总结以前的 css 和 html</p>\n<p>还有 ps 的使用。</p>\n<p>制作步骤：</p>\n<ol>\n<li>准备相关文件。（内部样式表) html 文件(index.html) 图片文件</li>\n<li>准备 CSS 初始化。 书写结构和样式</li>\n<li>确定版心（是 1200 像素)和各个模块。</li>\n</ol>\n<h1 id=\"定位-position\"><a href=\"#定位-position\" class=\"headerlink\" title=\"定位(position)\"></a>定位(position)</h1><p>如果，说浮动， 关键在一个 “浮” 字上面， 那么 我们的定位，关键在于一个 “位” 上。</p>\n<p>PS: 定位是我们 CSS 算是数一数二难点的了，但是，你务必要学好它，我们 CSS 离不开定位，特别是后面的 js 特效，天天和定位打交道。不要抵触它，反而要爱上它，它可以让我们工作更加轻松哦！</p>\n<h2 id=\"为什么要用定位？\"><a href=\"#为什么要用定位？\" class=\"headerlink\" title=\"为什么要用定位？\"></a>为什么要用定位？</h2><p>那么定位，最长运用的场景再那里呢？ 来看几幅图片，你一定会有感悟！</p>\n<p>第一幅图， 小黄色块可以再图片上移动：</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/1.gif\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n<p>第二幅图， 左右箭头压住图片：</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/2.gif\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n<p>第三幅图, hot 再盒子外面多出一块，更加突出：</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/it.png\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n<p>以上三个小地方，如果用标准流或者浮动，实现会比较复杂或者难以实现，此时我们用定位来做，just soso！</p>\n<h2 id=\"元素的定位属性\"><a href=\"#元素的定位属性\" class=\"headerlink\" title=\"元素的定位属性\"></a>元素的定位属性</h2><p>元素的定位属性主要包括定位模式和边偏移两部分。</p>\n<p>1、边偏移</p>\n<table>\n<thead>\n<tr>\n<th>边偏移属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>top</td>\n<td>顶端偏移量，定义元素相对于其父元素上边线的距离</td>\n</tr>\n<tr>\n<td>bottom</td>\n<td>底部偏移量，定义元素相对于其父元素下边线的距离</td>\n</tr>\n<tr>\n<td>left</td>\n<td>左侧偏移量，定义元素相对于其父元素左边线的距离</td>\n</tr>\n<tr>\n<td>right</td>\n<td>右侧偏移量，定义元素相对于其父元素右边线的距离</td>\n</tr>\n</tbody></table>\n<p>也就说，以后定位要和这边偏移搭配使用了， 比如 top: 100px; left: 30px; 等等</p>\n<p>2、定位模式(定位的分类)</p>\n<p>在 CSS 中，position 属性用于定义元素的定位模式，其基本语法格式如下：</p>\n<p>选择器{position:属性值;}</p>\n<p>position 属性的常用值</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>static</td>\n<td>自动定位（默认定位方式）</td>\n</tr>\n<tr>\n<td>relative</td>\n<td>相对定位，相对于其原文档流的位置进行定位</td>\n</tr>\n<tr>\n<td>absolute</td>\n<td>绝对定位，相对于其上一个已经定位的父元素进行定位</td>\n</tr>\n<tr>\n<td>fixed</td>\n<td>固定定位，相对于浏览器窗口进行定位</td>\n</tr>\n</tbody></table>\n<h2 id=\"静态定位-static\"><a href=\"#静态定位-static\" class=\"headerlink\" title=\"静态定位(static)\"></a>静态定位(static)</h2><p>静态定位是所有元素的默认定位方式，当 position 属性的取值为 static 时，可以将元素定位于静态位置。 所谓静态位置就是各个元素在 HTML 文档流中默认的位置。</p>\n<p>上面的话翻译成白话： 就是网页中所有元素都默认的是静态定位哦！ 其实就是标准流的特性。</p>\n<p>在静态定位状态下，无法通过边偏移属性（top、bottom、left 或 right）来改变元素的位置。</p>\n<p>PS： 静态定位其实没啥可说的。</p>\n<h2 id=\"相对定位-relative-自恋型\"><a href=\"#相对定位-relative-自恋型\" class=\"headerlink\" title=\"相对定位 relative(自恋型)\"></a>相对定位 relative(自恋型)</h2><pre><code>小笑话：\n刚刚看到一个超级超级帅的帅哥，看得我都忍不住想和他搞基了。世间怎会有如此之完美的男人。我和他就这样一动不动的对视着，就仿佛一见钟情。时间也在这一瞬间停止了。直到我的手麻了。才恋恋不舍的放下镜子。。。。</code></pre>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/smail.gif\" width=\"100\"/>\n\n<p>相对定位是将元素相对于它在标准流中的位置进行定位，当 position 属性的取值为 relative 时，可以将元素定位于相对位置。</p>\n<p>对元素设置相对定位后，可以通过边偏移属性改变元素的位置，但是它在文档流中的位置仍然保留。如下图所示，即是一个相对定位的效果展示：</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/r.png\"  />\n\n<p>注意：</p>\n<ol>\n<li>相对定位最重要的一点是，它可以通过边偏移移动位置，但是原来的所占的位置，继续占有。</li>\n<li>其次，每次移动的位置，是以自己的左上角为基点移动（相对于自己来移动位置）</li>\n</ol>\n<p>就是说，相对定位的盒子仍在标准流中，它后面的盒子仍以标准流方式对待它。（相对定位不脱标）</p>\n<p>如果说浮动的主要目的是 让多个块级元素一行显示，那么定位的主要价值就是 移动位置， 让盒子到我们想要的位置上去。</p>\n<h2 id=\"绝对定位-absolute-拼爹型\"><a href=\"#绝对定位-absolute-拼爹型\" class=\"headerlink\" title=\"绝对定位 absolute (拼爹型)\"></a>绝对定位 absolute (拼爹型)</h2><pre><code>小笑话：\n\n吃早饭时，老婆往儿子碗里放了两个煎蛋，儿子全给了我，还一本正经地说：“爸爸，多吃点，男人养家不容易。” &lt;br/&gt;\n\n我一阵感动，刚想夸他两句。\n\n儿子接着说：“以后全靠你让我拼爹了！”</code></pre>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/smail.gif\" width=\"100\"/>\n\n<p>[注意] 如果文档可滚动，绝对定位元素会随着它滚动，因为元素最终会相对于正常流的某一部分定位。</p>\n<p>当 position 属性的取值为 absolute 时，可以将元素的定位模式设置为绝对定位。</p>\n<p>注意： 绝对定位最重要的一点是，它可以通过边偏移移动位置，但是它完全脱标，完全不占位置。</p>\n<h3 id=\"父级没有定位\"><a href=\"#父级没有定位\" class=\"headerlink\" title=\"父级没有定位\"></a>父级没有定位</h3><p>若所有父元素都没有定位，以浏览器为准对齐(document 文档)。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/ab.png\" />\n\n<h3 id=\"父级有定位\"><a href=\"#父级有定位\" class=\"headerlink\" title=\"父级有定位\"></a>父级有定位</h3><p>绝对定位是将元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/ab1.png\" />\n\n<h3 id=\"子绝父相\"><a href=\"#子绝父相\" class=\"headerlink\" title=\"子绝父相\"></a>子绝父相</h3><p>这个“子绝父相”太重要了，是我们学习定位的口诀，时时刻刻记住的。</p>\n<p>这句话的意思是 子级是绝对定位的话， 父级要用相对定位。</p>\n<p>首先， 我们说下， 绝对定位是将元素依据最近的已经定位绝对、固定或相对定位）的父元素（祖先）进行定位。</p>\n<p>就是说， 子级是绝对定位，父亲只要是定位即可（不管父亲是绝对定位还是相对定位，甚至是固定定位都可以），就是说， 子绝父绝，子绝父相都是正确的。</p>\n<p>但是，在我们网页布局的时候， 最常说的 子绝父相是怎么来的呢？ 请看如下图：</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/zi.png\"  style=\"border: 1px dashed #3c3c3c;\"/>\n\n<p>所以，我们可以得出如下结论：</p>\n<p>因为子级是绝对定位，不会占有位置， 可以放到父盒子里面的任何一个地方。</p>\n<p>父盒子布局时，需要占有位置，因此父亲只能是 相对定位.</p>\n<p>这就是子绝父相的由来。</p>\n<h2 id=\"绝对定位的盒子水平-垂直居中\"><a href=\"#绝对定位的盒子水平-垂直居中\" class=\"headerlink\" title=\"绝对定位的盒子水平/垂直居中\"></a>绝对定位的盒子水平/垂直居中</h2><p>普通的盒子是左右 margin 改为 auto 就可， 但是对于绝对定位就无效了</p>\n<p>定位的盒子也可以水平或者垂直居中，有一个算法。</p>\n<ol>\n<li><p>首先 left 50% 父盒子的一半大小</p>\n</li>\n<li><p>然后走自己外边距负的一半值就可以了 margin-left。</p>\n<p>​</p>\n</li>\n</ol>\n<h2 id=\"固定定位-fixed-认死理型\"><a href=\"#固定定位-fixed-认死理型\" class=\"headerlink\" title=\"固定定位 fixed(认死理型)\"></a>固定定位 fixed(认死理型)</h2><p>固定定位是绝对定位的一种特殊形式，类似于 正方形是一个特殊的 矩形。它以浏览器窗口作为参照物来定义网页元素。当 position 属性的取值为 fixed 时，即可将元素的定位模式设置为固定定位。</p>\n<p>当对元素设置固定定位后，它将脱离标准文档流的控制，始终依据浏览器窗口来定义自己的显示位置。不管浏览器滚动条如何滚动也不管浏览器窗口的大小如何变化，该元素都会始终显示在浏览器窗口的固定位置。</p>\n<p>固定定位有两点：</p>\n<ol>\n<li>固定定位的元素跟父亲没有任何关系，只认浏览器。</li>\n<li>固定定位完全脱标，不占有位置，不随着滚动条滚动。</li>\n</ol>\n<p>记忆法： 就类似于孙猴子， 无父无母，好不容易找到一个可靠的师傅（浏览器），就听的师傅的，别的都不听。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/sun.jpg\" width=\"100\">\n\n<p>ie6 等低版本浏览器不支持固定定位。</p>\n<h2 id=\"叠放次序（z-index）\"><a href=\"#叠放次序（z-index）\" class=\"headerlink\" title=\"叠放次序（z-index）\"></a>叠放次序（z-index）</h2><p>当对多个元素同时设置定位时，定位元素之间有可能会发生重叠。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/zzz.png\" />\n\n<p>在 CSS 中，要想调整重叠定位元素的堆叠顺序，可以对定位元素应用 z-index 层叠等级属性，其取值可为正整数、负整数和 0。</p>\n<p>比如： z-index: 2;</p>\n<p>注意：</p>\n<ol>\n<li><p>z-index 的默认属性值是 0，取值越大，定位元素在层叠元素中越居上。</p>\n</li>\n<li><p>如果取值相同，则根据书写顺序，后来居上。</p>\n</li>\n<li><p>后面数字一定不能加单位。</p>\n</li>\n<li><p>只有相对定位，绝对定位，固定定位有此属性，其余标准流，浮动，静态定位都无此属性，亦不可指定此属性。</p>\n</li>\n</ol>\n<h1 id=\"四种定位总结\"><a href=\"#四种定位总结\" class=\"headerlink\" title=\"四种定位总结\"></a>四种定位总结</h1><table>\n<thead>\n<tr>\n<th>定位模式</th>\n<th>是否脱标占有位置</th>\n<th>是否可以使用边偏移</th>\n<th>移动位置基准</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>静态 static</td>\n<td>不脱标，正常模式</td>\n<td>不可以</td>\n<td>正常模式</td>\n</tr>\n<tr>\n<td>相对定位 relative</td>\n<td>不脱标，占有位置</td>\n<td>可以</td>\n<td>相对自身位置移动（自恋型）</td>\n</tr>\n<tr>\n<td>绝对定位 absolute</td>\n<td>完全脱标，不占有位置</td>\n<td>可以</td>\n<td>相对于定位父级移动位置（拼爹型）</td>\n</tr>\n<tr>\n<td>固定定位 fixed</td>\n<td>完全脱标，不占有位置</td>\n<td>可以</td>\n<td>相对于浏览器移动位置（认死理型）</td>\n</tr>\n</tbody></table>\n<h1 id=\"定位模式转换\"><a href=\"#定位模式转换\" class=\"headerlink\" title=\"定位模式转换\"></a>定位模式转换</h1><p>跟 浮动一样， 元素添加了 绝对定位和固定定位之后， 元素模式也会发生转换， 都转换为 行内块模式，</p>\n<p>** 因此 比如 行内元素 如果添加了 绝对定位或者 固定定位后 浮动后，可以不用转换模式，直接给高度和宽度就可以了。**</p>\n<h1 id=\"元素的显示与隐藏\"><a href=\"#元素的显示与隐藏\" class=\"headerlink\" title=\"元素的显示与隐藏\"></a>元素的显示与隐藏</h1><p>在 CSS 中有三个显示和隐藏的单词比较常见，我们要区分开，他们分别是 display visibility 和 overflow。</p>\n<p>他们的主要目的是让一个元素在页面中消失，但是不在文档源码中删除。 最常见的是网站广告，当我们点击类似关闭不见了，但是我们重新刷新页面，它们又会出现和你玩躲猫猫！！</p>\n<h2 id=\"display-显示\"><a href=\"#display-显示\" class=\"headerlink\" title=\"display 显示\"></a>display 显示</h2><p>display 设置或检索对象是否及如何显示。</p>\n<p>display : none 隐藏对象 与它相反的是 display:block 除了转换为块级元素之外，同时还有显示元素的意思。</p>\n<p>特点： 隐藏之后，不再保留位置。</p>\n<h2 id=\"visibility-可见性\"><a href=\"#visibility-可见性\" class=\"headerlink\" title=\"visibility 可见性\"></a>visibility 可见性</h2><p>设置或检索是否显示对象。</p>\n<p>visible : 　对象可视</p>\n<p>hidden : 　对象隐藏</p>\n<p>特点： 隐藏之后，继续保留原有位置。（停职留薪）</p>\n<h2 id=\"overflow-溢出\"><a href=\"#overflow-溢出\" class=\"headerlink\" title=\"overflow 溢出\"></a>overflow 溢出</h2><p>检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。</p>\n<p>visible : 　不剪切内容也不添加滚动条。</p>\n<p>auto : 　 超出自动显示滚动条，不超出不显示滚动条</p>\n<p>hidden : 　不显示超过对象尺寸的内容，超出的部分隐藏掉</p>\n<p>scroll : 　不管超出内容否，总是显示滚动条</p>\n<h1 id=\"CSS-高级技巧\"><a href=\"#CSS-高级技巧\" class=\"headerlink\" title=\"CSS 高级技巧\"></a>CSS 高级技巧</h1><h2 id=\"CSS-用户界面样式\"><a href=\"#CSS-用户界面样式\" class=\"headerlink\" title=\"CSS 用户界面样式\"></a>CSS 用户界面样式</h2><p>所谓的界面样式， 就是更改一些用户操作样式， 比如 更改用户的鼠标样式， 表单轮廓等。但是比如滚动条的样式改动受到了很多浏览器的抵制，因此我们就放弃了。 防止表单域拖拽</p>\n<h3 id=\"鼠标样式-cursor\"><a href=\"#鼠标样式-cursor\" class=\"headerlink\" title=\"鼠标样式 cursor\"></a>鼠标样式 cursor</h3><p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">cursor : default 小白 | pointer 小手 | move 移动 | text 文本<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>鼠标放我身上查看效果哦：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span>default</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是小白<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span>pointer</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是小手<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span>move</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是移动<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span>text</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是文本<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>尽量不要用 hand 因为 火狐不支持 pointer ie6 以上都支持的尽量用</p>\n<h3 id=\"轮廓-outline\"><a href=\"#轮廓-outline\" class=\"headerlink\" title=\"轮廓 outline\"></a>轮廓 outline</h3><p>是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> outline-color ||outline-style || outline-width<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>但是我们都不关心可以设置多少，我们平时都是去掉的。</p>\n<p>最直接的写法是 ： outline: 0; 或者 outline: none;</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"防止拖拽文本域-resize\"><a href=\"#防止拖拽文本域-resize\" class=\"headerlink\" title=\"防止拖拽文本域 resize\"></a>防止拖拽文本域 resize</h3><p>resize：none 这个单词可以防止 火狐 谷歌等浏览器随意的拖动 文本域。</p>\n<p>右下角可以拖拽：</p>\n<p><textarea></textarea></p>\n<p>右下角不可以拖拽：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">resize</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textarea</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"vertical-align-垂直对齐\"><a href=\"#vertical-align-垂直对齐\" class=\"headerlink\" title=\"vertical-align 垂直对齐\"></a>vertical-align 垂直对齐</h2><p>以前我们讲过让带有宽度的块级元素居中对齐，是 margin: 0 auto;</p>\n<p>以前我们还讲过让文字居中对齐，是 text-align: center;</p>\n<p>但是我们从来没有讲过有垂直居中的属性， 我们的妈妈一直很担心我们的垂直居中怎么做。</p>\n<p>vertical-align 垂直对齐， 这个看上去很美好的一个属性， 实际有着不可捉摸的脾气，否则我们也不会这么晚来讲解。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/xian.jpg\" />\n\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">vertical-align</span><span class=\"token punctuation\">:</span> baseline |top |middle |bottom<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>设置或检索对象内容的垂直对其方式。</p>\n<p>vertical-align 不影响块级元素中的内容对齐，它只针对于 行内元素或者行内块元素，特别是行内块元素， <strong>通常用来控制图片/表单与文字的对齐</strong>。</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498467742995.png\" alt=\"1498467742995\"></p>\n<h3 id=\"图片、表单和文字对齐\"><a href=\"#图片、表单和文字对齐\" class=\"headerlink\" title=\"图片、表单和文字对齐\"></a>图片、表单和文字对齐</h3><p>所以我们知道，我们可以通过 vertical-align 控制图片和文字的垂直关系了。 默认的图片会和文字基线对齐。</p>\n<h3 id=\"去除图片底侧空白缝隙\"><a href=\"#去除图片底侧空白缝隙\" class=\"headerlink\" title=\"去除图片底侧空白缝隙\"></a>去除图片底侧空白缝隙</h3><p>有个很重要特性你要记住： 图片或者表单等行内块元素，他的底线会和父级盒子的基线对齐。这样会造成一个问题，就是图片底侧会有一个空白缝隙。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/3.jpg\" />\n\n<p>解决的方法就是：</p>\n<ol>\n<li>给 img vertical-align:middle | top 等等。 让图片不要和基线对齐。<img src=\"https://zclzone.gitee.io/resource/image/blog/media/1633.png\"  width=\"500\"  style=\"border: 1px dashed #ccc;\" /></li>\n</ol>\n<ol>\n<li>给 img 添加 display：block; 转换为块级元素就不会存在问题了。<img src=\"https://zclzone.gitee.io/resource/image/blog/media/sina1.png\" width=\"500\" style=\"border: 1px dashed #ccc;\"/></li>\n</ol>\n<h1 id=\"溢出的文字隐藏\"><a href=\"#溢出的文字隐藏\" class=\"headerlink\" title=\"溢出的文字隐藏\"></a>溢出的文字隐藏</h1><h2 id=\"word-break-自动换行\"><a href=\"#word-break-自动换行\" class=\"headerlink\" title=\"word-break:自动换行\"></a>word-break:自动换行</h2><p>normal 使用浏览器默认的换行规则。</p>\n<p>break-all 允许在单词内换行。</p>\n<p>keep-all 只能在半角空格或连字符处换行。</p>\n<p>主要处理英文单词</p>\n<h2 id=\"white-space\"><a href=\"#white-space\" class=\"headerlink\" title=\"white-space\"></a>white-space</h2><p>white-space 设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容</p>\n<p>normal : 　默认处理方式<br>nowrap : 　强制在同一行内显示所有文本，直到文本结束或者遭遇 br 标签对象才换行。</p>\n<p>可以处理中文</p>\n<h2 id=\"text-overflow-文字溢出\"><a href=\"#text-overflow-文字溢出\" class=\"headerlink\" title=\"text-overflow 文字溢出\"></a>text-overflow 文字溢出</h2><p>text-overflow : clip | ellipsis</p>\n<p>设置或检索是否使用一个省略标记（…）标示对象内文本的溢出</p>\n<p>clip : 　不显示省略标记（…），而是简单的裁切</p>\n<p>ellipsis : 　当对象内文本溢出时显示省略标记（…）</p>\n<p>注意一定要首先强制一行内显示，再次和 overflow 属性 搭配使用</p>\n<h2 id=\"CSS-精灵技术（sprite）-小妖精-雪碧\"><a href=\"#CSS-精灵技术（sprite）-小妖精-雪碧\" class=\"headerlink\" title=\"CSS 精灵技术（sprite） 小妖精 雪碧\"></a>CSS 精灵技术（sprite） 小妖精 雪碧</h2><h3 id=\"精灵技术产生的背景\"><a href=\"#精灵技术产生的背景\" class=\"headerlink\" title=\"精灵技术产生的背景\"></a>精灵技术产生的背景</h3><img src=\"https://zclzone.gitee.io/resource/image/blog/media/sss.png\" />\n\n<p>图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。</p>\n<p>然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度，出现了 CSS 精灵技术（也称 CSS Sprites、CSS 雪碧）。</p>\n<h3 id=\"精灵技术本质\"><a href=\"#精灵技术本质\" class=\"headerlink\" title=\"精灵技术本质\"></a>精灵技术本质</h3><p>简单地说，CSS 精灵是一种处理网页背景图像的方式。它将一个页面涉及到的所有零星背景图像都集中到一张大图中去，然后将大图应用于网页，这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。通常情况下，这个由很多小的背景图像合成的大图被称为精灵图（雪碧图），如下图所示为京东网站中的一个精灵图。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/jds.png\"  style=\"border: 1px dashed #ccc;\" />\n\n<h3 id=\"精灵技术的使用\"><a href=\"#精灵技术的使用\" class=\"headerlink\" title=\"精灵技术的使用\"></a>精灵技术的使用</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图，就需要使用 CSS 的 background-image、background-repeat 和 background-position 属性进行背景定位，其中最关键的是使用 background-position 属性精确地定位。</p>\n<h3 id=\"制作精灵图\"><a href=\"#制作精灵图\" class=\"headerlink\" title=\"制作精灵图\"></a>制作精灵图</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），那我们要做的，就是把小图拼合成一张大图。</p>\n<p>大部分情况下，精灵图都是网页美工做。</p>\n<pre><code>我们精灵图上放的都是小的装饰性质的背景图片。 插入图片不能往上放。\n我们精灵图的宽度取决于最宽的那个背景。\n我们可以横向摆放也可以纵向摆放，但是每个图片之间，间隔至少隔开偶数像素合适。\n在我们精灵图的最低端，留一片空隙，方便我们以后添加其他精灵图。</code></pre>\n<p>结束语： 小公司，背景图片很少的情况，没有必要使用精灵技术，维护成本太高。 如果是背景图片比较多，可以建议使用精灵技术。</p>\n<h2 id=\"字体图标\"><a href=\"#字体图标\" class=\"headerlink\" title=\"字体图标\"></a>字体图标</h2><p>图片是有诸多优点的，但是缺点很明显，比如图片不但增加了总文件的大小，还增加了很多额外的”http 请求”，这都会大大降低网页的性能的。更重要的是图片不能很好的进行“缩放”，因为图片放大和缩小会失真。 我们后面会学习移动端响应式，很多情况下希望我们的图标是可以缩放的。此时，一个非常重要的技术出现了，额不是出现了，是以前就有，是被从新”宠幸”啦。。 这就是字体图标（iconfont).</p>\n<h3 id=\"字体图标优点\"><a href=\"#字体图标优点\" class=\"headerlink\" title=\"字体图标优点\"></a>字体图标优点</h3><pre><code>可以做出跟图片一样可以做的事情,改变透明度、旋转度，等..\n但是本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果等等...\n本身体积更小，但携带的信息并没有削减。\n几乎支持所有的浏览器\n移动端设备必备良药...</code></pre>\n<h3 id=\"字体图标使用流程\"><a href=\"#字体图标使用流程\" class=\"headerlink\" title=\"字体图标使用流程\"></a>字体图标使用流程</h3><p>总体来说，字体图标按照如下流程：</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/fontt.png\" />\n\n<h4 id=\"设计字体图标\"><a href=\"#设计字体图标\" class=\"headerlink\" title=\"设计字体图标\"></a>设计字体图标</h4><p>假如图标是我们公司单独设计，那就需要第一步了，这个属于 UI 设计人员的工作， 他们在 illustrator 或 Sketch 这类矢量图形软件里创建 icon 图标， 比如下图：</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/03.jpg\" />\n\n<p>之后保存为 svg 格式，然后给我们前端人员就好了。</p>\n<p>其实第一步，我们不需要关心，只需要给我们这些图标就可以了，如果图标是大众的，网上本来就有的，可以直接跳过第一步，进入第三步。</p>\n<h4 id=\"上传生成字体包\"><a href=\"#上传生成字体包\" class=\"headerlink\" title=\"上传生成字体包\"></a>上传生成字体包</h4><p>当 UI 设计人员给我们 svg 文件的时候，我们需要转换成我们页面能使用的字体文件， 而且需要生成的是兼容性的适合各个浏览器的。</p>\n<p>​ 推荐网站： <a href=\"http://icomoon.io/\">http://icomoon.io</a></p>\n<p><strong>icomoon 字库</strong></p>\n<p>IcoMoon 成立于 2011 年，推出的第一个自定义图标字体生成器，它允许用户选择他们所需要的图标，使它们成一字型。 内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</p>\n<p>推荐网站： <a href=\"http://www.iconfont.cn/\">http://www.iconfont.cn/</a></p>\n<p><strong>阿里 icon font 字库</strong></p>\n<p><a href=\"http://www.iconfont.cn/\">http://www.iconfont.cn/</a></p>\n<p>这个是阿里妈妈 M2UX 的一个 icon font 字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用 AI 制作图标上传生成。 一个字，免费，免费！！</p>\n<p><strong>fontello</strong></p>\n<p><a href=\"http://fontello.com/\">http://fontello.com/</a></p>\n<p>在线定制你自己的 icon font 字体图标字库，也可以直接从 GitHub 下载整个图标集，该项目也是开源的。</p>\n<p><strong>Font-Awesome</strong></p>\n<p><a href=\"http://fortawesome.github.io/Font-Awesome/\">http://fortawesome.github.io/Font-Awesome/</a></p>\n<p>这是我最喜欢的字库之一了，更新比较快。目前已经有 369 个图标了。</p>\n<p><strong>Glyphicon Halflings</strong></p>\n<p><a href=\"http://glyphicons.com/\">http://glyphicons.com/</a></p>\n<p>这个字体图标可以在 Bootstrap 下免费使用。自带了 200 多个图标。</p>\n<p><strong>Icons8</strong></p>\n<p><a href=\"https://icons8.com/\">https://icons8.com/</a></p>\n<p>提供 PNG 免费下载，像素大能到 500PX</p>\n<h4 id=\"下载兼容字体包\"><a href=\"#下载兼容字体包\" class=\"headerlink\" title=\"下载兼容字体包\"></a>下载兼容字体包</h4><p>刚才上传完毕， 网站会给我们把 UI 做的 svg 图片转换为我们的字体格式， 然后下载下来就好了</p>\n<p>当然，我们不需要自己专门的图标，是想网上找几个图标使用，以上 2 步可以直接省略了， 直接到刚才的网站上找喜欢的下载使用吧。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/fontt1.png\" />\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/fontt2.png\" />\n\n<h4 id=\"字体引入到-HTML\"><a href=\"#字体引入到-HTML\" class=\"headerlink\" title=\"字体引入到 HTML\"></a>字体引入到 HTML</h4><p>得到压缩包之后，最后一步，是最重要的一步了， 就是字体文件已经有了，我们需要引入到我们页面中。</p>\n<ol>\n<li><p>首先把 以下 4 个文件放入到 fonts 文件夹里面。 通俗的做法</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498032122244.png\" alt=\"1498032122244\"></p>\n<h5 id=\"第一步：在样式里面声明字体：-告诉别人我们自己定义的字体\"><a href=\"#第一步：在样式里面声明字体：-告诉别人我们自己定义的字体\" class=\"headerlink\" title=\"第一步：在样式里面声明字体： 告诉别人我们自己定义的字体\"></a>第一步：在样式里面声明字体： 告诉别人我们自己定义的字体</h5><pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@font-face</span> &amp;#123<span class=\"token punctuation\">;</span></span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'icomoon'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">src</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('fonts/icomoon.eot?7kkyc2')</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">src</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('fonts/icomoon.eot?7kkyc2#iefix')</span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'embedded-opentype'</span><span class=\"token punctuation\">)</span>, <span class=\"token url\">url('fonts/icomoon.ttf?7kkyc2')</span>\n      <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'truetype'</span><span class=\"token punctuation\">)</span>, <span class=\"token url\">url('fonts/icomoon.woff?7kkyc2')</span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'woff'</span><span class=\"token punctuation\">)</span>, <span class=\"token url\">url('fonts/icomoon.svg?7kkyc2#icomoon')</span>\n      <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'svg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> normal<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-style</span><span class=\"token punctuation\">:</span> normal<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"第二步：给盒子使用字体\"><a href=\"#第二步：给盒子使用字体\" class=\"headerlink\" title=\"第二步：给盒子使用字体\"></a>第二步：给盒子使用字体</h5><pre class=\"line-numbers language-css\"><code class=\"language-css\">span &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'icomoon'</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"第三步：盒子里面添加结构\"><a href=\"#第三步：盒子里面添加结构\" class=\"headerlink\" title=\"第三步：盒子里面添加结构\"></a>第三步：盒子里面添加结构</h5><pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">span</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>before &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n         <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\\e900\"</span><span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n或者\n&lt;span>&lt;/span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"追加新图标到原来库里面\"><a href=\"#追加新图标到原来库里面\" class=\"headerlink\" title=\"追加新图标到原来库里面\"></a>追加新图标到原来库里面</h3><p>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标，但是原来的不能删除，继续使用，此时我们需要这样做</p>\n<p>把压缩包里面的 selection.json 从新上传，然后，选中自己想要新的图标，从新下载压缩包，替换原来文件即可。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/fontt5.png\" />\n\n</li>\n</ol>\n<h2 id=\"滑动门\"><a href=\"#滑动门\" class=\"headerlink\" title=\"滑动门\"></a>滑动门</h2><p>先来体会下现实中的滑动门,或者你可以叫做推拉门：</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/h.gif\" />\n\n<h3 id=\"滑动门出现的背景\"><a href=\"#滑动门出现的背景\" class=\"headerlink\" title=\"滑动门出现的背景\"></a>滑动门出现的背景</h3><p>制作网页时，为了美观，常常需要为网页元素设置特殊形状的背景，比如微信导航栏，有凸起和凹下去的感觉，最大的问题是里面的字数不一样多，咋办？</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/wxx.jpg\" />\n\n<p>为了使各种特殊形状的背景能够自适应元素中文本内容的多少，出现了 CSS 滑动门技术。它从新的角度构建页面，使各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，可用性更强。 最常见于各种导航栏的滑动门。</p>\n<h3 id=\"核心技术\"><a href=\"#核心技术\" class=\"headerlink\" title=\"核心技术\"></a>核心技术</h3><p>核心技术就是利用 CSS 精灵（主要是背景位置）和盒子 padding 撑开宽度, 以便能适应不同字数的导航栏。</p>\n<p>一般的经典布局都是这样的：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>导航栏内容<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>总结：</p>\n<ol>\n<li>a 设置 背景左侧，padding 撑开合适宽度。</li>\n<li>span 设置背景右侧， padding 撑开合适宽度 剩下由文字继续撑开宽度。</li>\n<li>之所以 a 包含 span 就是因为 整个导航都是可以点击的。</li>\n</ol>\n<h2 id=\"before-和-after-伪元素-详解\"><a href=\"#before-和-after-伪元素-详解\" class=\"headerlink\" title=\"before 和 after 伪元素(详解)\"></a>before 和 after 伪元素(详解)</h2><p>之所以被称为伪元素，是因为他们不是真正的页面元素，html 没有对应的元素，但是其所有用法和表现行为与真正的页面元素一样，可以对其使用诸如页面元素一样的 css 样式，表面上看上去貌似是页面的某些元素来展现，实际上是 css 样式展现的行为，因此被称为伪元素。是伪元素在 html 代码机构中的展现，可以看出无法伪元素的结构无法审查</p>\n<p><strong>注意</strong></p>\n<p>伪元素:before 和:after 添加的内容默认是 inline 元素**；这个两个伪元素的<code>content</code>属性，表示伪元素的内容,设置:before 和:after 时必须设置其<code>content</code>属性，否则伪元素就不起作用。</p>\n<h2 id=\"过渡-CSS3\"><a href=\"#过渡-CSS3\" class=\"headerlink\" title=\"过渡(CSS3)\"></a>过渡(CSS3)</h2><p>过渡（transition)是 CSS3 中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。</p>\n<p>帧动画：通过一帧一帧的画面按照固定顺序和速度播放。如电影胶片</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498445034712.png\" alt=\"1498445034712\"></p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/zhen.gif\" />\n\n<p>在 CSS3 里使用 transition 可以实现补间动画（过渡效果），并且当前元素只要有“属性”发生变化时即存在两种状态(我们用 A 和 B 代指），就可以实现平滑的过渡，为了方便演示采用 hover 切换两种状态，但是并不仅仅局限于 hover 状态来实现过渡。</p>\n<p>语法格式:</p>\n<pre><code>transition: 要过渡的属性  花费时间  运动曲线  何时开始;\n如果有多组属性变化，还是用逗号隔开。</code></pre>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n<th>CSS</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>transition</td>\n<td>简写属性，用于在一个属性中设置四个过渡属性。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>transition-property</td>\n<td>规定应用过渡的 CSS 属性的名称。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>transition-duration</td>\n<td>定义过渡效果花费的时间。默认是 0。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>transition-timing-function</td>\n<td>规定过渡效果的时间曲线。默认是 “ease”。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>transition-delay</td>\n<td>规定过渡效果何时开始。默认是 0。</td>\n<td>3</td>\n</tr>\n</tbody></table>\n<p>如果想要所有的属性都变化过渡， 写一个 all 就可以</p>\n<p>transition-duration 花费时间 单位是 秒 s 比如 0.5s 这个 s 单位必须写 ms 毫秒</p>\n<p>运动曲线 默认是 ease</p>\n<p>何时开始 默认是 0s 立马开始</p>\n<p>运动曲线示意图：</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498445454760.png\" alt=\"1498445454760\"></p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\">div &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">/* transition: 要过渡的属性  花费时间  运动曲线  何时开始; */</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> width <span class=\"token number\">0.6</span>s ease <span class=\"token number\">0</span>s, height <span class=\"token number\">0.3</span>s ease-in <span class=\"token number\">1</span>s<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">/* transtion 过渡的意思  这句话写到div里面而不是 hover里面 */</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">div</span><span class=\"token punctuation\">:</span>hover &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">/* 鼠标经过盒子，我们的宽度变为400 */</span>\n\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">600</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">300</span>px<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> all <span class=\"token number\">0.6</span>s<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 所有属性都变化用all 就可以了  后面俩个属性可以省略 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2D-变形-CSS3-transform\"><a href=\"#2D-变形-CSS3-transform\" class=\"headerlink\" title=\"2D 变形(CSS3) transform\"></a>2D 变形(CSS3) transform</h2><p>transform 是 CSS3 中具有颠覆性的特征之一，可以实现元素的位移、旋转、倾斜、缩放，甚至支持矩阵方式，配合过渡和即将学习的动画知识，可以取代大量之前只能靠 Flash 才可以实现的效果。</p>\n<p>变形转换 transform transform 变换 变形的意思 《 transformers 变形金刚》</p>\n<h3 id=\"移动-translate-x-y\"><a href=\"#移动-translate-x-y\" class=\"headerlink\" title=\"移动 translate(x, y)\"></a>移动 translate(x, y)</h3><p>translate 移动平移的意思</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498443715586.png\" alt=\"1498443715586\"></p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span>px,<span class=\"token number\">50</span>px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>使用 translate 方法来将文字或图像在水平方向和垂直方向上分别垂直移动 50 像素。</p>\n<p>可以改变元素的位置，x、y 可为负值；</p>\n<pre><code> translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）\n translateX(x)仅水平方向移动（X轴移动）\n translateY(Y)仅垂直方向移动（Y轴移动）</code></pre>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token number\">.</span>box &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">499.9999</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">400</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50%</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50%</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>-<span class=\"token number\">50%</span>, -<span class=\"token number\">50%</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 走的自己的一半 */</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>让定位的盒子水平居中</p>\n<h3 id=\"缩放-scale-x-y\"><a href=\"#缩放-scale-x-y\" class=\"headerlink\" title=\"缩放 scale(x, y)\"></a>缩放 scale(x, y)</h3><p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498444645795.png\" alt=\"1498444645795\"></p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>可以对元素进行水平和垂直方向的缩放。该语句使用 scale 方法使该元素在水平方向上缩小了 20%，垂直方向上不缩放。</p>\n<pre><code>scale(X,Y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）\nscaleX(x)元素仅水平方向缩放（X轴缩放）\nscaleY(y)元素仅垂直方向缩放（Y轴缩放）</code></pre>\n<p>scale()的取值默认的值为 1，当值设置为 0.01 到 0.99 之间的任何值，作用使一个元素缩小；而任何大于或等于 1.01 的值，作用是让元素放大</p>\n<h3 id=\"旋转-rotate-deg\"><a href=\"#旋转-rotate-deg\" class=\"headerlink\" title=\"旋转 rotate(deg)\"></a>旋转 rotate(deg)</h3><p>可以对元素进行旋转，正值为顺时针，负值为逆时针；</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498443651293.png\" alt=\"1498443651293\"></p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>注意单位是 deg 度数</p>\n<h3 id=\"transform-origin-可以调整元素转换变形的原点\"><a href=\"#transform-origin-可以调整元素转换变形的原点\" class=\"headerlink\" title=\"transform-origin 可以调整元素转换变形的原点\"></a>transform-origin 可以调整元素转换变形的原点</h3><p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498443912530.png\" alt=\"1498443912530\"></p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\">div &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> left top<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 改变元素原点到左上角，然后进行顺时旋转45度 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果是 4 个角，可以用 left top 这些，如果想要精确的位置， 可以用 px 像素。</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\">div &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>px <span class=\"token number\">10</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 改变元素原点到x 为10  y 为10，然后进行顺时旋转45度 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>案例旋转楚乔传</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\">div &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">250</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">170</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>px solid pink<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\ndiv img &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100%</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100%</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> all <span class=\"token number\">0.6</span>s<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> top right<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">div</span><span class=\"token punctuation\">:</span>hover <span class=\"token property\">img</span><span class=\"token punctuation\">:</span><span class=\"token function\">nth-child</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">/* 鼠标经过div  第一张图片旋转 */</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">div</span><span class=\"token punctuation\">:</span>hover <span class=\"token property\">img</span><span class=\"token punctuation\">:</span><span class=\"token function\">nth-child</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">120</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">div</span><span class=\"token punctuation\">:</span>hover <span class=\"token property\">img</span><span class=\"token punctuation\">:</span><span class=\"token function\">nth-child</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">180</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">div</span><span class=\"token punctuation\">:</span>hover <span class=\"token property\">img</span><span class=\"token punctuation\">:</span><span class=\"token function\">nth-child</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">240</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">div</span><span class=\"token punctuation\">:</span>hover <span class=\"token property\">img</span><span class=\"token punctuation\">:</span><span class=\"token function\">nth-child</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">div</span><span class=\"token punctuation\">:</span>hover <span class=\"token property\">img</span><span class=\"token punctuation\">:</span><span class=\"token function\">nth-child</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">360</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"倾斜-skew-deg-deg\"><a href=\"#倾斜-skew-deg-deg\" class=\"headerlink\" title=\"倾斜 skew(deg, deg)\"></a>倾斜 skew(deg, deg)</h3><p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498443827389.png\" alt=\"1498443827389\"></p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">skew</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span>deg, <span class=\"token number\">0</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>该实例通过 skew 方法把元素水平方向上倾斜 30 度，处置方向保持不变。</p>\n<p>可以使元素按一定的角度进行倾斜，可为负值，第二个参数不写默认为 0。</p>\n<h2 id=\"3D-变形-CSS3-transform\"><a href=\"#3D-变形-CSS3-transform\" class=\"headerlink\" title=\"3D 变形(CSS3) transform\"></a>3D 变形(CSS3) transform</h2><p>2d x y</p>\n<p>3d x y z</p>\n<p>左手坐标系</p>\n<p>伸出左手，让拇指和食指成“L”形，大拇指向右，食指向上，中指指向前方。这样我们就建立了一个左手坐标系，拇指、食指和中指分别代表 X、Y、Z 轴的正方向。如下图</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498445587576.png\" alt=\"1498445587576\"></p>\n<p>CSS3 中的 3D 坐标系与上述的 3D 坐标系是有一定区别的，相当于其绕着 X 轴旋转了 180 度，如下图</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498459001951.png\" alt=\"1498459001951\"></p>\n<p>简单记住他们的坐标：</p>\n<p>x 左边是负的，右边是正的</p>\n<p>y 上面是负的， 下面是正的</p>\n<p>z 里面是负的， 外面是正的</p>\n<h3 id=\"rotateX\"><a href=\"#rotateX\" class=\"headerlink\" title=\"rotateX()\"></a>rotateX()</h3><p>就是沿着 x 立体旋转.</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498445756802.png\" alt=\"1498445756802\"></p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\">img &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> all <span class=\"token number\">0.5</span>s ease <span class=\"token number\">0</span>s<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">img</span><span class=\"token punctuation\">:</span>hove &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotateX</span><span class=\"token punctuation\">(</span><span class=\"token number\">180</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"rotateY\"><a href=\"#rotateY\" class=\"headerlink\" title=\"rotateY()\"></a>rotateY()</h3><p>沿着 y 轴进行旋转</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498446043198.png\" alt=\"1498446043198\"></p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\">img &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> all <span class=\"token number\">0.5</span>s ease <span class=\"token number\">0</span>s<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">img</span><span class=\"token punctuation\">:</span>hove &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotateX</span><span class=\"token punctuation\">(</span><span class=\"token number\">180</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"rotateZ-\"><a href=\"#rotateZ-\" class=\"headerlink\" title=\"rotateZ()\"></a>rotateZ()</h3><p>沿着 z 轴进行旋转</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\">img &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> all <span class=\"token number\">0.25</span>s ease-in <span class=\"token number\">0</span>s<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">img</span><span class=\"token punctuation\">:</span>hover &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">/* transform:rotateX(180deg); */</span>\n  <span class=\"token comment\" spellcheck=\"true\">/* transform:rotateY(180deg); */</span>\n  <span class=\"token comment\" spellcheck=\"true\">/* transform:rotateZ(180deg); */</span>\n  <span class=\"token comment\" spellcheck=\"true\">/* transform:rotateX(45deg) rotateY(180deg) rotateZ(90deg) skew(0,10deg); */</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"透视-perspective\"><a href=\"#透视-perspective\" class=\"headerlink\" title=\"透视(perspective)\"></a>透视(perspective)</h3><p>电脑显示屏是一个 2D 平面，图像之所以具有立体感（3D 效果），其实只是一种视觉呈现，通过透视可以实现此目的。</p>\n<p>透视可以将一个 2D 平面，在转换的过程当中，呈现 3D 效果。</p>\n<ul>\n<li>透视原理： 近大远小 。</li>\n<li>浏览器透视：把近大远小的所有图像，透视在屏幕上。</li>\n<li>perspective：视距，表示视点距离屏幕的长短。视点，用于模拟透视效果时人眼的位置</li>\n</ul>\n<p>注：并非任何情况下需要透视效果，根据开发需要进行设置。</p>\n<p>perspective 一般作为一个属性，设置给父元素，作用于所有 3D 转换的子元素</p>\n<p>理解透视距离原理：</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498446715314.png\" alt=\"1498446715314\"></p>\n<h3 id=\"translateX-x\"><a href=\"#translateX-x\" class=\"headerlink\" title=\"translateX(x)\"></a>translateX(x)</h3><p>仅水平方向移动**（X 轴移动）</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498459697576.png\" alt=\"1498459697576\"></p>\n<p>主要目的实现移动效果</p>\n<h3 id=\"translateY-y\"><a href=\"#translateY-y\" class=\"headerlink\" title=\"translateY(y)\"></a>translateY(y)</h3><p>仅垂直方向移动（Y 轴移动）</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498459770252.png\" alt=\"1498459770252\"></p>\n<h3 id=\"translateZ-z\"><a href=\"#translateZ-z\" class=\"headerlink\" title=\"translateZ(z)\"></a>translateZ(z)</h3><p>transformZ 的直观表现形式就是大小变化，实质是 XY 平面相对于视点的远近变化（说远近就一定会说到离什么参照物远或近，在这里参照物就是 perspective 属性）。比如设置了 perspective 为 200px;那么 transformZ 的值越接近 200，就是离的越近，看上去也就越大，超过 200 就看不到了，因为相当于跑到后脑勺去了，我相信你正常情况下，是看不到自己的后脑勺的。</p>\n<h3 id=\"translate3d-x-y-z\"><a href=\"#translate3d-x-y-z\" class=\"headerlink\" title=\"translate3d(x,y,z)\"></a>translate3d(x,y,z)</h3><p>[注意]其中，x 和 y 可以是长度值，也可以是百分比，百分比是相对于其本身元素水平方向的宽度和垂直方向的高度和；z 只能设置长度值</p>\n<h3 id=\"开门案例\"><a href=\"#开门案例\" class=\"headerlink\" title=\"开门案例\"></a>开门案例</h3><pre class=\"line-numbers language-css\"><code class=\"language-css\">body &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">.</span>door &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">300</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">300</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>px solid gray<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">perspective</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('images/dog.gif')</span> no-repeat cover<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">.</span>door > div &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>px solid black<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">.</span>left &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50%</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100%</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> brown<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> left center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>s<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">.</span><span class=\"token property\">left</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>before &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50%</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50%</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateY</span><span class=\"token punctuation\">(</span>-<span class=\"token number\">10</span>px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>px solid whitesmoke<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">.</span>right &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50%</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100%</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> brown<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> right center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>s<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">.</span><span class=\"token property\">right</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>before &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50%</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50%</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateY</span><span class=\"token punctuation\">(</span>-<span class=\"token number\">10</span>px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>px solid whitesmoke<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">.</span><span class=\"token property\">door</span><span class=\"token punctuation\">:</span>hover <span class=\"token number\">.</span>left &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotateY</span><span class=\"token punctuation\">(</span>-<span class=\"token number\">130</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">.</span><span class=\"token property\">door</span><span class=\"token punctuation\">:</span>hover <span class=\"token number\">.</span>right &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotateY</span><span class=\"token punctuation\">(</span><span class=\"token number\">130</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"backface-visibility\"><a href=\"#backface-visibility\" class=\"headerlink\" title=\"backface-visibility\"></a>backface-visibility</h3><p>backface-visibility 属性定义当元素不面向屏幕时是否可见。</p>\n<h3 id=\"翻转盒子案例\"><a href=\"#翻转盒子案例\" class=\"headerlink\" title=\"翻转盒子案例\"></a>翻转盒子案例</h3><pre class=\"line-numbers language-css\"><code class=\"language-css\">div &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">224</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">224</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\ndiv img &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> all <span class=\"token number\">1</span>s<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\ndiv <span class=\"token property\">img</span><span class=\"token punctuation\">:</span>first-child &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">backface-visibility</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 不是正面对象屏幕，就隐藏 */</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">div</span><span class=\"token punctuation\">:</span>hover img &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotateY</span><span class=\"token punctuation\">(</span><span class=\"token number\">180</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"动画-CSS3-animation\"><a href=\"#动画-CSS3-animation\" class=\"headerlink\" title=\"动画(CSS3) animation\"></a>动画(CSS3) animation</h2><p>动画是 CSS3 中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。</p>\n<p>语法格式：</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> 动画名称 动画时间 运动曲线 何时开始 播放次数 是否反方向<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498461096243.png\" alt=\"1498461096243\"></p>\n<p>关于几个值，除了名字，动画时间，延时有严格顺序要求其它随意 r</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> 动画名称 &amp;#123<span class=\"token punctuation\">;</span></span>\n  from&amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span> 开始位置 &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>  <span class=\"token number\">0%</span>\n  to&amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>  结束  &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>  <span class=\"token number\">100%</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<pre><code>animation-iteration-count:infinite;  无限循环播放\nanimation-play-state:paused;   暂停动画&quot;</code></pre>\n<h3 id=\"小汽车案例\"><a href=\"#小汽车案例\" class=\"headerlink\" title=\"小汽车案例\"></a>小汽车案例</h3><pre class=\"line-numbers language-css\"><code class=\"language-css\">body &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\nimg &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">.</span>animation &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation-name</span><span class=\"token punctuation\">:</span> goback<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation-duration</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>s<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation-timing-function</span><span class=\"token punctuation\">:</span> ease<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation-iteration-count</span><span class=\"token punctuation\">:</span> infinite<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> goback &amp;#123<span class=\"token punctuation\">;</span></span>\n  <span class=\"token number\">0%</span> &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n  <span class=\"token number\">49%</span> &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span>px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n  <span class=\"token number\">55%</span> &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span>px<span class=\"token punctuation\">)</span> <span class=\"token function\">rotateY</span><span class=\"token punctuation\">(</span><span class=\"token number\">180</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n  <span class=\"token number\">95%</span> &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">rotateY</span><span class=\"token punctuation\">(</span><span class=\"token number\">180</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n  <span class=\"token number\">100%</span> &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">rotateY</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"伸缩布局-CSS3\"><a href=\"#伸缩布局-CSS3\" class=\"headerlink\" title=\"伸缩布局(CSS3)\"></a>伸缩布局(CSS3)</h2><p>CSS3 在布局方面做了非常大的改进，使得我们对块级元素的布局排列变得十分灵活，适应性非常强，其强大的伸缩性，在响应式开中可以发挥极大的作用。</p>\n<p>主轴：Flex 容器的主轴主要用来配置 Flex 项目，默认是水平方向</p>\n<p>侧轴：与主轴垂直的轴称作侧轴，默认是垂直方向的</p>\n<p>方向：默认主轴从左向右，侧轴默认从上到下</p>\n<p>主轴和侧轴并不是固定不变的，通过 flex-direction 可以互换。</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498441839910.png\" alt=\"1498441839910\"></p>\n<p>Flex 布局的语法规范经过几年发生了很大的变化，也给 Flexbox 的使用带来一定的局限性，因为语法规范版本众多，浏览器支持不一致，致使 Flexbox 布局使用不多</p>\n<p><strong>2、各属性详解****</strong></p>\n<p>1.flex 子项目在主轴的缩放比例，不指定 flex 属性，则不参与伸缩分配</p>\n<p>min-width 最小值 min-width: 280px 最小宽度 不能小于 280</p>\n<p>max-width: 1280px 最大宽度 不能大于 1280</p>\n<p>2.flex-direction 调整主轴方向（默认为水平方向）</p>\n<p>flex-direction: column 垂直排列</p>\n<p>flex-direction: row 水平排列</p>\n<p><a href=\"http://m.ctrip.com/html5/\">http://m.ctrip.com/html5/</a> 携程网手机端地址</p>\n<p>3、justify-content 调整主轴对齐（水平对齐）</p>\n<p>子盒子如何在父盒子里面水平对齐</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n<th>白话文</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>flex-start</td>\n<td>默认值。项目位于容器的开头。</td>\n<td>让子元素从父容器的开头开始排序但是盒子顺序不变</td>\n</tr>\n<tr>\n<td>flex-end</td>\n<td>项目位于容器的结尾。</td>\n<td>让子元素从父容器的后面开始排序但是盒子顺序不变</td>\n</tr>\n<tr>\n<td>center</td>\n<td>项目位于容器的中心。</td>\n<td>让子元素在父容器中间显示</td>\n</tr>\n<tr>\n<td>space-between</td>\n<td>项目位于各行之间留有空白的容器内。</td>\n<td>左右的盒子贴近父盒子，中间的平均分布空白间距</td>\n</tr>\n<tr>\n<td>space-around</td>\n<td>项目位于各行之前、之间、之后都留有空白的容器内。</td>\n<td>相当于给每个盒子添加了左右 margin 外边距</td>\n</tr>\n</tbody></table>\n<p>4、align-items 调整侧轴对齐（垂直对齐）</p>\n<p>子盒子如何在父盒子里面垂直对齐（单行）</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n<th>白话文</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>stretch</td>\n<td>默认值。项目被拉伸以适应容器。</td>\n<td>让子元素的高度拉伸适用父容器（子元素不给高度的前提下)</td>\n</tr>\n<tr>\n<td>center</td>\n<td>项目位于容器的中心。</td>\n<td>垂直居中</td>\n</tr>\n<tr>\n<td>flex-start</td>\n<td>项目位于容器的开头。</td>\n<td>垂直对齐开始位置 上对齐</td>\n</tr>\n<tr>\n<td>flex-end</td>\n<td>项目位于容器的结尾。</td>\n<td>垂直对齐结束位置 底对齐</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>5、flex-wrap 控制是否换行</p>\n<p>当我们子盒子内容宽度多于父盒子的时候如何处理</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>nowrap</td>\n<td>默认值。规定灵活的项目不拆行或不拆列。 不换行，则 收缩（压缩） 显示 强制一行内显示</td>\n</tr>\n<tr>\n<td>wrap</td>\n<td>规定灵活的项目在必要的时候拆行或拆列。</td>\n</tr>\n<tr>\n<td>wrap-reverse</td>\n<td>规定灵活的项目在必要的时候拆行或拆列，但是以相反的顺序。</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>6、flex-flow 是 flex-direction、flex-wrap 的简写形式</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">flex-flow</span><span class=\"token punctuation\">:</span> flex-direction flex-wrap<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>白话记： flex-flow: 排列方向 换不换行;</p>\n<p>两个中间用空格</p>\n<p>例如：</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/* flex-direction: row;\nflex-wrap: wrap;   这两句话等价于下面的这句话*/</span>\n<span class=\"token property\">flex-flow</span><span class=\"token punctuation\">:</span> column wrap<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 两者的综合 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>7、align-content 堆栈（由 flex-wrap 产生的独立行）多行垂直对齐方式齐</p>\n<p>align-content 是针对 flex 容器里面多轴(多行)的情况,align-items 是针对一行的情况进行排列。</p>\n<p>必须对父元素设置自由盒属性 display:flex;，并且设置排列方式为横向排列 flex-direction:row;并且设置换行，flex-wrap:wrap;这样这个属性的设置才会起作用。</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n<th>测试</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>stretch</td>\n<td>默认值。项目被拉伸以适应容器。</td>\n<td></td>\n</tr>\n<tr>\n<td>center</td>\n<td>项目位于容器的中心。</td>\n<td></td>\n</tr>\n<tr>\n<td>flex-start</td>\n<td>项目位于容器的开头。</td>\n<td></td>\n</tr>\n<tr>\n<td>flex-end</td>\n<td>项目位于容器的结尾。</td>\n<td></td>\n</tr>\n<tr>\n<td>space-between</td>\n<td>项目位于各行之间留有空白的容器内。</td>\n<td></td>\n</tr>\n<tr>\n<td>space-around</td>\n<td>项目位于各行之前、之间、之后都留有空白的容器内。</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>8、order 控制子项目的排列顺序，正序方式排序，从小到大</p>\n<p>用 css 来控制盒子的前后顺序。 用 order 就可以</p>\n<p>用整数值来定义排列顺序，数值小的排在前面。可以为负值。 默认值是 0</p>\n<pre class=\"line-numbers language-css\"><code class=\"language-css\"><span class=\"token property\">order</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此知识点重在理解，要明确找出主轴、侧轴、方向，各属性对应的属性值</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<hr>\n<h1 id=\"课程目标\"><a href=\"#课程目标\" class=\"headerlink\" title=\"课程目标:\"></a>课程目标:</h1><blockquote>\n<ol>\n<li>学会使用 CSS 选择器</li>\n<li>熟记 CSS 样式和外观属性</li>\n<li>熟练掌握 CSS 各种选择器</li>\n<li>熟练掌握 CSS 各种选择器</li>\n<li>熟练掌握 CSS 三种显示模式</li>\n<li>熟练掌握 CSS 背景属性</li>\n<li>熟练掌握 CSS 三大特性</li>\n<li>熟练掌握 CSS 盒子模型</li>\n<li>熟练掌握 CSS 浮动 10.熟练掌握 CSS 定位 11.熟练掌握 CSS 高级技巧强化 CSS</li>\n</ol>\n</blockquote>\n<hr>\n<h1 id=\"CSS-的发展历程\"><a href=\"#CSS-的发展历程\" class=\"headerlink\" title=\"CSS 的发展历程\"></a>CSS 的发展历程</h1><p>从 HTML 被发明开始，样式就以各种形式存在。不同的浏览器结合它们各自的样式语言为用户提供页面效果的控制。最初的 HTML 只包含很少的显示属性。<br>随着 HTML 的成长，为了满足页面设计者的要求，HTML 添加了很多显示功能。但是随着这些功能的增加，HTML 变的越来越杂乱，而且 HTML 页面也越来越臃肿。于是 CSS 便诞生了。</p>\n<h1 id=\"CSS-网页的美容师\"><a href=\"#CSS-网页的美容师\" class=\"headerlink\" title=\"CSS 网页的美容师\"></a>CSS 网页的美容师</h1><p>CSS 的出现，拯救了混乱的 HTML，当让更加拯救了我们 web 开发者。 让我们的网页更加丰富多彩。</p>\n<p>CSS 的最大贡献就是： 让 HTML 从样式中解脱苦海， 实现了 HTML 专注去做 结构呈现。 而样式交给 CSS 后，你完全可以放心的早点洗洗睡了！</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/x.jpg\" width=\"250\" />\n\n<p>而且。。。。。 CSS 做的很出色，如果 JavaScript 是网页的魔法师，那么 CSS 它是我们网页的美容师，不信，你看:</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/baby.jpeg\" />\n\n<p>ps: 你跟 Angelababy 只差了一个妆容的距离</p>\n<p>来个更直观的认识吧：</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/db.png\" />\n\n<p>有人说， 没有不漂亮的女人，只有不会打扮的女人。</p>\n<p>我想说， 没有不好看的网页，只有不会 CSS 的前端。</p>\n<p>网页添加 CSS 和不添加 CSS 的对比：</p>\n<p>带有 CSS 的页面</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/Cc.png\" />\n\n<p>没有 CSS 的页面</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/fff.png\" />\n\n<h1 id=\"CSS-初识\"><a href=\"#CSS-初识\" class=\"headerlink\" title=\"CSS 初识\"></a>CSS 初识</h1><p>CSS(Cascading Style Sheets)</p>\n<p>CSS 通常称为 CSS 样式表或层叠样式表（级联样式表），主要用于设置 HTML 页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。</p>\n<p>CSS 以 HTML 为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。</p>\n<h1 id=\"CSS-样式规则\"><a href=\"#CSS-样式规则\" class=\"headerlink\" title=\"CSS 样式规则\"></a>CSS 样式规则</h1><p>使用 HTML 时，需要遵从一定的规范。CSS 亦如此，要想熟练地使用 CSS 对网页进行修饰，首先需要了解 CSS 样式规则，具体格式如下：</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/gz.png\" />\n\n<pre><code>在上面的样式规则中:\n\n1.选择器用于指定CSS样式作用的HTML对象，花括号内是对该对象设置的具体样式。\n2.属性和属性值以“键值对”的形式出现。\n3.属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。\n4.属性和属性值之间用英文“:”连接。\n5.多个“键值对”之间用英文“;”进行区分。\n可以用段落 和 表格的对齐的演示。</code></pre>\n<h1 id=\"CSS-字体样式属性\"><a href=\"#CSS-字体样式属性\" class=\"headerlink\" title=\"CSS 字体样式属性\"></a>CSS 字体样式属性</h1><h2 id=\"font-size-字号大小\"><a href=\"#font-size-字号大小\" class=\"headerlink\" title=\"font-size:字号大小\"></a>font-size:字号大小</h2><p>font-size 属性用于设置字号，该属性的值可以使用相对长度单位，也可以使用绝对长度单位。其中，相对长度单位比较常用，推荐使用像素单位 px，绝对长度单位使用较少。具体如下：</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/dd.png\" />\n\n<h2 id=\"font-family-字体\"><a href=\"#font-family-字体\" class=\"headerlink\" title=\"font-family:字体\"></a>font-family:字体</h2><p>font-family 属性用于设置字体。网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑，可以使用如下 CSS 样式代码：</p>\n<p>p{ font-family:”微软雅黑”;}</p>\n<p>可以同时指定多个字体，中间以逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体。</p>\n<blockquote>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/good.png\" />常用技巧：</p>\n</blockquote>\n<pre><code>1. 现在网页中普遍使用14px+。\n2. 尽量使用偶数的数字字号。ie6等老式浏览器支持奇数会有bug。\n3. 各种字体之间必须使用英文状态下的逗号隔开。\n4. 中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。\n5. 如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: &quot;Times New Roman&quot;;。\n6. 尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。</code></pre>\n<h2 id=\"CSS-Unicode-字体\"><a href=\"#CSS-Unicode-字体\" class=\"headerlink\" title=\"CSS Unicode 字体\"></a>CSS Unicode 字体</h2><p>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。xp 系统不支持 类似微软雅黑的中文。</p>\n<p>方案一： 你可以使用英文来替代。 比如 font-family:”Microsoft Yahei”。</p>\n<p>方案二： 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。<br>font-family: “\\5FAE\\8F6F\\96C5\\9ED1”，表示设置字体为“微软雅黑”。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/shs.png\" />\n\n<p>可以通过 escape() 来测试属于什么字体。</p>\n<table>\n<thead>\n<tr>\n<th>字体名称</th>\n<th>英文名称</th>\n<th>Unicode 编码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>宋体</td>\n<td>SimSun</td>\n<td>\\5B8B\\4F53</td>\n</tr>\n<tr>\n<td>新宋体</td>\n<td>NSimSun</td>\n<td>\\65B0\\5B8B\\4F53</td>\n</tr>\n<tr>\n<td>黑体</td>\n<td>SimHei</td>\n<td>\\9ED1\\4F53</td>\n</tr>\n<tr>\n<td>微软雅黑</td>\n<td>Microsoft YaHei</td>\n<td>\\5FAE\\8F6F\\96C5\\9ED1</td>\n</tr>\n<tr>\n<td>楷体_GB2312</td>\n<td>KaiTi_GB2312</td>\n<td>\\6977\\4F53_GB2312</td>\n</tr>\n<tr>\n<td>隶书</td>\n<td>LiSu</td>\n<td>\\96B6\\4E66</td>\n</tr>\n<tr>\n<td>幼园</td>\n<td>YouYuan</td>\n<td>\\5E7C\\5706</td>\n</tr>\n<tr>\n<td>华文细黑</td>\n<td>STXihei</td>\n<td>\\534E\\6587\\7EC6\\9ED1</td>\n</tr>\n<tr>\n<td>细明体</td>\n<td>MingLiU</td>\n<td>\\7EC6\\660E\\4F53</td>\n</tr>\n<tr>\n<td>新细明体</td>\n<td>PMingLiU</td>\n<td>\\65B0\\7EC6\\660E\\4F53</td>\n</tr>\n</tbody></table>\n<p>为了照顾不同电脑的字体安装问题，我们尽量只使用宋体和微软雅黑中文字体</p>\n<h2 id=\"font-weight-字体粗细\"><a href=\"#font-weight-字体粗细\" class=\"headerlink\" title=\"font-weight:字体粗细\"></a>font-weight:字体粗细</h2><p>字体加粗除了用 b 和 strong 标签之外，可以使用 CSS 来实现，但是 CSS 是没有语义的。</p>\n<pre><code class=\"html\">font-weight属性用于定义字体的粗细，其可用属性值：normal、bold、bolder、lighter、100~900（100的整数倍）。</code></pre>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/good.png\" />小技巧：</p>\n<pre><code class=\"css\">数字 400 等价于 normal，而 700 等价于 bold。  但是我们更喜欢用数字来表示。</code></pre>\n<h2 id=\"font-style-字体风格\"><a href=\"#font-style-字体风格\" class=\"headerlink\" title=\"font-style:字体风格\"></a>font-style:字体风格</h2><p>字体倾斜除了用 i 和 em 标签之外，可以使用 CSS 来实现，但是 CSS 是没有语义的。</p>\n<p>font-style 属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：</p>\n<p>normal：默认值，浏览器会显示标准的字体样式。</p>\n<p>italic：浏览器会显示斜体的字体样式。</p>\n<p>oblique：浏览器会显示倾斜的字体样式。</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/good.png\" />小技巧：</p>\n<pre><code>平时我们很少给文字加斜体，反而喜欢给斜体标签（em，i）改为普通模式。</code></pre>\n<h2 id=\"font-综合设置字体样式-重点\"><a href=\"#font-综合设置字体样式-重点\" class=\"headerlink\" title=\"font:综合设置字体样式 (重点)\"></a>font:综合设置字体样式 (重点)</h2><p>font 属性用于对字体样式进行综合设置，其基本语法格式如下：</p>\n<pre><code class=\"css\">选择器 &amp;#123;\n  font: font-style font-weight font-size/line-height font-family;\n&amp;#125;</code></pre>\n<pre><code>使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开。\n\n注意：其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。\n</code></pre>\n<h1 id=\"开发者工具（chrome）\"><a href=\"#开发者工具（chrome）\" class=\"headerlink\" title=\"开发者工具（chrome）\"></a>开发者工具（chrome）</h1><p>此工具是我们的必备工具，以后代码出了问题，我们首先第一反应就是：</p>\n<p>“按 F12”或者是 “shift+ctrl+i” 打开 开发者工具。</p>\n<p>菜单： 右击网页空白出—查看</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/chrome.png\" />\n\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/good.png\" />小技巧：</p>\n<ol>\n<li>ctrl+滚轮 可以 放大开发者工具代码大小。</li>\n<li>左边是 HTML 元素结构 右边是 CSS 样式。</li>\n<li>右边 CSS 样式可以改动数值和颜色查看更改后效果。</li>\n</ol>\n<h1 id=\"选择器（重点）\"><a href=\"#选择器（重点）\" class=\"headerlink\" title=\"选择器（重点）\"></a>选择器（重点）</h1><p>要想将 CSS 样式应用于特定的 HTML 元素，首先需要找到该目标元素。在 CSS 中，执行这一任务的样式规则部分被称为选择器（选择符）。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/ax.png\" />\n\n<p>如上图所以，要把里面的小黄人分为 2 组，最快的方法怎办？</p>\n<p>很多， 比如 一只眼睛的一组，剩下的一组</p>\n<p>这就用到基础选择器组：</p>\n<h2 id=\"标签选择器（元素选择器）\"><a href=\"#标签选择器（元素选择器）\" class=\"headerlink\" title=\"标签选择器（元素选择器）\"></a>标签选择器（元素选择器）</h2><p>标签选择器是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。其基本语法格式如下：</p>\n<pre><code>标签名&amp;#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &amp;#125;  或者\n元素名&amp;#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &amp;#125;</code></pre>\n<p>标签选择器最大的优点是能快速为页面中同类型的标签统一样式，同时这也是他的缺点，不能设计差异化样式。</p>\n<p>课堂案例：</p>\n<p>传智简介</p>\n<h2 id=\"类选择器\"><a href=\"#类选择器\" class=\"headerlink\" title=\"类选择器\"></a>类选择器</h2><p>类选择器使用“.”（英文点号）进行标识，后面紧跟类名，其基本语法格式如下：</p>\n<pre><code>.类名&amp;#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &amp;#125;</code></pre>\n<pre><code> 标签调用的时候用 class=“类名”  即可。</code></pre>\n<p>类选择器最大的优势是可以为元素对象定义单独或相同的样式。</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/good.png\" />小技巧：</p>\n<pre><code>1.长名称或词组可以使用中横线来为选择器命名。\n2.不建议使用“_”下划线来命名CSS选择器。</code></pre>\n<p>​ 输入的时候少按一个 shift 键;<br>　浏览器兼容问题 (比如使用<em>tips 的选择器命名，在 IE6 是无效的)<br>　能良好区分 JavaScript 变量命名(JS 变量命名是用“</em>”)</p>\n<pre><code>3.不要纯数字、中文等命名， 尽量使用英文字母来表示。</code></pre>\n<p>猜谜底游戏：</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/midi.png\" width=\"450\" /> 你猜？</p>\n<p>命名规范： 见附件（Web 前端开发规范手册.doc）</p>\n<p>命名是我们通俗约定的，但是没有规定必须用这些常用的命名。</p>\n<p>课堂案例：</p>\n <img src=\"https://zclzone.gitee.io/resource/image/blog/media/go.png\" />\n\n<pre><code class=\"html\">&lt;head&gt;\n  &lt;meta charset=&quot;utf-8&quot; /&gt;\n  &lt;style&gt;\n    span &amp;#123;\n      font-size: 100px;\n    &amp;#125;\n    .blue &amp;#123;\n      color: blue;\n    &amp;#125;\n    .red &amp;#123;\n      color: red;\n    &amp;#125;\n    .orange &amp;#123;\n      color: orange;\n    &amp;#125;\n    .green &amp;#123;\n      color: green;\n    &amp;#125;\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;span class=&quot;blue&quot;&gt;G&lt;/span&gt;\n  &lt;span class=&quot;red&quot;&gt;o&lt;/span&gt;\n  &lt;span class=&quot;orange&quot;&gt;o&lt;/span&gt;\n  &lt;span class=&quot;blue&quot;&gt;g&lt;/span&gt;\n  &lt;span class=&quot;green&quot;&gt;l&lt;/span&gt;\n  &lt;span class=&quot;red&quot;&gt;e&lt;/span&gt;\n&lt;/body&gt;</code></pre>\n<h2 id=\"多类名选择器\"><a href=\"#多类名选择器\" class=\"headerlink\" title=\"多类名选择器\"></a>多类名选择器</h2><p>我们可以给标签指定多个类名，从而达到更多的选择目的。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/lei.png\" />\n\n<p>注意：</p>\n<pre><code>1. 样式显示效果跟HTML元素中的类名先后顺序没有关系,受CSS样式书写的上下顺序有关。\n2. 各个类名中间用空格隔开。</code></pre>\n<p>多类名选择器在后期布局比较复杂的情况下，还是较多使用的。</p>\n<pre><code class=\"html\">&lt;div class=&quot;pink fontWeight font20&quot;&gt;亚瑟&lt;/div&gt;\n&lt;div class=&quot;font20&quot;&gt;刘备&lt;/div&gt;\n&lt;div class=&quot;font14 pink&quot;&gt;安其拉&lt;/div&gt;\n&lt;div class=&quot;font14&quot;&gt;貂蝉&lt;/div&gt;</code></pre>\n<h2 id=\"id-选择器\"><a href=\"#id-选择器\" class=\"headerlink\" title=\"id 选择器\"></a>id 选择器</h2><p>id 选择器使用“#”进行标识，后面紧跟 id 名，其基本语法格式如下：</p>\n<pre><code>#id名&amp;#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &amp;#125;</code></pre>\n<p>该语法中，id 名即为 HTML 元素的 id 属性值，大多数 HTML 元素都可以定义 id 属性，元素的 id 值是唯一的，只能对应于文档中某一个具体的元素。</p>\n<p>用法基本和类选择器相同。</p>\n<h2 id=\"id-选择器和类选择器区别\"><a href=\"#id-选择器和类选择器区别\" class=\"headerlink\" title=\"id 选择器和类选择器区别\"></a>id 选择器和类选择器区别</h2><p>W3C 标准规定，在同一个页面内，不允许有相同名字的 id 对象出现，但是允许相同名字的 class。</p>\n<p>类选择器（class） 好比人的名字， 是可以多次重复使用的， 比如 张伟 王伟 李伟 李娜</p>\n<p>id 选择器 好比人的身份证号码， 全中国是唯一的， 不得重复。 只能使用一次。</p>\n<p><strong><em>id 选择器和类选择器最大的不同在于 使用次数上。</em></strong></p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/zfb.jpg\" />\n\n<h2 id=\"通配符选择器\"><a href=\"#通配符选择器\" class=\"headerlink\" title=\"通配符选择器\"></a>通配符选择器</h2><p>通配符选择器用“*”号表示，他是所有选择器中作用范围最广的，能匹配页面中所有的元素。其基本语法格式如下：</p>\n<pre><code>* &amp;#123; 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &amp;#125;</code></pre>\n<p>例如下面的代码，使用通配符选择器定义 CSS 样式，清除所有 HTML 标记的默认边距。</p>\n<pre><code class=\"css\">* &amp;#123;\n  margin: 0; /* 定义外边距*/\n  padding: 0; /* 定义内边距*/\n&amp;#125;</code></pre>\n<p>注意：</p>\n<p>这个通配符选择器，就像我们的电影明星中的梦中情人， 想想它就好了，但是它不会和你过日子。</p>\n<h2 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h2><p>伪类选择器用于向某些选择器添加特殊的效果。比如给链接添加特殊效果， 比如可以选择 第 1 个，第 n 个元素。</p>\n<pre><code class=\"css\">为了和我们刚才学的类选择器相区别， 类选择器是一个点 比如 .demo &amp;#123;\n&amp;#125;\n而我们的伪类 用 2个点 就是 冒号 比如 :link &amp;#123;\n&amp;#125;</code></pre>\n<h3 id=\"链接伪类选择器\"><a href=\"#链接伪类选择器\" class=\"headerlink\" title=\"链接伪类选择器\"></a>链接伪类选择器</h3><ul>\n<li>:link /_ 未访问的链接 _/</li>\n<li>:visited /_ 已访问的链接 _/</li>\n<li>:hover /_ 鼠标移动到链接上 _/</li>\n<li>:active /_ 选定的链接 _/</li>\n</ul>\n<p>注意写的时候，他们的顺序尽量不要颠倒 按照 lvha 的顺序。 love hate 爱上了讨厌 记忆法 或者 lv 包包 非常 hao</p>\n<pre><code class=\"css\">a &amp;#123;\n  /* a是标签选择器  所有的链接 */\n  font-weight: 700;\n  font-size: 16px;\n  color: gray;\n&amp;#125;\na:hover &amp;#123;\n  /* :hover 是链接伪类选择器 鼠标经过 */\n  color: red; /*  鼠标经过的时候，由原来的 灰色 变成了红色 */\n&amp;#125;</code></pre>\n<h3 id=\"结构-位置-伪类选择器（CSS3\"><a href=\"#结构-位置-伪类选择器（CSS3\" class=\"headerlink\" title=\"结构(位置)伪类选择器（CSS3)\"></a>结构(位置)伪类选择器（CSS3)</h3><ul>\n<li>:first-child :选取属于其父元素的首个子元素的指定选择器</li>\n<li>:last-child :选取属于其父元素的最后一个子元素的指定选择器</li>\n<li>:nth-child(n) ： 匹配属于其父元素的第 N 个子元素，不论元素的类型</li>\n<li>:nth-last-child(n) ：选择器匹配属于其元素的第 N 个子元素的每个元素，不论元素的类型，从最后一个子元素开始计数。<br>n 可以是数字、关键词或公式</li>\n<li>​</li>\n</ul>\n<pre><code class=\"css\">li:first-child &amp;#123;\n  /*  选择第一个孩子 */\n  color: pink;\n&amp;#125;\nli:last-child &amp;#123;\n  /* 最后一个孩子 */\n  color: purple;\n&amp;#125;\nli:nth-child(4) &amp;#123;\n  /* 选择第4个孩子  n  代表 第几个的意思 */\n  color: skyblue;\n&amp;#125;</code></pre>\n<h3 id=\"目标伪类选择器-CSS3\"><a href=\"#目标伪类选择器-CSS3\" class=\"headerlink\" title=\"目标伪类选择器(CSS3)\"></a>目标伪类选择器(CSS3)</h3><p>:target 目标伪类选择器 :选择器可用于选取当前活动的目标元素</p>\n<pre><code class=\"css\">:target &amp;#123;\n  color: red;\n  font-size: 30px;\n&amp;#125;</code></pre>\n<h1 id=\"CSS-注释\"><a href=\"#CSS-注释\" class=\"headerlink\" title=\"CSS 注释\"></a>CSS 注释</h1><pre><code>CSS规则是使用     /*  需要注释的内容  */  进行注释的，即在需要注释的内容前使用 “/*” 标记开始注释，在内容的结尾使用 “*/”结束。</code></pre>\n<p>例如：</p>\n<pre><code class=\"css\">p &amp;#123;\n  font-size: 14px; /* 所有的字体是14像素大小*/\n&amp;#125;</code></pre>\n<h1 id=\"CSS-外观属性\"><a href=\"#CSS-外观属性\" class=\"headerlink\" title=\"CSS 外观属性\"></a>CSS 外观属性</h1><h2 id=\"color-文本颜色\"><a href=\"#color-文本颜色\" class=\"headerlink\" title=\"color:文本颜色\"></a>color:文本颜色</h2><p>color 属性用于定义文本的颜色，其取值方式有如下 3 种：</p>\n<p>1.预定义的颜色值，如 red，green，blue 等。</p>\n<p>2.十六进制，如#FF0000，#FF6600，#29D794 等。实际工作中，十六进制是最常用的定义颜色的方式。</p>\n<p>3.RGB 代码，如红色可以表示为 rgb(255,0,0)或 rgb(100%,0%,0%)。</p>\n<p>需要注意的是，如果使用 RGB 代码的百分比颜色值，取值为 0 时也不能省略百分号，必须写为 0%。</p>\n<h2 id=\"line-height-行间距\"><a href=\"#line-height-行间距\" class=\"headerlink\" title=\"line-height:行间距\"></a>line-height:行间距</h2><p>ine-height 属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。line-height 常用的属性值单位有三种，分别为像素 px，相对值 em 和百分比%，实际工作中使用最多的是像素 px</p>\n<p>一般情况下，行距比字号大 7.8 像素左右就可以了。</p>\n<h2 id=\"text-align-水平对齐方式\"><a href=\"#text-align-水平对齐方式\" class=\"headerlink\" title=\"text-align:水平对齐方式\"></a>text-align:水平对齐方式</h2><pre><code>text-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性。其可用属性值如下：</code></pre>\n<p>left：左对齐（默认值）</p>\n<p>right：右对齐</p>\n<p>center：居中对齐</p>\n<h2 id=\"text-indent-首行缩进\"><a href=\"#text-indent-首行缩进\" class=\"headerlink\" title=\"text-indent:首行缩进\"></a>text-indent:首行缩进</h2><p>text-indent 属性用于设置首行文本的缩进，其属性值可为不同单位的数值、em 字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值, 建议使用 em 作为设置单位。</p>\n<p>1em 就是一个字的宽度 如果是汉字的段落， 1em 就是一个汉字的宽度</p>\n<h2 id=\"letter-spacing-字间距\"><a href=\"#letter-spacing-字间距\" class=\"headerlink\" title=\"letter-spacing:字间距\"></a>letter-spacing:字间距</h2><p>letter-spacing 属性用于定义字间距，所谓字间距就是字符与字符之间的空白。其属性值可为不同单位的数值，允许使用负值，默认为 normal。</p>\n<h2 id=\"word-spacing-单词间距\"><a href=\"#word-spacing-单词间距\" class=\"headerlink\" title=\"word-spacing:单词间距\"></a>word-spacing:单词间距</h2><p>word-spacing 属性用于定义英文单词之间的间距，对中文字符无效。和 letter-spacing 一样，其属性值可为不同单位的数值，允许使用负值，默认为 normal。</p>\n<p>word-spacing 和 letter-spacing 均可对英文进行设置。不同的是 letter-spacing 定义的为字母之间的间距，而 word-spacing 定义的为英文单词之间的间距。</p>\n<h2 id=\"颜色半透明-css3\"><a href=\"#颜色半透明-css3\" class=\"headerlink\" title=\"颜色半透明(css3)\"></a>颜色半透明(css3)</h2><p>文字颜色到了 CSS3 我们可以采取半透明的格式了语法格式如下：</p>\n<pre><code class=\"css\">    color: rgba(r,g,b,a)  a 是alpha  透明的意思  取值范围 0~1之间    color: rgba(0,0,0,0.3)</code></pre>\n<h2 id=\"文字阴影-CSS3\"><a href=\"#文字阴影-CSS3\" class=\"headerlink\" title=\"文字阴影(CSS3)\"></a>文字阴影(CSS3)</h2><p>以后我们可以给我们的文字添加阴影效果了 Shadow 影子</p>\n<pre><code class=\"css\">text-shadow: 水平位置 垂直位置 模糊距离 阴影颜色;</code></pre>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498467502625.png\" alt=\"1498467502625\"></p>\n<ol>\n<li>前两项是必须写的。 后两项可以选写。</li>\n</ol>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498467519665.png\" alt=\"1498467519665\"></p>\n<h1 id=\"sublime-快捷方式\"><a href=\"#sublime-快捷方式\" class=\"headerlink\" title=\"sublime 快捷方式\"></a>sublime 快捷方式</h1><p>sublime 可以快速提高我们代码的书写方式</p>\n<ol>\n<li><p>生成标签 直接输入标签名 按 tab 键即可 比如 div 然后 tab 键， 就可以生成 <div></div></p>\n</li>\n<li><p>如果想要生成多个相同标签 加上 * 就可以了 比如 div*3 就可以快速生成 3 个 div</p>\n</li>\n<li><p>如果有父子级关系的标签，可以用 &gt; 比如 ul &gt; li 就可以了</p>\n</li>\n<li><p>如果有兄弟关系的标签，用 + 就可以了 比如 div+p</p>\n</li>\n<li><p>如果生成带有类名或者 id 名字的， 直接写 .demo 或者 #two tab 键就可以了</p>\n<p>​</p>\n</li>\n</ol>\n<h1 id=\"引入-CSS-样式表（书写位置）\"><a href=\"#引入-CSS-样式表（书写位置）\" class=\"headerlink\" title=\"引入 CSS 样式表（书写位置）\"></a>引入 CSS 样式表（书写位置）</h1><p>CSS 可以写到那个位置？ 是不是一定写到 html 文件里面呢？</p>\n<h2 id=\"内部样式表\"><a href=\"#内部样式表\" class=\"headerlink\" title=\"内部样式表\"></a>内部样式表</h2><p>内嵌式是将 CSS 代码集中写在 HTML 文档的 head 头部标签中，并且用 style 标签定义，其基本语法格式如下：</p>\n<pre><code class=\"html\">&lt;head&gt;\n  &lt;style type=&quot;text/CSS&quot;&gt;\n    选择器 &amp;#123;\n      属性1: 属性值1;\n      属性2: 属性值2;\n      属性3: 属性值3;\n    &amp;#125;\n  &lt;/style&gt;\n&lt;/head&gt;</code></pre>\n<p>语法中，style 标签一般位于 head 标签中 title 标签之后，也可以把他放在 HTML 文档的任何地方。</p>\n<p>type=”text/CSS” 在 html5 中可以省略， 写上也比较符合规范， 所以这个地方可以写也可以省略。</p>\n<h2 id=\"行内式（内联样式）\"><a href=\"#行内式（内联样式）\" class=\"headerlink\" title=\"行内式（内联样式）\"></a>行内式（内联样式）</h2><p>内联样式，又有人称行内样式、行间样式、内嵌样式。是通过标签的 style 属性来设置元素的样式，其基本语法格式如下：</p>\n<pre><code class=\"html\">&lt;标签名 style=&quot;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&quot;&gt; 内容 &lt;/标签名&gt;</code></pre>\n<p>语法中 style 是标签的属性，实际上任何 HTML 标签都拥有 style 属性，用来设置行内式。其中属性和值的书写规范与 CSS 样式规则相同，行内式只对其所在的标签及嵌套在其中的子标签起作用。</p>\n<h2 id=\"外部样式表（外链式）\"><a href=\"#外部样式表（外链式）\" class=\"headerlink\" title=\"外部样式表（外链式）\"></a>外部样式表（外链式）</h2><p>链入式是将所有的样式放在一个或多个以.CSS 为扩展名的外部样式表文件中，通过 link 标签将外部样式表文件链接到 HTML 文档中，其基本语法格式如下：</p>\n<pre><code class=\"html\">&lt;head&gt;\n  &lt;link href=&quot;CSS文件的路径&quot; type=&quot;text/CSS&quot; rel=&quot;stylesheet&quot; /&gt;\n&lt;/head&gt;</code></pre>\n<p>注意： link 是个单标签哦!!!</p>\n<p>该语法中，link 标签需要放在 head 头部标签中，并且必须指定 link 标签的三个属性，具体如下：</p>\n<pre><code>href：定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。\ntype：定义所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。\nrel：定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。</code></pre>\n<h2 id=\"三种样式表总结\"><a href=\"#三种样式表总结\" class=\"headerlink\" title=\"三种样式表总结\"></a>三种样式表总结</h2><table>\n<thead>\n<tr>\n<th>样式表</th>\n<th>优点</th>\n<th>缺点</th>\n<th>使用情况</th>\n<th>控制范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>行内样式表</td>\n<td>书写方便，权重高</td>\n<td>没有实现样式和结构相分离</td>\n<td>较少</td>\n<td>控制一个标签（少）</td>\n</tr>\n<tr>\n<td>内部样式表</td>\n<td>部分结构和样式相分离</td>\n<td>没有彻底分离</td>\n<td>较多</td>\n<td>控制一个页面（中）</td>\n</tr>\n<tr>\n<td>外部样式表</td>\n<td>完全实现结构和样式相分离</td>\n<td>需要引入</td>\n<td>最多，强烈推荐</td>\n<td>控制整个站点（多）</td>\n</tr>\n</tbody></table>\n<h1 id=\"标签显示模式（display）\"><a href=\"#标签显示模式（display）\" class=\"headerlink\" title=\"标签显示模式（display）\"></a>标签显示模式（display）</h1><img src=\"https://zclzone.gitee.io/resource/image/blog/media/people.png\" />\n\n<p>非洲黑人： 皮肤内黑色素含量高，以吸收阳光中的紫外线，保护皮肤内部结构免遭损害，头发象羊毛一样卷曲，使每根卷发周围都有许多空隙，空隙充满空气，卷发有隔热作用。</p>\n<p>欧洲白人： 生活寒带或着是说常年温度较低的地缘,加上年日照时间少，身体的黑色素沉淀比较少``所以出现皮肤、发色、瞳晕都呈现浅色</p>\n<p>传智黄人： 我中间的。。。 <img src=\"https://zclzone.gitee.io/resource/image/blog/media/h.jpg\" alt=\"\" /></p>\n<p>最重要的总结： 是为了更好的适应环境而完成的自然选择。</p>\n<p>同理，我们网页的标签非常多，再不同地方会用到不同类型的标签，以便更好的完成我们的网页。</p>\n<p>标签的类型(显示模式)</p>\n<p>HTML 标签一般分为块标签和行内标签两种类型，它们也称块元素和行内元素。具体如下：</p>\n<h2 id=\"块级元素-block-level\"><a href=\"#块级元素-block-level\" class=\"headerlink\" title=\"块级元素(block-level)\"></a>块级元素(block-level)</h2><p>每个块元素通常都会独自占据一整行或多整行，可以对其设置宽度、高度、对齐等属性，常用于网页布局和网页结构的搭建。</p>\n<pre><code>常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等，其中&lt;div&gt;标签是最典型的块元素。</code></pre>\n  <img src=\"https://zclzone.gitee.io/resource/image/blog/media/xtf.jpg\" />\n\n<p>块级元素的特点：</p>\n<p>（1）总是从新行开始</p>\n<p>（2）高度，行高、外边距以及内边距都可以控制。</p>\n<p>（3）宽度默认是容器的 100%</p>\n<p>（4）可以容纳内联元素和其他块元素。</p>\n<h2 id=\"行内元素-inline-level\"><a href=\"#行内元素-inline-level\" class=\"headerlink\" title=\"行内元素(inline-level)\"></a>行内元素(inline-level)</h2><p>行内元素（内联元素）不占有独立的区域，仅仅靠自身的字体大小和图像尺寸来支撑结构，一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式。</p>\n<pre><code>常见的行内元素有&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;等，其中&lt;span&gt;标签最典型的行内元素。</code></pre>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/wf.jpg\" /> 我一样重要</p>\n<p>行内元素的特点：</p>\n<p>（1）和相邻行内元素在一行上。</p>\n<p>（2）高、宽无效，但水平方向的 padding 和 margin 可以设置，垂直方向的无效。</p>\n<p>（3）默认宽度就是它本身内容的宽度。</p>\n<p>（4）行内元素只能容纳文本或则其他行内元素。（a 特殊）</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/w.jpg\" /> 注意：</p>\n<ol>\n<li>只有 文字才 能组成段落 因此 p 里面不能放块级元素，同理还有这些标签 h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。</li>\n<li>链接里面不能再放链接。</li>\n</ol>\n<h2 id=\"块级元素和行内元素区别\"><a href=\"#块级元素和行内元素区别\" class=\"headerlink\" title=\"块级元素和行内元素区别\"></a>块级元素和行内元素区别</h2><pre><code>块级元素的特点：\n（1）总是从新行开始\n（2）高度，行高、外边距以及内边距都可以控制。\n（3）宽度默认是容器的100%\n（4）可以容纳内联元素和其他块元素。</code></pre>\n<pre><code>行内元素的特点：\n（1）和相邻行内元素在一行上。\n（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。\n（3）默认宽度就是它本身内容的宽度。\n（4）行内元素只能容纳文本或则其他行内元素。</code></pre>\n<h2 id=\"行内块元素（inline-block）\"><a href=\"#行内块元素（inline-block）\" class=\"headerlink\" title=\"行内块元素（inline-block）\"></a>行内块元素（inline-block）</h2><pre><code>在行内元素中有几个特殊的标签——&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。\n\n行内块元素的特点：\n（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。\n（2）默认宽度就是它本身内容的宽度。\n（3）高度，行高、外边距以及内边距都可以控制。</code></pre>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/lyc.jpg\" width=\"400\" />\n\n<h2 id=\"标签显示模式转换-display\"><a href=\"#标签显示模式转换-display\" class=\"headerlink\" title=\"标签显示模式转换 display\"></a>标签显示模式转换 display</h2><p>块转行内：display:inline;</p>\n<p>行内转块：display:block;</p>\n<p>块、行内元素转换为行内块： display: inline-block;</p>\n<p>此阶段，我们只需关心这三个，其他的是我们后面的工作。</p>\n<h1 id=\"CSS-复合选择器\"><a href=\"#CSS-复合选择器\" class=\"headerlink\" title=\"CSS 复合选择器\"></a>CSS 复合选择器</h1><p>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的,目的是为了可以选择更准确更精细的目标元素标签。</p>\n<h2 id=\"交集选择器\"><a href=\"#交集选择器\" class=\"headerlink\" title=\"交集选择器\"></a>交集选择器</h2><p>交集选择器由两个选择器构成，其中第一个为标签选择器，第二个为 class 选择器，两个选择器之间不能有空格，如 h3.special。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/jiao.png\" />\n\n<p><strong>记忆技巧：</strong></p>\n<p>交集选择器 是 并且的意思。 即…又…的意思</p>\n<pre><code>比如：   p.one   选择的是： 类名为 .one  的 段落标签。</code></pre>\n<p>用的相对来说比较少，不太建议使用。</p>\n<h2 id=\"并集选择器\"><a href=\"#并集选择器\" class=\"headerlink\" title=\"并集选择器\"></a>并集选择器</h2><p>并集选择器（CSS 选择器分组）是各个选择器通过<strong style=\"color:#f00\">逗号</strong>连接而成的，任何形式的选择器（包括标签选择器、class 类选择器 id 选择器等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，或部分相同，就可以利用并集选择器为它们定义相同的 CSS 样式。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/bing.png\" />\n\n<p>记忆技巧：</p>\n<p>并集选择器 和 的意思， 就是说，只要逗号隔开的，所有选择器都会执行后面样式。</p>\n<pre><code>比如  .one, p , #test &amp;#123;color: #F00;&amp;#125;  表示   .one 和 p  和 #test 这三个选择器都会执行颜色为红色。  通常用于集体声明。</code></pre>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/hu.gif\" /> 他和他，在一起， 在一起 一起的意思</p>\n<h2 id=\"后代选择器\"><a href=\"#后代选择器\" class=\"headerlink\" title=\"后代选择器\"></a>后代选择器</h2><p>后代选择器又称为包含选择器，用来选择元素或元素组的后代，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/hou.png\" />\n\n<p>子孙后代都可以这么选择。 或者说，它能选择任何包含在内 的标签。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/li.png\" />\n\n<h2 id=\"子元素选择器\"><a href=\"#子元素选择器\" class=\"headerlink\" title=\"子元素选择器\"></a>子元素选择器</h2><p>子元素选择器只能选择作为某元素子元素的元素。其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 &gt; 进行连接，注意，符号左右两侧各保留一个空格。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/zi1.png\" />\n\n<p>白话： 这里的子 指的是 亲儿子 不包含孙子 重孙子之类。</p>\n<pre><code> 比如：  .demo &gt; h3 &amp;#123;color: red;&amp;#125;   说明  h3 一定是demo 亲儿子。  demo 元素包含着h3。</code></pre>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/san.jpg\" />\n\n<h2 id=\"测试题\"><a href=\"#测试题\" class=\"headerlink\" title=\"测试题\"></a>测试题</h2><pre><code class=\"html\">&lt;div class=&quot;nav&quot;&gt;\n  &lt;!-- 主导航栏 --&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;公司首页&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;公司简介&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;公司产品&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;\n      &lt;a href=&quot;#&quot;&gt;联系我们&lt;/a&gt;\n      &lt;ul&gt;\n        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;公司邮箱&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;公司电话&lt;/a&gt;&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n&lt;div class=&quot;sitenav&quot;&gt;\n  &lt;!-- 侧导航栏 --&gt;\n  &lt;div class=&quot;site-l&quot;&gt;左侧侧导航栏&lt;/div&gt;\n  &lt;div class=&quot;site-r&quot;&gt;&lt;a href=&quot;#&quot;&gt;登录&lt;/a&gt;&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<p>在不修改以上代码的前提下，完成以下任务：</p>\n<ol>\n<li><p>链接 登录 的颜色为红色,同时主导航栏里面的所有的链接改为蓝色 (简单)</p>\n</li>\n<li><p>主导航栏和侧导航栏里面文字都是 14 像素并且是微软雅黑。（中等)</p>\n</li>\n<li><p>主导航栏里面的一级菜单链接文字颜色为绿色。（难)</p>\n<p>​</p>\n</li>\n</ol>\n<h2 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h2><p>选取标签带有某些特殊属性的选择器 我们成为属性选择器</p>\n<pre><code class=\"css\">/* 获取到 拥有 该属性的元素 */\ndiv[class^=&#39;font&#39;] &amp;#123;\n  /*  class^=font 表示 font 开始位置就行了 */\n  color: pink;\n&amp;#125;\ndiv[class$=&#39;footer&#39;] &amp;#123;\n  /*  class$=footer 表示 footer 结束位置就行了 */\n  color: skyblue;\n&amp;#125;\ndiv[class*=&#39;tao&#39;] &amp;#123;\n  /* class*=tao  *=  表示tao 在任意位置都可以 */\n  color: green;\n&amp;#125;</code></pre>\n<pre><code class=\"html\">&lt;div class=&quot;font12&quot;&gt;属性选择器&lt;/div&gt;\n&lt;div class=&quot;font12&quot;&gt;属性选择器&lt;/div&gt;\n&lt;div class=&quot;font24&quot;&gt;属性选择器&lt;/div&gt;\n&lt;div class=&quot;font24&quot;&gt;属性选择器&lt;/div&gt;\n&lt;div class=&quot;font24&quot;&gt;属性选择器&lt;/div&gt;\n&lt;div class=&quot;24font&quot;&gt;属性选择器123&lt;/div&gt;\n&lt;div class=&quot;sub-footer&quot;&gt;属性选择器footer&lt;/div&gt;\n&lt;div class=&quot;jd-footer&quot;&gt;属性选择器footer&lt;/div&gt;\n&lt;div class=&quot;news-tao-nav&quot;&gt;属性选择器&lt;/div&gt;\n&lt;div class=&quot;news-tao-header&quot;&gt;属性选择器&lt;/div&gt;\n&lt;div class=&quot;tao-header&quot;&gt;属性选择器&lt;/div&gt;</code></pre>\n<h2 id=\"伪元素选择器（CSS3\"><a href=\"#伪元素选择器（CSS3\" class=\"headerlink\" title=\"伪元素选择器（CSS3)\"></a>伪元素选择器（CSS3)</h2><ol>\n<li>E::first-letter 文本的第一个单词或字（如中文、日文、韩文等）</li>\n<li>E::first-line 文本第一行；</li>\n<li>E::selection 可改变选中文本的样式；</li>\n</ol>\n<pre><code class=\"css\">p::first-letter &amp;#123;\n  font-size: 20px;\n  color: hotpink;\n&amp;#125;\n\n/* 首行特殊样式 */\np::first-line &amp;#123;\n  color: skyblue;\n&amp;#125;\n\np::selection &amp;#123;\n  /* font-size: 50px; */\n  color: orange;\n&amp;#125;</code></pre>\n<p>4、E::before 和 E::after</p>\n<p>在 E 元素内部的开始位置和结束位创建一个元素，该元素为行内元素，且必须要结合 content 属性使用。</p>\n<pre><code class=\"css\">div::befor &amp;#123;\n  content: &#39;开始&#39;;\n&amp;#125;\ndiv::after &amp;#123;\n  content: &#39;结束&#39;;\n&amp;#125;</code></pre>\n<p>E:after、E:before 在旧版本里是伪元素，CSS3 的规范里“:”用来表示伪类，“::”用来表示伪元素，但是在高版本浏览器下 E:after、E:before 会被自动识别为 E::after、E::before，这样做的目的是用来做兼容处理。</p>\n<p>E:after、E:before 后面的练习中会反复用到，目前只需要有个大致了解</p>\n<p>“:” 与 “::” 区别在于区分伪类和伪元素</p>\n<h1 id=\"CSS-书写规范\"><a href=\"#CSS-书写规范\" class=\"headerlink\" title=\"CSS 书写规范\"></a>CSS 书写规范</h1><p>开始就形成良好的书写规范，是你专业化的开始。</p>\n<h2 id=\"空格规范\"><a href=\"#空格规范\" class=\"headerlink\" title=\"空格规范\"></a>空格规范</h2><p>【强制】 选择器 与 { 之间必须包含空格。</p>\n<p>示例： .selector { }</p>\n<p>【强制】 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。</p>\n<p>示例：</p>\n<p>font-size: 12px;</p>\n<h2 id=\"选择器规范\"><a href=\"#选择器规范\" class=\"headerlink\" title=\"选择器规范\"></a>选择器规范</h2><p>【强制】 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。</p>\n<p>示例：</p>\n<pre><code>/* good */\n.post,\n.page,\n.comment &amp;#123;\n    line-height: 1.5;\n&amp;#125;\n\n\n/* bad */\n.post, .page, .comment &amp;#123;\n    line-height: 1.5;\n&amp;#125;</code></pre>\n<p>【建议】 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。</p>\n<p>示例：</p>\n<pre><code>/* good */\n#username input &amp;#123;&amp;#125;\n.comment .avatar &amp;#123;&amp;#125;\n\n/* bad */\n.page .header .login #username input &amp;#123;&amp;#125;\n.comment div * &amp;#123;&amp;#125;</code></pre>\n<h2 id=\"属性规范\"><a href=\"#属性规范\" class=\"headerlink\" title=\"属性规范\"></a>属性规范</h2><p>【强制】 属性定义必须另起一行。</p>\n<p>示例：</p>\n<pre><code>/* good */\n.selector &amp;#123;\n    margin: 0;\n    padding: 0;\n&amp;#125;\n\n/* bad */\n.selector &amp;#123; margin: 0; padding: 0; &amp;#125;</code></pre>\n<p>【强制】 属性定义后必须以分号结尾。</p>\n<p>示例：</p>\n<pre><code>/* good */\n.selector &amp;#123;\n    margin: 0;\n&amp;#125;\n\n/* bad */\n.selector &amp;#123;\n    margin: 0\n&amp;#125;</code></pre>\n<h1 id=\"CSS-背景-background\"><a href=\"#CSS-背景-background\" class=\"headerlink\" title=\"CSS 背景(background)\"></a>CSS 背景(background)</h1><p>CSS 可以添加背景颜色和背景图片，以及来进行图片设置。</p>\n<table>\n<thead>\n<tr>\n<th>background-color</th>\n<th>背景颜色</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>background-image</td>\n<td>背景图片地址</td>\n</tr>\n<tr>\n<td>background-repeat</td>\n<td>是否平铺</td>\n</tr>\n<tr>\n<td>background-position</td>\n<td>背景位置</td>\n</tr>\n<tr>\n<td>background-attachment</td>\n<td>背景固定还是滚动</td>\n</tr>\n<tr>\n<td>背景的合写（复合属性）</td>\n<td></td>\n</tr>\n<tr>\n<td>background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"背景图片-image\"><a href=\"#背景图片-image\" class=\"headerlink\" title=\"背景图片(image)\"></a>背景图片(image)</h2><p>语法：</p>\n<pre><code class=\"css\">background-image: none | url (url);</code></pre>\n<p>参数：</p>\n<p>none : 　无背景图（默认的）<br>url : 　使用绝对或相对地址指定背景图像</p>\n<p>background-image 属性允许指定一个图片展示在背景中（只有 CSS3 才可以多背景）可以和 background-color 连用。 如果图片不重复地话，图片覆盖不到地地方都会被背景色填充。 如果有背景图片平铺，则会覆盖背景颜色。</p>\n<p>小技巧： 我们提倡 背景图片后面的地址，url 不要加引号。</p>\n<h2 id=\"背景平铺（repeat）\"><a href=\"#背景平铺（repeat）\" class=\"headerlink\" title=\"背景平铺（repeat）\"></a>背景平铺（repeat）</h2><p>语法：</p>\n<pre><code class=\"css\">background-repeat: repeat | no-repeat | repeat-x | repeat-y;</code></pre>\n<p>参数：</p>\n<p>repeat : 　背景图像在纵向和横向上平铺（默认的）</p>\n<p>no-repeat : 　背景图像不平铺</p>\n<p>repeat-x : 　背景图像在横向上平铺</p>\n<p>repeat-y : 　背景图像在纵向平铺</p>\n<p>设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。</p>\n<p>repeat-x : 　背景图像在横向上平铺</p>\n<p>repeat-y : 　背景图像在纵向平铺</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/y.png\" width=\"600\"/>\n\n<p>设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/q.png\" width=\"600\"/>\n\n<h2 id=\"背景位置-position\"><a href=\"#背景位置-position\" class=\"headerlink\" title=\"背景位置(position)\"></a>背景位置(position)</h2><p>语法：</p>\n<pre><code class=\"css\">background-position : length || length\n\nbackground-position : position || position</code></pre>\n<p>参数：</p>\n<p>length : 　百分数 | 由浮点数字和单位标识符组成的长度值。请参阅长度单位<br>position : 　 top | center | bottom | left | center | right</p>\n<p>说明：</p>\n<p>设置或检索对象的背景图像位置。必须先指定 background-image 属性。默认值为：(0% 0%)。<br>如果只指定了一个值，该值将用于横坐标。纵坐标将默认为 50%。第二个值将用于纵坐标。</p>\n<p>注意：</p>\n<ol>\n<li>position 后面是 x 坐标和 y 坐标。 可以使用方位名词或者 精确单位。</li>\n<li>如果和精确单位和方位名字混合使用，则必须是 x 坐标在前，y 坐标后面。比如 background-position: 15px top; 则 15px 一定是 x 坐标 top 是 y 坐标。</li>\n</ol>\n<p>实际工作用的最多的，就是背景图片居中对齐了。</p>\n<h2 id=\"背景附着\"><a href=\"#背景附着\" class=\"headerlink\" title=\"背景附着\"></a>背景附着</h2><p>语法：</p>\n<pre><code class=\"css\">background-attachment: scroll | fixed;</code></pre>\n<p>参数：</p>\n<p>scroll : 　背景图像是随对象内容滚动<br>fixed : 　背景图像固定</p>\n<p>说明：</p>\n<p>设置或检索背景图像是随对象内容滚动还是固定的。</p>\n<h2 id=\"背景简写\"><a href=\"#背景简写\" class=\"headerlink\" title=\"背景简写\"></a>背景简写</h2><p>background 属性的值的书写顺序官方并没有强制标准的。为了可读性，建议大家如下写：</p>\n<p>background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</p>\n<pre><code class=\"css\">background: transparent url(image.jpg) repeat-y scroll 50% 0;</code></pre>\n<h2 id=\"背景透明-CSS3\"><a href=\"#背景透明-CSS3\" class=\"headerlink\" title=\"背景透明(CSS3)\"></a>背景透明(CSS3)</h2><p>CSS3 支持背景半透明的写法语法格式是:</p>\n<pre><code class=\"css\">background: rgba(0, 0, 0, 0.3);</code></pre>\n<p>最后一个参数是 alpha 透明度 取值范围 0~1 之间</p>\n<p>注意： 背景半透明是指盒子背景半透明， 盒子里面的内容不收影响。</p>\n<h2 id=\"背景缩放-CSS3\"><a href=\"#背景缩放-CSS3\" class=\"headerlink\" title=\"背景缩放(CSS3)\"></a>背景缩放(CSS3)</h2><p>通过 background-size 设置背景图片的尺寸，就像我们设置 img 的尺寸一样，在移动 Web 开发中做屏幕适配应用非常广泛。</p>\n<p>其参数设置如下：</p>\n<p>a) 可以设置长度单位(px)或百分比（设置百分比时，参照盒子的宽高）</p>\n<p>b) 设置为 cover 时，会自动调整缩放比例，保证图片始终填充满背景区域，如有溢出部分则会被隐藏。我们平时用的 cover 最多</p>\n<p>c) 设置为 contain 会自动调整缩放比例，保证图片始终完整显示在背景区域。</p>\n<pre><code class=\"css\">background-image: url(&#39;images/gyt.jpg&#39;);\nbackground-size: 300px 100px;\n/* background-size: contain; */\n/* background-size: cover; */</code></pre>\n<h2 id=\"多背景-CSS3\"><a href=\"#多背景-CSS3\" class=\"headerlink\" title=\"多背景(CSS3)\"></a>多背景(CSS3)</h2><p>以逗号分隔可以设置多背景，可用于自适应布局 做法就是 用逗号隔开就好了。</p>\n<ul>\n<li>一个元素可以设置多重背景图像。</li>\n<li>每组属性间使用逗号分隔。</li>\n<li>如果设置的多重背景图之间存在着交集（即存在着重叠关系），前面的背景图会覆盖在后面的背景图之上。</li>\n<li>为了避免背景色将图像盖住，背景色通常都定义在最后一组上，</li>\n</ul>\n<pre><code class=\"css\">background: url(test1.jpg) no-repeat scroll 10px 20px/50px 60px, url(test1.jpg)\n    no-repeat scroll 10px 20px/70px 90px,\n  url(test1.jpg) no-repeat scroll 10px 20px/110px 130px c #aaa;</code></pre>\n<ul>\n<li>​</li>\n</ul>\n<h2 id=\"凹凸文字\"><a href=\"#凹凸文字\" class=\"headerlink\" title=\"凹凸文字\"></a>凹凸文字</h2><pre><code class=\"css\">&lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot;&gt;\n        &lt;style&gt;\n        body &amp;#123;\n            background-color: #ccc;\n        &amp;#125;\n        div &amp;#123;\n            color: #ccc;\n            font: 700 80px &quot;微软雅黑&quot;;\n        &amp;#125;\n        div:first-child &amp;#123;\n            /* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */\n            text-shadow: 1px 1px 1px #000, -1px -1px 1px #fff;\n        &amp;#125;\n        div:last-child &amp;#123;\n            /* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */\n            text-shadow: -1px -1px 1px #000, 1px 1px 1px #fff;\n        &amp;#125;\n\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;div&gt;我是凸起的文字&lt;/div&gt;\n    &lt;div&gt;我是凹下的文字&lt;/div&gt;\n    &lt;/body&gt;</code></pre>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498467533412.png\" alt=\"1498467533412\"></p>\n<h2 id=\"导航栏案例\"><a href=\"#导航栏案例\" class=\"headerlink\" title=\"导航栏案例\"></a>导航栏案例</h2><h3 id=\"文本的装饰\"><a href=\"#文本的装饰\" class=\"headerlink\" title=\"文本的装饰\"></a>文本的装饰</h3><p>text-decoration 通常我们用于给链接修改装饰效果</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>none</td>\n<td>默认。定义标准的文本。</td>\n</tr>\n<tr>\n<td>underline</td>\n<td>定义文本下的一条线。下划线 也是我们链接自带的</td>\n</tr>\n<tr>\n<td>overline</td>\n<td>定义文本上的一条线。</td>\n</tr>\n<tr>\n<td>line-through</td>\n<td>定义穿过文本下的一条线。</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>使用技巧</strong>：在一行内的盒子内，我们设定行高等于盒子的高度，就可以使文字垂直居中。</p>\n<pre><code class=\"html\">&lt;head&gt;\n  &lt;meta charset=&quot;utf-8&quot; /&gt;\n  &lt;style&gt;\n    body &amp;#123;\n      background-color: #000;\n    &amp;#125;\n    a &amp;#123;\n      width: 200px;\n      height: 50px;\n      /* background-color: orange; */\n      display: inline-block; /* 把a 行内元素转换为行内块元素 */\n      text-align: center; /* 文字水平居中 */\n      line-height: 50px; /* 我们设定行高等于盒子的高度，就可以使文字垂直居中 */\n      color: #fff;\n      font-size: 22px;\n      text-decoration: none; /* 取消下划线 文本装饰 */\n    &amp;#125;\n    a:hover &amp;#123;\n      /* 鼠标经过 给我们的链接添加背景图片*/\n      background: url(images/h.png) no-repeat;\n    &amp;#125;\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;a href=&quot;#&quot;&gt;专区说明&lt;/a&gt;\n  &lt;a href=&quot;#&quot;&gt;申请资格&lt;/a&gt;\n  &lt;a href=&quot;#&quot;&gt;兑换奖励&lt;/a&gt;\n  &lt;a href=&quot;#&quot;&gt;下载游戏&lt;/a&gt;\n&lt;/body&gt;</code></pre>\n<h1 id=\"CSS-三大特性\"><a href=\"#CSS-三大特性\" class=\"headerlink\" title=\"CSS 三大特性\"></a>CSS 三大特性</h1><p>层叠 继承 优先级 是我们学习 CSS 必须掌握的三个特性。</p>\n<h2 id=\"CSS-层叠性\"><a href=\"#CSS-层叠性\" class=\"headerlink\" title=\"CSS 层叠性\"></a>CSS 层叠性</h2><p>所谓层叠性是指多种 CSS 样式的叠加。</p>\n<p>是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉</p>\n<p>比如先给某个标签指定了内部文字颜色为红色，接着又指定了颜色为蓝色，此时出现一个标签指定了相同样式不同值的情况，这就是样式冲突。</p>\n<p>一般情况下，如果出现样式冲突，则会按照 CSS 书写的顺序，以最后的样式为准。</p>\n<ol>\n<li>样式冲突，遵循的原则是就近原则。 那个样式离着结构近，就执行那个样式。</li>\n<li>样式不冲突，不会层叠</li>\n</ol>\n<pre><code>CSS最后的执行口诀：  长江后浪推前浪，前浪死在沙滩上。</code></pre>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/hai.gif\"  width=\"600\" height=\"400\" />\n\n<h2 id=\"CSS-继承性\"><a href=\"#CSS-继承性\" class=\"headerlink\" title=\"CSS 继承性\"></a>CSS 继承性</h2><p>所谓继承性是指书写 CSS 样式表时，子标签会继承父标签的某些样式，如文本颜色和字号。想要设置一个可继承的属性，只需将它应用于父元素即可。</p>\n<p>简单的理解就是： 子承父业。</p>\n<pre><code>CSS最后的执行口诀：  龙生龙，凤生凤，老鼠生的孩子会打洞。</code></pre>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/shu.gif\" />\n\n<p>注意：</p>\n<pre><code>恰当地使用继承可以简化代码，降低CSS样式的复杂性。子元素可以继承父元素的样式（text-，font-，line-这些元素开头的都可以继承，以及color属性）</code></pre>\n<h2 id=\"CSS-优先级\"><a href=\"#CSS-优先级\" class=\"headerlink\" title=\"CSS 优先级\"></a>CSS 优先级</h2><p>定义 CSS 样式时，经常出现两个或更多规则应用在同一元素上，这时就会出现优先级的问题。</p>\n<p>在考虑权重时，初学者还需要注意一些特殊的情况，具体如下：</p>\n<pre><code>继承样式的权重为0。即在嵌套结构中，不管父元素样式的权重多大，被子元素继承时，他的权重都为0，也就是说子元素定义的样式会覆盖继承来的样式。\n\n行内样式优先。应用style属性的元素，其行内样式的权重非常高，可以理解为远大于100。总之，他拥有比上面提高的选择器都大的优先级。\n\n权重相同时，CSS遵循就近原则。也就是说靠近元素的样式具有最大的优先级，或者说排在最后的样式优先级最大。\n\nCSS定义了一个!important命令，该命令被赋予最大的优先级。也就是说不管权重如何以及样式位置的远近，!important都具有最大优先级。</code></pre>\n<h3 id=\"CSS-特殊性（Specificity）\"><a href=\"#CSS-特殊性（Specificity）\" class=\"headerlink\" title=\"CSS 特殊性（Specificity）\"></a>CSS 特殊性（Specificity）</h3><p>关于 CSS 权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity，我们称为 CSS 特性或称非凡性，它是一个衡量 CSS 值优先级的一个标准 具体规范入如下：</p>\n<p>specificity 用一个四位的数 字串(CSS2 是三位)来表示，更像四个级别，值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。</p>\n<table>\n<thead>\n<tr>\n<th>继承或者* 的贡献值</th>\n<th>0,0,0,0</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>每个元素（标签）贡献值为</td>\n<td>0,0,0,1</td>\n</tr>\n<tr>\n<td>每个类，伪类贡献值为</td>\n<td>0,0,1,0</td>\n</tr>\n<tr>\n<td>每个 ID 贡献值为</td>\n<td>0,1,0,0</td>\n</tr>\n<tr>\n<td>每个行内样式贡献值</td>\n<td>1,0,0,0</td>\n</tr>\n<tr>\n<td>每个!important 贡献值</td>\n<td>∞ 无穷大</td>\n</tr>\n</tbody></table>\n<p>权重是可以叠加的</p>\n<p>比如的例子：</p>\n<pre><code>div ul  li   ------&gt;      0,0,0,3\n\n.nav ul li   ------&gt;      0,0,1,2\n\na:hover      -----—&gt;      0,0,1,1\n\n.nav a       ------&gt;      0,0,1,1\n\n#nav p       -----&gt;       0,1,0,1</code></pre>\n<p>​</p>\n<p>​</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/w.jpg\" /> 注意：</p>\n<p>1.数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 =0,0,0,10 而不是 0,0, 1, 0， 所以不会存在 10 个 div 能赶上一个类选择器的情况。</p>\n<ol start=\"2\">\n<li>继承的 权重是 0</li>\n</ol>\n<p>总结优先级：</p>\n<ol>\n<li>使用了 !important 声明的规则。</li>\n<li>内嵌在 HTML 元素的 style 属性里面的声明。</li>\n<li>使用了 ID 选择器的规则。</li>\n<li>使用了类选择器、属性选择器、伪元素和伪类选择器的规则。</li>\n<li>使用了元素选择器的规则。</li>\n<li>只包含一个通用选择器的规则。</li>\n<li>同一类选择器则遵循就近原则。</li>\n</ol>\n<pre><code>总结：权重是优先级的算法，层叠是优先级的表现</code></pre>\n<h1 id=\"盒子模型（CSS-重点）\"><a href=\"#盒子模型（CSS-重点）\" class=\"headerlink\" title=\"盒子模型（CSS 重点）\"></a>盒子模型（CSS 重点）</h1><p>其实，CSS 就三个大模块： 盒子模型 、 浮动 、 定位，其余的都是细节。要求这三部分，无论如何也要学的非常精通。</p>\n<p>所谓盒子模型就是把 HTML 页面中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。每个矩形都由元素的内容、内边距（padding）、边框（border）和外边距（margin）组成。</p>\n<h2 id=\"看透网页布局的本质\"><a href=\"#看透网页布局的本质\" class=\"headerlink\" title=\"看透网页布局的本质\"></a>看透网页布局的本质</h2><p>网页布局中，我们是如何把里面的文字，图片，按照美工给我们的效果图排列的整齐有序呢？</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/t.png\" />\n\n<p>牛奶是怎样运输，让消费者购买的呢？</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/m.jpg\" />\n\n<p>我们说过，行内元素比如 文字 类似牛奶，也需要一个盒子把他们装起来，我们前面学过的双标签都是一个盒子。有了盒子，我们就可以随意的，自由的，摆放位置了。</p>\n<p>看透网页布局的本质： 把网页元素比如文字图片等等，放入盒子里面，然后利用 CSS 摆放盒子的过程，就是网页布局。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/t1.png\" />\n\n<p>CSS 其实没有太多逻辑可言 ， 类似我们小时候玩的积木,我们可以自由的，随意的摆放出我们想要的效果。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/j.jpg\" width=\"300\" />\n\n<h2 id=\"盒子模型（Box-Model）\"><a href=\"#盒子模型（Box-Model）\" class=\"headerlink\" title=\"盒子模型（Box Model）\"></a>盒子模型（Box Model）</h2><p>这里略过 老旧的 ie 盒子模型（IE6 以下），对不起，我都没见过 IE5 的浏览器。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/d.jpg\" />\n\n<p>。首先，我们来看一张图，来体会下什么是盒子模型。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/box.png\"  width=\"700\" />\n\n<p>所有的文档元素（标签）都会生成一个矩形框，我们成为元素框（element box），它描述了一个文档元素再网页布局汇总所占的位置大小。因此，<strong style=\"color: #f00;\">每个盒子除了有自己大小和位置外，还影响着其他盒子的大小和位置。</strong></p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/boxs.png\"  width=\"700\" />\n\n<h2 id=\"盒子边框（border）\"><a href=\"#盒子边框（border）\" class=\"headerlink\" title=\"盒子边框（border）\"></a>盒子边框（border）</h2><p>边框就是那层皮。 橘子皮。。柚子皮。。橙子皮。。。</p>\n<p>语法：</p>\n<pre><code class=\"css\">border: border-width || border-style || border-color;</code></pre>\n<p>边框属性—设置边框样式（border-style）</p>\n<p>边框样式用于定义页面中边框的风格，常用属性值如下：</p>\n<pre><code>none：没有边框即忽略所有边框的宽度（默认值）\n\nsolid：边框为单实线(最为常用的)\n\ndashed：边框为虚线\n\ndotted：边框为点线\n\ndouble：边框为双实线</code></pre>\n<h3 id=\"盒子边框写法总结表\"><a href=\"#盒子边框写法总结表\" class=\"headerlink\" title=\"盒子边框写法总结表\"></a>盒子边框写法总结表</h3><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>设置内容</td>\n<td>样式属性</td>\n<td>常用属性值</td>\n</tr>\n<tr>\n<td>上边框</td>\n<td>border-top-style:样式; border-top-width:宽度;border-top-color:颜色;border-top:宽度 样式 颜色;</td>\n<td></td>\n</tr>\n<tr>\n<td>下边框</td>\n<td>border-bottom-style:样式;border- bottom-width:宽度;border- bottom-color:颜色;border-bottom:宽度 样式 颜色;</td>\n<td></td>\n</tr>\n<tr>\n<td>左边框</td>\n<td>border-left-style:样式; border-left-width:宽度;border-left-color:颜色;border-left:宽度 样式 颜色;</td>\n<td></td>\n</tr>\n<tr>\n<td>右边框</td>\n<td>border-right-style:样式;border-right-width:宽度;border-right-color:颜色;border-right:宽度 样式 颜色;</td>\n<td></td>\n</tr>\n<tr>\n<td>样式综合设置</td>\n<td>border-style:上边 [右边 下边 左边];</td>\n<td>none 无（默认）、solid 单实线、dashed 虚线、dotted 点线、double 双实线</td>\n</tr>\n<tr>\n<td>宽度综合设置</td>\n<td>border-width:上边 [右边 下边 左边];</td>\n<td>像素值</td>\n</tr>\n<tr>\n<td>颜色综合设置</td>\n<td>border-color:上边 [右边 下边 左边];</td>\n<td>颜色值、#十六进制、rgb(r,g,b)、rgb(r%,g%,b%)</td>\n</tr>\n<tr>\n<td>边框综合设置</td>\n<td>border:四边宽度 四边样式 四边颜色;</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"表格的细线边框\"><a href=\"#表格的细线边框\" class=\"headerlink\" title=\"表格的细线边框\"></a>表格的细线边框</h3><p>以前学过的 html 表格边框很粗，这里只需要 CSS 一句话就可以美观起来。 让我们真的相信，CSS 就是我们的白马王子（白雪公主）。</p>\n<p>table{ border-collapse:collapse; } collapse 单词是合并的意思</p>\n<p>border-collapse:collapse; 表示边框合并在一起。</p>\n<h3 id=\"圆角边框-CSS3\"><a href=\"#圆角边框-CSS3\" class=\"headerlink\" title=\"圆角边框(CSS3)\"></a>圆角边框(CSS3)</h3><p>从此以后，我们的世界不只有矩形。radius 半径（距离）</p>\n<p>语法格式：</p>\n<pre><code class=\"css\">border-radius: 左上角 右上角 右下角 左下角;</code></pre>\n<p>课堂案例:</p>\n<pre><code class=\"html\">&lt;style&gt;\n  div &amp;#123;\n    width: 200px;\n    height: 200px;\n    border: 1px solid red;\n  &amp;#125;\n  div:first-child &amp;#123;\n    /* 结构伪类选择器 选亲兄弟 */\n    border-radius: 10px; /*  一个数值表示4个角都是相同的 10px 的弧度 */\n  &amp;#125;\n\n  div:nth-child(2) &amp;#123;\n    /*border-radius: 100px;    取宽度和高度 一半  则会变成一个圆形 */\n    border-radius: 50%; /*  100px   50% 取宽度和高度 一半  则会变成一个圆形 */\n  &amp;#125;\n\n  div:nth-child(3) &amp;#123;\n    border-radius: 10px 40px; /* 左上角  和 右下角  是 10px  右上角 左下角 40 对角线 */\n  &amp;#125;\n\n  div:nth-child(4) &amp;#123;\n    border-radius: 10px 40px 80px; /* 左上角 10    右上角  左下角 40   右下角80 */\n  &amp;#125;\n  div:nth-child(5) &amp;#123;\n    border-radius: 10px 40px 80px 100px; /* 左上角 10    右上角 40  右下角 80   左下角   右下角100 */\n  &amp;#125;\n  div:nth-child(6) &amp;#123;\n    border-radius: 100px;\n    height: 100px;\n  &amp;#125;\n  div:nth-child(7) &amp;#123;\n    border-radius: 100px 0;\n  &amp;#125;\n&lt;/style&gt;</code></pre>\n<h2 id=\"内边距（padding）\"><a href=\"#内边距（padding）\" class=\"headerlink\" title=\"内边距（padding）\"></a>内边距（padding）</h2><p>padding 属性用于设置内边距。 是指 边框与内容之间的距离。</p>\n<p>padding-top:上内边距</p>\n<p>padding-right:右内边距</p>\n<p>padding-bottom:下内边距</p>\n<p>padding-left:左内边距</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/w.jpg\"/>注意： 后面跟几个数值表示的意思是不一样的。</p>\n<table>\n<thead>\n<tr>\n<th>值的个数</th>\n<th>表达意思</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1 个值</td>\n<td>padding：上下左右边距 比如 padding: 3px; 表示上下左右都是 3 像素</td>\n</tr>\n<tr>\n<td>2 个值</td>\n<td>padding: 上下边距 左右边距 比如 padding: 3px 5px; 表示 上下 3 像素 左右 5 像素</td>\n</tr>\n<tr>\n<td>3 个值</td>\n<td>padding：上边距 左右边距 下边距 比如 padding: 3px 5px 10px; 表示 上是 3 像素 左右是 5 像素 下是 10 像素</td>\n</tr>\n<tr>\n<td>4 个值</td>\n<td>padding:上内边距 右内边距 下内边距 左内边距 比如: padding: 3px 5px 10px 15px; 表示 上 3px 右是 5px 下 10px 左 15px 顺时针</td>\n</tr>\n</tbody></table>\n<p>课堂案例： 新浪导航</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/al.gif\" />\n\n<h2 id=\"外边距（margin）\"><a href=\"#外边距（margin）\" class=\"headerlink\" title=\"外边距（margin）\"></a>外边距（margin）</h2><p>margin 属性用于设置外边距。 设置外边距会在元素之间创建“空白”， 这段空白通常不能放置其他内容。</p>\n<p>margin-top:上外边距</p>\n<p>margin-right:右外边距</p>\n<p>margin-bottom:下外边距</p>\n<p>margin-left:上外边距</p>\n<p>margin:上外边距 右外边距 下外边距 左外边</p>\n<p>取值顺序跟内边距相同。</p>\n<h3 id=\"外边距实现盒子居中\"><a href=\"#外边距实现盒子居中\" class=\"headerlink\" title=\"外边距实现盒子居中\"></a>外边距实现盒子居中</h3><p>可以让一个盒子实现水平居中，需要满足一下两个条件：</p>\n<ol>\n<li>必须是块级元素。</li>\n<li>盒子必须指定了宽度（width）</li>\n</ol>\n<p>然后就给<strong>左右的外边距都设置为 auto</strong>，就可使块级元素水平居中。</p>\n<p>实际工作中常用这种方式进行网页布局，示例代码如下：</p>\n<pre><code class=\"css\">.header &amp;#123;\n  width: 960px;\n  margin: 0 auto;\n&amp;#125;</code></pre>\n<h3 id=\"文字盒子居中图片和背景区别\"><a href=\"#文字盒子居中图片和背景区别\" class=\"headerlink\" title=\"文字盒子居中图片和背景区别\"></a>文字盒子居中图片和背景区别</h3><ol>\n<li>文字水平居中是 text-align: center</li>\n<li>盒子水平居中 左右 margin 改为 auto</li>\n</ol>\n<pre><code class=\"css\">text-align: center; /*  文字居中水平 */\nmargin: 10px auto; /* 盒子水平居中  左右margin 改为 auto 就阔以了 */</code></pre>\n<ol start=\"3\">\n<li>插入图片 我们用的最多 比如产品展示类</li>\n<li>背景图片我们一般用于小图标背景 或者 超大背景图片</li>\n</ol>\n<pre><code class=\"css\">section img &amp;#123;\n  width: 200px; /* 插入图片更改大小 width 和 height */\n  height: 210px;\n  margin-top: 30px; /* 插入图片更改位置 可以用margin 或padding  盒模型 */\n  margin-left: 50px; /* 插入当图片也是一个盒子 */\n&amp;#125;\n\naside &amp;#123;\n  width: 400px;\n  height: 400px;\n  border: 1px solid purple;\n  background: #fff url(images/sun.jpg) no-repeat;\n\n  background-size: 200px 210px; /*  背景图片更改大小只能用 background-size */\n  background-position: 30px 50px; /* 背景图片更该位置 我用 background-position */\n&amp;#125;</code></pre>\n<h3 id=\"清除元素的默认内外边距\"><a href=\"#清除元素的默认内外边距\" class=\"headerlink\" title=\"清除元素的默认内外边距\"></a>清除元素的默认内外边距</h3><p>为了更方便地控制网页中的元素，制作网页时，可使用如下代码清除元素的默认内外边距：</p>\n<pre><code class=\"css\">* &amp;#123;\n  padding: 0; /* 清除内边距 */\n  margin: 0; /* 清除外边距 */\n&amp;#125;</code></pre>\n<p>注意： 行内元素是只有左右外边距的，是没有上下外边距的。 内边距，在 ie6 等低版本浏览器也会有问题。</p>\n<p>我们尽量不要给行内元素指定上下的内外边距就好了。</p>\n<h2 id=\"外边距合并\"><a href=\"#外边距合并\" class=\"headerlink\" title=\"外边距合并\"></a>外边距合并</h2><p>使用 margin 定义块元素的垂直外边距时，可能会出现外边距的合并。</p>\n<h3 id=\"相邻块元素垂直外边距的合并\"><a href=\"#相邻块元素垂直外边距的合并\" class=\"headerlink\" title=\"相邻块元素垂直外边距的合并\"></a>相邻块元素垂直外边距的合并</h3><p>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/www.png\" />\n\n<p>解决方案： 避免就好了。</p>\n<h3 id=\"嵌套块元素垂直外边距的合并\"><a href=\"#嵌套块元素垂直外边距的合并\" class=\"headerlink\" title=\"嵌套块元素垂直外边距的合并\"></a>嵌套块元素垂直外边距的合并</h3><p>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的较大者，即使父元素的上外边距为 0，也会发生合并。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/n.png\" />\n\n<p>解决方案：</p>\n<ol>\n<li>可以为父元素定义 1 像素的上边框或上内边距。</li>\n<li>可以为父元素添加 overflow:hidden。</li>\n</ol>\n<p>待续。。。。</p>\n<h2 id=\"content-宽度和高度\"><a href=\"#content-宽度和高度\" class=\"headerlink\" title=\"content 宽度和高度\"></a>content 宽度和高度</h2><p>使用宽度属性 width 和高度属性 height 可以对盒子的大小进行控制。</p>\n<p>width 和 height 的属性值可以为不同单位的数值或相对于父元素的百分比%，实际工作中最常用的是像素值。</p>\n<p>大多数浏览器，如 Firefox、IE6 及以上版本都采用了 W3C 规范，符合 CSS 规范的盒子模型的总宽度和总高度的计算原则是：</p>\n<pre><code>  /*外盒尺寸计算（元素空间尺寸）*/\n  Element空间高度 = content height + padding + border + margin\n  Element 空间宽度 = content width + padding + border + margin\n  /*内盒尺寸计算（元素实际大小）*/\n  Element Height = content height + padding + border （Height为内容高度）\n  Element Width = content width + padding + border （Width为内容宽度）</code></pre>\n<p>注意：</p>\n<p>1、宽度属性 width 和高度属性 height 仅适用于块级元素，对行内元素无效（ img 标签和 input 除外）。</p>\n<p>2、计算盒子模型的总高度时，还应考虑上下两个盒子垂直外边距合并的情况。</p>\n<p>3、<strong>如果一个盒子没有给定宽度/高度或者继承父亲的宽度/高度，则 padding 不会影响本盒子大小</strong>。</p>\n<h2 id=\"盒子模型布局稳定性\"><a href=\"#盒子模型布局稳定性\" class=\"headerlink\" title=\"盒子模型布局稳定性\"></a>盒子模型布局稳定性</h2><p>开始学习盒子模型，同学们最大的困惑就是， 分不清内外边距的使用，什么情况下使用内边距，什么情况下使用外边距？</p>\n<p>答案是： 其实他们大部分情况下是可以混用的。 就是说，你用内边距也可以，用外边距也可以。 你觉得哪个方便，就用哪个。</p>\n<p>但是，总有一个最好用的吧，我们根据稳定性来分，建议如下：</p>\n<p>按照 优先使用 宽度 （width） 其次 使用内边距（padding） 再次 外边距（margin）。</p>\n<pre><code>  width &gt;  padding  &gt;   margin</code></pre>\n<p>原因：</p>\n<ol>\n<li><p>margin 会有外边距合并 还有 ie6 下面 margin 加倍的 bug（讨厌）所以最后使用。</p>\n</li>\n<li><p>padding 会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。</p>\n</li>\n<li><p>width 没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。</p>\n<p>​</p>\n</li>\n</ol>\n<h2 id=\"CSS3-盒模型\"><a href=\"#CSS3-盒模型\" class=\"headerlink\" title=\"CSS3 盒模型\"></a>CSS3 盒模型</h2><p>CSS3 中可以通过 box-sizing 来指定盒模型，即可指定为 content-box、border-box，这样我们计算盒子大小的方式就发生了改变。</p>\n<p>可以分成两种情况：</p>\n<p>1、box-sizing: content-box 盒子大小为 width + padding + border content-box:此值为其默认值，其让元素维持 W3C 的标准 Box Mode</p>\n<p>2、box-sizing: border-box 盒子大小为 width 就是说 padding 和 border 是包含到 width 里面的</p>\n<p>注：上面的标注的 width 指的是 CSS 属性里设置的 width: length，content 的值是会自动调整的。</p>\n<pre><code class=\"css\">div:first-child &amp;#123;\n  width: 200px;\n  height: 200px;\n  background-color: pink;\n  box-sizing: content-box; /*  就是以前的标准盒模型  w3c */\n  padding: 10px;\n  border: 15px solid red;\n  /* 盒子大小为 width + padding + border   content-box:此值为其默认值，其让元素维持W3C的标准Box Mode */\n&amp;#125;\ndiv:last-child &amp;#123;\n  width: 200px;\n  height: 200px;\n  background-color: purple;\n  padding: 10px;\n  box-sizing: border-box; /* padding border  不撑开盒子 */\n  border: 15px solid red;\n  /* margin: 10px; */\n  /* 盒子大小为 width    就是说  padding 和 border 是包含到width里面的 */\n&amp;#125;</code></pre>\n<h2 id=\"盒子阴影\"><a href=\"#盒子阴影\" class=\"headerlink\" title=\"盒子阴影\"></a>盒子阴影</h2><p>语法格式：</p>\n<pre><code class=\"css\">box-shadow: 水平阴影 垂直阴影 模糊距离 阴影尺寸 阴影颜色 内/外阴影；;</code></pre>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498467567011.png\" alt=\"1498467567011\"></p>\n<ol>\n<li>前两个属性是必须写的。其余的可以省略。</li>\n<li>外阴影 (outset) 但是不能写 默认 想要内阴影 inset</li>\n</ol>\n<pre><code class=\"css\">div &amp;#123;\n  width: 200px;\n  height: 200px;\n  border: 10px solid red;\n  /* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */\n  /* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影； */\n  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.4);\n&amp;#125;</code></pre>\n<h1 id=\"浮动-float\"><a href=\"#浮动-float\" class=\"headerlink\" title=\"浮动(float)\"></a>浮动(float)</h1><h2 id=\"普通流-normal-flow\"><a href=\"#普通流-normal-flow\" class=\"headerlink\" title=\"普通流(normal flow)\"></a>普通流(normal flow)</h2><p>这个单词很多人翻译为 文档流 ， 字面翻译 普通流 或者标准流都可以。</p>\n<p>前面我们说过，网页布局的核心，就是用 CSS 来摆放盒子位置。如何把盒子摆放到合适的位置？</p>\n<p>CSS 的定位机制有 3 种：普通流（标准流）、浮动和定位。</p>\n<p>html 语言当中另外一个相当重要的概念———-标准流！或者普通流。普通流实际上就是一个网页内标签元素正常从上到下，从左到右排列顺序的意思，比如块级元素会独占一行，行内元素会按顺序依次前后排列；按照这种大前提的布局排列之下绝对不会出现例外的情况叫做普通流布局。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/t.jpg\" />\n\n<h2 id=\"浮动-float-1\"><a href=\"#浮动-float-1\" class=\"headerlink\" title=\"浮动(float)\"></a>浮动(float)</h2><p>浮动最早是用来控制图片，以便达到其他元素（特别是文字）实现“环绕”图片的效果。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/l.png\" style=\"width: 600px; border: 2px solid #000;\"/>\n\n<p>后来，我们发现浮动有个很有意思的事情：就是让任何盒子可以一行排列,因此我们就慢慢的偏离主题，用浮动的特性来布局了。（CSS3 已经我们真正意义上的网页布局，具体 CSS3 我们会详细解释）</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/d.png\" />\n\n<h2 id=\"什么是浮动？\"><a href=\"#什么是浮动？\" class=\"headerlink\" title=\"什么是浮动？\"></a>什么是浮动？</h2><p>元素的浮动是指设置了浮动属性的元素会脱离标准普通流的控制，移动到其父元素中指定位置的过程。</p>\n<p>在 CSS 中，通过 float 属性来定义浮动，其基本语法格式如下：</p>\n<pre><code>选择器&amp;#123;float:属性值;&amp;#125;</code></pre>\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>left</td>\n<td>元素向左浮动</td>\n</tr>\n<tr>\n<td>right</td>\n<td>元素向右浮动</td>\n</tr>\n<tr>\n<td>none</td>\n<td>元素不浮动（默认值）</td>\n</tr>\n</tbody></table>\n<h2 id=\"浮动详细内幕特性\"><a href=\"#浮动详细内幕特性\" class=\"headerlink\" title=\"浮动详细内幕特性\"></a>浮动详细内幕特性</h2><p>浮动脱离标准流，不占位置，会影响标准流。浮动只有左右浮动。</p>\n<pre><code>浮动首先创建包含块的概念（包裹）。就是说， 浮动的元素总是找理它最近的父级元素对齐。但是不会超出内边距的范围。</code></pre>\n   <img src=\"https://zclzone.gitee.io/resource/image/blog/media/one.jpg\" width=\"500\" />\n\n<pre><code>浮动的元素排列位置，跟上一个元素（块级）有关系。如果上一个元素有浮动，则A元素顶部会和上一个元素的顶部对齐；如果上一个元素是标准流，则A元素的顶部会和上一个元素的底部对齐。</code></pre>\n  <img src=\"https://zclzone.gitee.io/resource/image/blog/media/two.jpg\" width=\"400\" />\n\n<pre><code>由2可以推断出，一个父盒子里面的子盒子，如果其中一个子级有浮动的，则其他子级都需要浮动。这样才能一行对齐显示。</code></pre>\n<pre><code>元素添加浮动后，元素会具有行内块元素的特性。元素的大小完全取决于定义的大小或者默认的内容多少浮动根据元素书写的位置来显示相应的浮动。</code></pre>\n<p>总结： 浮动 —&gt;</p>\n<p>浮动的目的就是为了让多个块级元素同一行上显示。</p>\n<p>float 浮 漏 特</p>\n<p>浮： 加了浮动的元素盒子是浮起来的，漂浮在其他的标准流盒子上面。<br>漏： 加了浮动的盒子，不占位置的，它浮起来了，它原来的位置漏 给了标准流的盒子。<br>特： 特别注意，首先浮动的盒子需要和标准流的父级搭配使用， 其次 特别的注意浮动可以使元素显示模式体现为行内块特性。</p>\n<h1 id=\"版心和布局流程\"><a href=\"#版心和布局流程\" class=\"headerlink\" title=\"版心和布局流程\"></a>版心和布局流程</h1><p>阅读报纸时容易发现，虽然报纸中的内容很多，但是经过合理地排版，版面依然清晰、易读。同样，在制作网页时，要想使页面结构清晰、有条理，也需要对网页进行“排版”。</p>\n<p>“版心”(可视区) 是指网页中主体内容所在的区域。一般在浏览器窗口中水平居中显示，常见的宽度值为 960px、980px、1000px、1200px 等。</p>\n<h2 id=\"布局流程\"><a href=\"#布局流程\" class=\"headerlink\" title=\"布局流程\"></a>布局流程</h2><p>为了提高网页制作的效率，布局时通常需要遵守一定的布局流程，具体如下：</p>\n<p>1、确定页面的版心（可视区）。</p>\n<p>2、分析页面中的行模块，以及每个行模块中的列模块。</p>\n<p>3、制作 HTML 结构 。</p>\n<p>4、CSS 初始化，然后开始运用盒子模型的原理，通过 DIV+CSS 布局来控制网页的各个模块。</p>\n<h2 id=\"一列固定宽度且居中\"><a href=\"#一列固定宽度且居中\" class=\"headerlink\" title=\"一列固定宽度且居中\"></a>一列固定宽度且居中</h2><img src=\"https://zclzone.gitee.io/resource/image/blog/media/yl.jpg\" width=\"400\" />\n\n<p>最普通的，最为常用的结构</p>\n<h2 id=\"两列左窄右宽型\"><a href=\"#两列左窄右宽型\" class=\"headerlink\" title=\"两列左窄右宽型\"></a>两列左窄右宽型</h2><img src=\"https://zclzone.gitee.io/resource/image/blog/media/ll.jpg\" width=\"400\" />\n\n<p>比如小米 <a href=\"http://www.mi.com\" target=\"_blank\"> 小米官网 </a></p>\n<h2 id=\"通栏平均分布型\"><a href=\"#通栏平均分布型\" class=\"headerlink\" title=\"通栏平均分布型\"></a>通栏平均分布型</h2><img src=\"https://zclzone.gitee.io/resource/image/blog/media/tl.jpg\" width=\"600\" />\n\n<p>比如锤子 <a href=\"http://www.smartisan.com/\" target=\"_blank\"> 锤子官网 </a></p>\n<h1 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h1><p>人生就像乘坐北京地铁一号线：</p>\n<p>途经国贸，羡慕繁华；</p>\n<p>途经天安门，幻想权力；</p>\n<p>途经金融街，梦想发财；</p>\n<p>经过公主坟，遥想华丽家族；</p>\n<p>经过玉泉路，依然雄心勃勃…</p>\n<p>这时，有个声音飘然入耳:乘客你好,八宝山马上就要到了！</p>\n<p>顿时醒悟：人生苦短，有始有终。</p>\n<p>好比我们的浮动，有浮动开始，则就应该有浮动结束。</p>\n<h2 id=\"为什么要清除浮动\"><a href=\"#为什么要清除浮动\" class=\"headerlink\" title=\"为什么要清除浮动\"></a>为什么要清除浮动</h2><p>我们前面说过，浮动本质是用来做一些文字混排效果的，但是被我们拿来做布局用，则会有很多的问题出现， 但是，你不能说浮动不好 <img src=\"https://zclzone.gitee.io/resource/image/blog/media/wq.jpg\" height=\"100\" />。</p>\n<p>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响，为了解决这些问题，此时就需要在该元素中清除浮动。</p>\n<p>准确地说，并不是清除浮动，而是<strong>清除浮动后造成的影响</strong></p>\n<p>如果浮动一开始就是一个美丽的错误，那么请用正确的方法挽救它。</p>\n<h2 id=\"清除浮动本质\"><a href=\"#清除浮动本质\" class=\"headerlink\" title=\"清除浮动本质\"></a>清除浮动本质</h2><p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为 0 的问题。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/n.jpg\" />\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/no.jpg\" />\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/kc.jpg\" />\n\n<h2 id=\"清除浮动的方法\"><a href=\"#清除浮动的方法\" class=\"headerlink\" title=\"清除浮动的方法\"></a>清除浮动的方法</h2><p>其实本质叫做闭合浮动更好一些, 记住，清除浮动就是把浮动的盒子圈到里面，让父盒子闭合出口和入口不让他们出来影响其他元素。</p>\n<p>在 CSS 中，clear 属性用于清除浮动，其基本语法格式如下：</p>\n<pre><code>选择器&amp;#123;clear:属性值;&amp;#125;</code></pre>\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>left</td>\n<td>不允许左侧有浮动元素（清除左侧浮动的影响）</td>\n</tr>\n<tr>\n<td>right</td>\n<td>不允许右侧有浮动元素（清除右侧浮动的影响）</td>\n</tr>\n<tr>\n<td>both</td>\n<td>同时清除左右两侧浮动的影响</td>\n</tr>\n</tbody></table>\n<h3 id=\"额外标签法\"><a href=\"#额外标签法\" class=\"headerlink\" title=\"额外标签法\"></a>额外标签法</h3><pre><code class=\"html\">是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如\n&lt;div style=&quot;”clear:both”&quot;&gt;&lt;/div&gt;\n，或则其他标签br等亦可。</code></pre>\n<p>优点： 通俗易懂，书写方便</p>\n<p>缺点： 添加许多无意义的标签，结构化较差。 我只能说，w3c 你推荐的方法我不接受，你不值得拥有。。。</p>\n<h3 id=\"父级添加-overflow-属性方法\"><a href=\"#父级添加-overflow-属性方法\" class=\"headerlink\" title=\"父级添加 overflow 属性方法\"></a>父级添加 overflow 属性方法</h3><p>可以通过触发 BFC 的方式，可以实现清除浮动效果。（BFC 后面讲解）</p>\n<pre><code class=\"css\">可以给父级添加： overflow为 hidden|auto|scroll  都可以实现。</code></pre>\n<p>优点： 代码简洁</p>\n<p>缺点： 内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</p>\n<h3 id=\"使用-after-伪元素清除浮动\"><a href=\"#使用-after-伪元素清除浮动\" class=\"headerlink\" title=\"使用 after 伪元素清除浮动\"></a>使用 after 伪元素清除浮动</h3><p><strong>:after 方式为空元素的升级版，好处是不用单独加标签了</strong></p>\n<p>使用方法：</p>\n<pre><code class=\"css\">.clearfix:after &amp;#123;\n  content: &#39;.&#39;;\n  display: block;\n  height: 0;\n  clear: both;\n  visibility: hidden;\n&amp;#125;\n\n.clearfix &amp;#123;\n  *zoom: 1;\n&amp;#125; /* IE6、7 专有 */</code></pre>\n<p>优点： 符合闭合浮动思想 结构语义化正确</p>\n<p>缺点： 由于 IE6-7 不支持:after，使用 zoom:1 触发 hasLayout。</p>\n<p>代表网站： 百度、淘宝网、网易等</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/163.png\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n<p>注意： content:”.” 里面尽量跟一个小点，或者其他，尽量不要为空，否则再 firefox 7.0 前的版本会有生成空格。</p>\n<h3 id=\"使用-before-和-after-双伪元素清除浮动\"><a href=\"#使用-before-和-after-双伪元素清除浮动\" class=\"headerlink\" title=\"使用 before 和 after 双伪元素清除浮动\"></a>使用 before 和 after 双伪元素清除浮动</h3><p>使用方法：</p>\n<pre><code class=\"css\">.clearfix:before,\n.clearfix:after &amp;#123;\n  content: &#39;&#39;;\n  display: table; /* 这句话可以出发BFC BFC可以清除浮动,BFC我们后面讲 */\n&amp;#125;\n.clearfix:after &amp;#123;\n  clear: both;\n&amp;#125;\n.clearfix &amp;#123;\n  *zoom: 1;\n&amp;#125;</code></pre>\n<p>优点： 代码更简洁</p>\n<p>缺点： 由于 IE6-7 不支持:after，使用 zoom:1 触发 hasLayout。</p>\n<p>代表网站： 小米、腾讯等</p>\n<h1 id=\"Photoshop-图像处理专家\"><a href=\"#Photoshop-图像处理专家\" class=\"headerlink\" title=\"Photoshop 图像处理专家\"></a>Photoshop 图像处理专家</h1><p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498465020015.png\" alt=\"1498465020015\"></p>\n<p>PS 工具是我们使用频率比较高的软件之一， 我们学习 PS 目的不是为了设计海报做电商和 UI 的，而是要求：</p>\n<ol>\n<li>会简单的抠图</li>\n<li>会简单的修改 PSD 效果图</li>\n<li><strong>熟练的切图</strong></li>\n<li>能和网站美工美眉有共同话题。。。。。</li>\n</ol>\n<h2 id=\"Photoshop-基本使用\"><a href=\"#Photoshop-基本使用\" class=\"headerlink\" title=\"Photoshop 基本使用\"></a>Photoshop 基本使用</h2><h2 id=\"PS-界面组成：\"><a href=\"#PS-界面组成：\" class=\"headerlink\" title=\"PS 界面组成：\"></a>PS 界面组成：</h2><p>菜单栏、选项栏、工具栏、浮动面板（拖拽名称，可单独操作面板）、绘图窗口<br>​ 窗口菜单，可显示隐藏所有面板</p>\n<p>工作区：（新建）</p>\n<p>调整浮动面板</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/jiemian.png\"/>\n\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><p>文件下拉菜单：<br>​ 1、新建 新建文档 CTRL+N</p>\n<p>单位：像素 厘米 毫米</p>\n<p>屏幕显示： 单位 像素 72 像素/英寸 RGB 颜色模式</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/huabu.png\"/>\n\n<p>2、关闭文档 CTRL+W</p>\n<p>3、存储 CTRL+S （替存）</p>\n<p>4、存储为 CTRL+SHIFT+S 另存一份文件</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/baocun.png\"/>\n\n<p>5、格式：<br>​ .psd PS 源文件格式 图层、文字、样式等，可再次编辑<br>​ （给自己）<br>​ .jpg 有损压缩格式 （给客户） 品质 最高 12</p>\n<p>6、文件打开：<br>​ 1）文件下拉菜单-打开（CTRL+O 欧）</p>\n<p>​ 2）双击软件空白处也能打开<br>​</p>\n<h2 id=\"移动工具-V\"><a href=\"#移动工具-V\" class=\"headerlink\" title=\"移动工具 V\"></a>移动工具 V</h2><p>1、不同文件之间拖拽图像。</p>\n<h2 id=\"自由变形\"><a href=\"#自由变形\" class=\"headerlink\" title=\"自由变形\"></a>自由变形</h2><p>ctrl + T 可以改变图像的大小</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/bianhuan.png\" />\n\n<p>按下 enter 回车确认操作。</p>\n<h2 id=\"图层操作-重点\"><a href=\"#图层操作-重点\" class=\"headerlink\" title=\"图层操作(重点)\"></a>图层操作(重点)</h2><p>图层面板快捷键 F7 其实图层就是一张张透明的纸 可以实现叠加问题。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/tuceng.png\" />\n\n<p>图层选择： 使用移动工具 V</p>\n<p>1、图层缩览图判断</p>\n<p>2、按住 CTRL,在目标图像上单击</p>\n<p>3、将光标放置在目标图像上右键，选择图层名称</p>\n<p>图层面板中加选图层：</p>\n<p>1、按 SHIFT，单击另一目标图层 中间所有图层被选中</p>\n<p>2、按 CTRL，单击另一目标图层 只选中目标图层</p>\n<p>复制图层：选中目标图层后（移动工具状态下）</p>\n<p>1、按 ALT 拖拽图像</p>\n<p>2、CTRL+J （重合）</p>\n<p>案例： 摆放一个自行车</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/bike.jpg\" />\n\n<h2 id=\"图层编组\"><a href=\"#图层编组\" class=\"headerlink\" title=\"图层编组\"></a>图层编组</h2><p>选中目标图层，CTRL+G</p>\n<p>取消编组：CTRL+SHIFT+G</p>\n<p>双击图层名称可重新命名</p>\n<p>双击组名称，可命名组</p>\n<p>移动工具 V 选择组或图层时，需设置选项栏</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498465862231.png\" alt=\"1498465862231\"></p>\n<h2 id=\"图层上下位置移动\"><a href=\"#图层上下位置移动\" class=\"headerlink\" title=\"图层上下位置移动\"></a>图层上下位置移动</h2><p>1、选中目标图层，在图层面拖拽</p>\n<p>2、CTRL+] 向上移动图层<br>​ CTRL+[ 向下移动图层</p>\n<p>3、CTRL+SHIFT+] 图层置顶<br>​ CTRL+SHIFT+[ 图层置底</p>\n<p>移动选区或图像时：</p>\n<p>移动过程中，没释放鼠标，按住 SHIFT，可同一水平线、同一垂线、45 度移动。</p>\n<p>ps 中的撤销操作是：</p>\n<p>ctrl+z 撤销一步</p>\n<p>ctrl+alt+z 撤销多步</p>\n<h2 id=\"图层合并\"><a href=\"#图层合并\" class=\"headerlink\" title=\"图层合并\"></a>图层合并</h2><p>ctrl+e 可以合并图层</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/hebing.png\" />\n\n<h2 id=\"图层透明度\"><a href=\"#图层透明度\" class=\"headerlink\" title=\"图层透明度\"></a>图层透明度</h2><p>不透明度：设置图层的不透明程度 0%完全透明，不可见</p>\n<p>​ 100%完全不透明，真实可见</p>\n<p>填充：与不透明度效果类似</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498465905203.png\" alt=\"1498465905203\">)</p>\n<p>键盘数字键，可快速设置透明度数值</p>\n<h2 id=\"矩形选区工具-M\"><a href=\"#矩形选区工具-M\" class=\"headerlink\" title=\"矩形选区工具 M\"></a>矩形选区工具 M</h2><p>用来选择某部分区域 我们成为选区工具</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/gongjuxiang.png\" />\n\n<p>取消选区： ctrl+d</p>\n<h2 id=\"颜色填充\"><a href=\"#颜色填充\" class=\"headerlink\" title=\"颜色填充\"></a>颜色填充</h2><img src=\"https://zclzone.gitee.io/resource/image/blog/media/yanse1.png\" />\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/yanse2.png\" />\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/miqi.jpg\"/>\n\n<h2 id=\"套索工具-L\"><a href=\"#套索工具-L\" class=\"headerlink\" title=\"套索工具 L\"></a>套索工具 L</h2><p>1、套索工具 L 在屏幕上拖拽鼠标左键，释放后生成选区</p>\n<p>2、多边形套索 L 连续单击绘制多边形选区</p>\n<p>​ 闭合方法：1、单击起始点 2、双击任意位置</p>\n<p>​ DELETE 删除当前点</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/shiboguan.jpg\" />\n\n<h2 id=\"磁性套索-L\"><a href=\"#磁性套索-L\" class=\"headerlink\" title=\"磁性套索 L\"></a>磁性套索 L</h2><p>L 在颜色交界的位置单击后拖动。单击起始点后，生成选区。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/cixing.jpg\" />\n\n<h2 id=\"魔棒工具-W\"><a href=\"#魔棒工具-W\" class=\"headerlink\" title=\"魔棒工具 W\"></a>魔棒工具 W</h2><p>以单击位置为选择色，选择相似颜色生成选区。</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498465928343.png\" alt=\"1498465928343\"></p>\n<p>容差：选择颜色的范围 容差小，颜色选择精确。 0-255</p>\n<p>连续：勾选连续时，相连颜色生成选区。</p>\n<p>​ 不勾选，画面中所有相似颜色被选中生成选区。</p>\n<p>按 SHIFT 在未生成选区位置单击，可选区相加。</p>\n<p>选区反选：CTRL+SHIFT+I</p>\n<h2 id=\"选区布尔运算\"><a href=\"#选区布尔运算\" class=\"headerlink\" title=\"选区布尔运算\"></a>选区布尔运算</h2><p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498465944087.png\" alt=\"1498465944087\"></p>\n<p>选区面积大小的变化。</p>\n<p>新选区：保持选中状态</p>\n<p>添加到选区：相加运算（按住 SHIFT 再绘制选区）</p>\n<p>从选区减去：相减（按住 ALT 再绘制选区）</p>\n<p>与选区交叉：重合部分保留。（按住 ALT+SHIFT 再绘制选区）</p>\n<p>梦幻星球</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/chengshi.jpg\" />\n\n<h2 id=\"钢笔工具：-P\"><a href=\"#钢笔工具：-P\" class=\"headerlink\" title=\"钢笔工具： P\"></a>钢笔工具： P</h2><p>作用：绘制路径，生成选区，抠图。</p>\n<p>组成;路径线和锚点</p>\n<p>绘制路径后，CTRL+回车，生成选区。</p>\n<p>路径类型：</p>\n<p>直线型路径：连续单击</p>\n<p>曲线型路径：第一点单击，第二点拖动鼠标。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/jiu.png\"/>\n\n<h2 id=\"文字工具\"><a href=\"#文字工具\" class=\"headerlink\" title=\"文字工具\"></a>文字工具</h2><p>T 可以直接输入文字</p>\n<h2 id=\"Photoshop-切图\"><a href=\"#Photoshop-切图\" class=\"headerlink\" title=\"Photoshop 切图\"></a>Photoshop 切图</h2><p>PS 切图 可以 分为 手动 利用切片切图 以及 利用 PS 的插件快速切图</p>\n<h3 id=\"切片工具\"><a href=\"#切片工具\" class=\"headerlink\" title=\"切片工具\"></a>切片工具</h3><p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498466173246.png\" alt=\"1498466173246\"></p>\n<ol>\n<li><p>利用切片工具手动划出</p>\n</li>\n<li><p>图层菜单—新建基于图层的切片</p>\n</li>\n<li><p>利用标尺 基于参考线的切片 （选择切片工具）</p>\n<p>​</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498466734205.png\" alt=\"1498466734205\"></p>\n</li>\n<li><p>先选个一个整个的切片， 切片选择工具– 属性面板中有 “划分” –可以等分数平分切图</p>\n</li>\n</ol>\n<p>导出切片： 文件– 存储为 web 设备所用格式</p>\n<h3 id=\"辅助线和切片使用及清除\"><a href=\"#辅助线和切片使用及清除\" class=\"headerlink\" title=\"辅助线和切片使用及清除\"></a>辅助线和切片使用及清除</h3><p>视图菜单– 清除 辅助线/ 清除切片</p>\n<h3 id=\"切图插件\"><a href=\"#切图插件\" class=\"headerlink\" title=\"切图插件\"></a>切图插件</h3><p>Cutterman 是一款运行在 photoshop 中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 “导出 web 所用格式” 以及使用切片工具进行挨个切图的繁琐流程。 它支持各种各样的图片尺寸、格式、形态输出，方便你在 pc、ios、Android 等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。</p>\n<p>官网: <a href=\"http://www.cutterman.cn/zh/cutterman\">http://www.cutterman.cn/zh/cutterman</a></p>\n<p>注意： cutterman 插件要求你的 ps 必须是完整版，不能是绿色版，所以大家需要从新安装完整版本。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/sample1.gif\" />\n\n<h1 id=\"项目案例：-学成网\"><a href=\"#项目案例：-学成网\" class=\"headerlink\" title=\"项目案例： 学成网\"></a>项目案例： 学成网</h1><p>案例练习目的是总结以前的 css 和 html</p>\n<p>还有 ps 的使用。</p>\n<p>制作步骤：</p>\n<ol>\n<li>准备相关文件。（内部样式表) html 文件(index.html) 图片文件</li>\n<li>准备 CSS 初始化。 书写结构和样式</li>\n<li>确定版心（是 1200 像素)和各个模块。</li>\n</ol>\n<h1 id=\"定位-position\"><a href=\"#定位-position\" class=\"headerlink\" title=\"定位(position)\"></a>定位(position)</h1><p>如果，说浮动， 关键在一个 “浮” 字上面， 那么 我们的定位，关键在于一个 “位” 上。</p>\n<p>PS: 定位是我们 CSS 算是数一数二难点的了，但是，你务必要学好它，我们 CSS 离不开定位，特别是后面的 js 特效，天天和定位打交道。不要抵触它，反而要爱上它，它可以让我们工作更加轻松哦！</p>\n<h2 id=\"为什么要用定位？\"><a href=\"#为什么要用定位？\" class=\"headerlink\" title=\"为什么要用定位？\"></a>为什么要用定位？</h2><p>那么定位，最长运用的场景再那里呢？ 来看几幅图片，你一定会有感悟！</p>\n<p>第一幅图， 小黄色块可以再图片上移动：</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/1.gif\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n<p>第二幅图， 左右箭头压住图片：</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/2.gif\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n<p>第三幅图, hot 再盒子外面多出一块，更加突出：</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/it.png\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n<p>以上三个小地方，如果用标准流或者浮动，实现会比较复杂或者难以实现，此时我们用定位来做，just soso！</p>\n<h2 id=\"元素的定位属性\"><a href=\"#元素的定位属性\" class=\"headerlink\" title=\"元素的定位属性\"></a>元素的定位属性</h2><p>元素的定位属性主要包括定位模式和边偏移两部分。</p>\n<p>1、边偏移</p>\n<table>\n<thead>\n<tr>\n<th>边偏移属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>top</td>\n<td>顶端偏移量，定义元素相对于其父元素上边线的距离</td>\n</tr>\n<tr>\n<td>bottom</td>\n<td>底部偏移量，定义元素相对于其父元素下边线的距离</td>\n</tr>\n<tr>\n<td>left</td>\n<td>左侧偏移量，定义元素相对于其父元素左边线的距离</td>\n</tr>\n<tr>\n<td>right</td>\n<td>右侧偏移量，定义元素相对于其父元素右边线的距离</td>\n</tr>\n</tbody></table>\n<p>也就说，以后定位要和这边偏移搭配使用了， 比如 top: 100px; left: 30px; 等等</p>\n<p>2、定位模式(定位的分类)</p>\n<p>在 CSS 中，position 属性用于定义元素的定位模式，其基本语法格式如下：</p>\n<p>选择器{position:属性值;}</p>\n<p>position 属性的常用值</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>static</td>\n<td>自动定位（默认定位方式）</td>\n</tr>\n<tr>\n<td>relative</td>\n<td>相对定位，相对于其原文档流的位置进行定位</td>\n</tr>\n<tr>\n<td>absolute</td>\n<td>绝对定位，相对于其上一个已经定位的父元素进行定位</td>\n</tr>\n<tr>\n<td>fixed</td>\n<td>固定定位，相对于浏览器窗口进行定位</td>\n</tr>\n</tbody></table>\n<h2 id=\"静态定位-static\"><a href=\"#静态定位-static\" class=\"headerlink\" title=\"静态定位(static)\"></a>静态定位(static)</h2><p>静态定位是所有元素的默认定位方式，当 position 属性的取值为 static 时，可以将元素定位于静态位置。 所谓静态位置就是各个元素在 HTML 文档流中默认的位置。</p>\n<p>上面的话翻译成白话： 就是网页中所有元素都默认的是静态定位哦！ 其实就是标准流的特性。</p>\n<p>在静态定位状态下，无法通过边偏移属性（top、bottom、left 或 right）来改变元素的位置。</p>\n<p>PS： 静态定位其实没啥可说的。</p>\n<h2 id=\"相对定位-relative-自恋型\"><a href=\"#相对定位-relative-自恋型\" class=\"headerlink\" title=\"相对定位 relative(自恋型)\"></a>相对定位 relative(自恋型)</h2><pre><code>小笑话：\n刚刚看到一个超级超级帅的帅哥，看得我都忍不住想和他搞基了。世间怎会有如此之完美的男人。我和他就这样一动不动的对视着，就仿佛一见钟情。时间也在这一瞬间停止了。直到我的手麻了。才恋恋不舍的放下镜子。。。。</code></pre>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/smail.gif\" width=\"100\"/>\n\n<p>相对定位是将元素相对于它在标准流中的位置进行定位，当 position 属性的取值为 relative 时，可以将元素定位于相对位置。</p>\n<p>对元素设置相对定位后，可以通过边偏移属性改变元素的位置，但是它在文档流中的位置仍然保留。如下图所示，即是一个相对定位的效果展示：</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/r.png\"  />\n\n<p>注意：</p>\n<ol>\n<li>相对定位最重要的一点是，它可以通过边偏移移动位置，但是原来的所占的位置，继续占有。</li>\n<li>其次，每次移动的位置，是以自己的左上角为基点移动（相对于自己来移动位置）</li>\n</ol>\n<p>就是说，相对定位的盒子仍在标准流中，它后面的盒子仍以标准流方式对待它。（相对定位不脱标）</p>\n<p>如果说浮动的主要目的是 让多个块级元素一行显示，那么定位的主要价值就是 移动位置， 让盒子到我们想要的位置上去。</p>\n<h2 id=\"绝对定位-absolute-拼爹型\"><a href=\"#绝对定位-absolute-拼爹型\" class=\"headerlink\" title=\"绝对定位 absolute (拼爹型)\"></a>绝对定位 absolute (拼爹型)</h2><pre><code>小笑话：\n\n吃早饭时，老婆往儿子碗里放了两个煎蛋，儿子全给了我，还一本正经地说：“爸爸，多吃点，男人养家不容易。” &lt;br/&gt;\n\n我一阵感动，刚想夸他两句。\n\n儿子接着说：“以后全靠你让我拼爹了！”</code></pre>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/smail.gif\" width=\"100\"/>\n\n<p>[注意] 如果文档可滚动，绝对定位元素会随着它滚动，因为元素最终会相对于正常流的某一部分定位。</p>\n<p>当 position 属性的取值为 absolute 时，可以将元素的定位模式设置为绝对定位。</p>\n<p>注意： 绝对定位最重要的一点是，它可以通过边偏移移动位置，但是它完全脱标，完全不占位置。</p>\n<h3 id=\"父级没有定位\"><a href=\"#父级没有定位\" class=\"headerlink\" title=\"父级没有定位\"></a>父级没有定位</h3><p>若所有父元素都没有定位，以浏览器为准对齐(document 文档)。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/ab.png\" />\n\n<h3 id=\"父级有定位\"><a href=\"#父级有定位\" class=\"headerlink\" title=\"父级有定位\"></a>父级有定位</h3><p>绝对定位是将元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/ab1.png\" />\n\n<h3 id=\"子绝父相\"><a href=\"#子绝父相\" class=\"headerlink\" title=\"子绝父相\"></a>子绝父相</h3><p>这个“子绝父相”太重要了，是我们学习定位的口诀，时时刻刻记住的。</p>\n<p>这句话的意思是 子级是绝对定位的话， 父级要用相对定位。</p>\n<p>首先， 我们说下， 绝对定位是将元素依据最近的已经定位绝对、固定或相对定位）的父元素（祖先）进行定位。</p>\n<p>就是说， 子级是绝对定位，父亲只要是定位即可（不管父亲是绝对定位还是相对定位，甚至是固定定位都可以），就是说， 子绝父绝，子绝父相都是正确的。</p>\n<p>但是，在我们网页布局的时候， 最常说的 子绝父相是怎么来的呢？ 请看如下图：</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/zi.png\"  style=\"border: 1px dashed #3c3c3c;\"/>\n\n<p>所以，我们可以得出如下结论：</p>\n<p>因为子级是绝对定位，不会占有位置， 可以放到父盒子里面的任何一个地方。</p>\n<p>父盒子布局时，需要占有位置，因此父亲只能是 相对定位.</p>\n<p>这就是子绝父相的由来。</p>\n<h2 id=\"绝对定位的盒子水平-垂直居中\"><a href=\"#绝对定位的盒子水平-垂直居中\" class=\"headerlink\" title=\"绝对定位的盒子水平/垂直居中\"></a>绝对定位的盒子水平/垂直居中</h2><p>普通的盒子是左右 margin 改为 auto 就可， 但是对于绝对定位就无效了</p>\n<p>定位的盒子也可以水平或者垂直居中，有一个算法。</p>\n<ol>\n<li><p>首先 left 50% 父盒子的一半大小</p>\n</li>\n<li><p>然后走自己外边距负的一半值就可以了 margin-left。</p>\n<p>​</p>\n</li>\n</ol>\n<h2 id=\"固定定位-fixed-认死理型\"><a href=\"#固定定位-fixed-认死理型\" class=\"headerlink\" title=\"固定定位 fixed(认死理型)\"></a>固定定位 fixed(认死理型)</h2><p>固定定位是绝对定位的一种特殊形式，类似于 正方形是一个特殊的 矩形。它以浏览器窗口作为参照物来定义网页元素。当 position 属性的取值为 fixed 时，即可将元素的定位模式设置为固定定位。</p>\n<p>当对元素设置固定定位后，它将脱离标准文档流的控制，始终依据浏览器窗口来定义自己的显示位置。不管浏览器滚动条如何滚动也不管浏览器窗口的大小如何变化，该元素都会始终显示在浏览器窗口的固定位置。</p>\n<p>固定定位有两点：</p>\n<ol>\n<li>固定定位的元素跟父亲没有任何关系，只认浏览器。</li>\n<li>固定定位完全脱标，不占有位置，不随着滚动条滚动。</li>\n</ol>\n<p>记忆法： 就类似于孙猴子， 无父无母，好不容易找到一个可靠的师傅（浏览器），就听的师傅的，别的都不听。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/sun.jpg\" width=\"100\">\n\n<p>ie6 等低版本浏览器不支持固定定位。</p>\n<h2 id=\"叠放次序（z-index）\"><a href=\"#叠放次序（z-index）\" class=\"headerlink\" title=\"叠放次序（z-index）\"></a>叠放次序（z-index）</h2><p>当对多个元素同时设置定位时，定位元素之间有可能会发生重叠。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/zzz.png\" />\n\n<p>在 CSS 中，要想调整重叠定位元素的堆叠顺序，可以对定位元素应用 z-index 层叠等级属性，其取值可为正整数、负整数和 0。</p>\n<p>比如： z-index: 2;</p>\n<p>注意：</p>\n<ol>\n<li><p>z-index 的默认属性值是 0，取值越大，定位元素在层叠元素中越居上。</p>\n</li>\n<li><p>如果取值相同，则根据书写顺序，后来居上。</p>\n</li>\n<li><p>后面数字一定不能加单位。</p>\n</li>\n<li><p>只有相对定位，绝对定位，固定定位有此属性，其余标准流，浮动，静态定位都无此属性，亦不可指定此属性。</p>\n</li>\n</ol>\n<h1 id=\"四种定位总结\"><a href=\"#四种定位总结\" class=\"headerlink\" title=\"四种定位总结\"></a>四种定位总结</h1><table>\n<thead>\n<tr>\n<th>定位模式</th>\n<th>是否脱标占有位置</th>\n<th>是否可以使用边偏移</th>\n<th>移动位置基准</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>静态 static</td>\n<td>不脱标，正常模式</td>\n<td>不可以</td>\n<td>正常模式</td>\n</tr>\n<tr>\n<td>相对定位 relative</td>\n<td>不脱标，占有位置</td>\n<td>可以</td>\n<td>相对自身位置移动（自恋型）</td>\n</tr>\n<tr>\n<td>绝对定位 absolute</td>\n<td>完全脱标，不占有位置</td>\n<td>可以</td>\n<td>相对于定位父级移动位置（拼爹型）</td>\n</tr>\n<tr>\n<td>固定定位 fixed</td>\n<td>完全脱标，不占有位置</td>\n<td>可以</td>\n<td>相对于浏览器移动位置（认死理型）</td>\n</tr>\n</tbody></table>\n<h1 id=\"定位模式转换\"><a href=\"#定位模式转换\" class=\"headerlink\" title=\"定位模式转换\"></a>定位模式转换</h1><p>跟 浮动一样， 元素添加了 绝对定位和固定定位之后， 元素模式也会发生转换， 都转换为 行内块模式，</p>\n<p>** 因此 比如 行内元素 如果添加了 绝对定位或者 固定定位后 浮动后，可以不用转换模式，直接给高度和宽度就可以了。**</p>\n<h1 id=\"元素的显示与隐藏\"><a href=\"#元素的显示与隐藏\" class=\"headerlink\" title=\"元素的显示与隐藏\"></a>元素的显示与隐藏</h1><p>在 CSS 中有三个显示和隐藏的单词比较常见，我们要区分开，他们分别是 display visibility 和 overflow。</p>\n<p>他们的主要目的是让一个元素在页面中消失，但是不在文档源码中删除。 最常见的是网站广告，当我们点击类似关闭不见了，但是我们重新刷新页面，它们又会出现和你玩躲猫猫！！</p>\n<h2 id=\"display-显示\"><a href=\"#display-显示\" class=\"headerlink\" title=\"display 显示\"></a>display 显示</h2><p>display 设置或检索对象是否及如何显示。</p>\n<p>display : none 隐藏对象 与它相反的是 display:block 除了转换为块级元素之外，同时还有显示元素的意思。</p>\n<p>特点： 隐藏之后，不再保留位置。</p>\n<h2 id=\"visibility-可见性\"><a href=\"#visibility-可见性\" class=\"headerlink\" title=\"visibility 可见性\"></a>visibility 可见性</h2><p>设置或检索是否显示对象。</p>\n<p>visible : 　对象可视</p>\n<p>hidden : 　对象隐藏</p>\n<p>特点： 隐藏之后，继续保留原有位置。（停职留薪）</p>\n<h2 id=\"overflow-溢出\"><a href=\"#overflow-溢出\" class=\"headerlink\" title=\"overflow 溢出\"></a>overflow 溢出</h2><p>检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。</p>\n<p>visible : 　不剪切内容也不添加滚动条。</p>\n<p>auto : 　 超出自动显示滚动条，不超出不显示滚动条</p>\n<p>hidden : 　不显示超过对象尺寸的内容，超出的部分隐藏掉</p>\n<p>scroll : 　不管超出内容否，总是显示滚动条</p>\n<h1 id=\"CSS-高级技巧\"><a href=\"#CSS-高级技巧\" class=\"headerlink\" title=\"CSS 高级技巧\"></a>CSS 高级技巧</h1><h2 id=\"CSS-用户界面样式\"><a href=\"#CSS-用户界面样式\" class=\"headerlink\" title=\"CSS 用户界面样式\"></a>CSS 用户界面样式</h2><p>所谓的界面样式， 就是更改一些用户操作样式， 比如 更改用户的鼠标样式， 表单轮廓等。但是比如滚动条的样式改动受到了很多浏览器的抵制，因此我们就放弃了。 防止表单域拖拽</p>\n<h3 id=\"鼠标样式-cursor\"><a href=\"#鼠标样式-cursor\" class=\"headerlink\" title=\"鼠标样式 cursor\"></a>鼠标样式 cursor</h3><p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p>\n<pre><code class=\"html\">cursor : default 小白 | pointer 小手 | move 移动 | text 文本</code></pre>\n<p>鼠标放我身上查看效果哦：</p>\n<pre><code class=\"html\">&lt;ul&gt;\n  &lt;li style=&quot;cursor:default&quot;&gt;我是小白&lt;/li&gt;\n  &lt;li style=&quot;cursor:pointer&quot;&gt;我是小手&lt;/li&gt;\n  &lt;li style=&quot;cursor:move&quot;&gt;我是移动&lt;/li&gt;\n  &lt;li style=&quot;cursor:text&quot;&gt;我是文本&lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n<p>尽量不要用 hand 因为 火狐不支持 pointer ie6 以上都支持的尽量用</p>\n<h3 id=\"轮廓-outline\"><a href=\"#轮廓-outline\" class=\"headerlink\" title=\"轮廓 outline\"></a>轮廓 outline</h3><p>是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p>\n<pre><code class=\"css\">outline: outline-color ||outline-style || outline-width;</code></pre>\n<p>但是我们都不关心可以设置多少，我们平时都是去掉的。</p>\n<p>最直接的写法是 ： outline: 0; 或者 outline: none;</p>\n<pre><code class=\"html\">&lt;input type=&quot;text&quot; style=&quot;outline: 0;&quot; /&gt;</code></pre>\n<h3 id=\"防止拖拽文本域-resize\"><a href=\"#防止拖拽文本域-resize\" class=\"headerlink\" title=\"防止拖拽文本域 resize\"></a>防止拖拽文本域 resize</h3><p>resize：none 这个单词可以防止 火狐 谷歌等浏览器随意的拖动 文本域。</p>\n<p>右下角可以拖拽：</p>\n<p><textarea></textarea></p>\n<p>右下角不可以拖拽：</p>\n<pre><code class=\"html\">&lt;textarea style=&quot;resize: none;&quot;&gt;&lt;/textarea&gt;</code></pre>\n<h2 id=\"vertical-align-垂直对齐\"><a href=\"#vertical-align-垂直对齐\" class=\"headerlink\" title=\"vertical-align 垂直对齐\"></a>vertical-align 垂直对齐</h2><p>以前我们讲过让带有宽度的块级元素居中对齐，是 margin: 0 auto;</p>\n<p>以前我们还讲过让文字居中对齐，是 text-align: center;</p>\n<p>但是我们从来没有讲过有垂直居中的属性， 我们的妈妈一直很担心我们的垂直居中怎么做。</p>\n<p>vertical-align 垂直对齐， 这个看上去很美好的一个属性， 实际有着不可捉摸的脾气，否则我们也不会这么晚来讲解。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/xian.jpg\" />\n\n<pre><code class=\"css\">vertical-align: baseline |top |middle |bottom;</code></pre>\n<p>设置或检索对象内容的垂直对其方式。</p>\n<p>vertical-align 不影响块级元素中的内容对齐，它只针对于 行内元素或者行内块元素，特别是行内块元素， <strong>通常用来控制图片/表单与文字的对齐</strong>。</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498467742995.png\" alt=\"1498467742995\"></p>\n<h3 id=\"图片、表单和文字对齐\"><a href=\"#图片、表单和文字对齐\" class=\"headerlink\" title=\"图片、表单和文字对齐\"></a>图片、表单和文字对齐</h3><p>所以我们知道，我们可以通过 vertical-align 控制图片和文字的垂直关系了。 默认的图片会和文字基线对齐。</p>\n<h3 id=\"去除图片底侧空白缝隙\"><a href=\"#去除图片底侧空白缝隙\" class=\"headerlink\" title=\"去除图片底侧空白缝隙\"></a>去除图片底侧空白缝隙</h3><p>有个很重要特性你要记住： 图片或者表单等行内块元素，他的底线会和父级盒子的基线对齐。这样会造成一个问题，就是图片底侧会有一个空白缝隙。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/3.jpg\" />\n\n<p>解决的方法就是：</p>\n<ol>\n<li>给 img vertical-align:middle | top 等等。 让图片不要和基线对齐。<img src=\"https://zclzone.gitee.io/resource/image/blog/media/1633.png\"  width=\"500\"  style=\"border: 1px dashed #ccc;\" /></li>\n</ol>\n<ol>\n<li>给 img 添加 display：block; 转换为块级元素就不会存在问题了。<img src=\"https://zclzone.gitee.io/resource/image/blog/media/sina1.png\" width=\"500\" style=\"border: 1px dashed #ccc;\"/></li>\n</ol>\n<h1 id=\"溢出的文字隐藏\"><a href=\"#溢出的文字隐藏\" class=\"headerlink\" title=\"溢出的文字隐藏\"></a>溢出的文字隐藏</h1><h2 id=\"word-break-自动换行\"><a href=\"#word-break-自动换行\" class=\"headerlink\" title=\"word-break:自动换行\"></a>word-break:自动换行</h2><p>normal 使用浏览器默认的换行规则。</p>\n<p>break-all 允许在单词内换行。</p>\n<p>keep-all 只能在半角空格或连字符处换行。</p>\n<p>主要处理英文单词</p>\n<h2 id=\"white-space\"><a href=\"#white-space\" class=\"headerlink\" title=\"white-space\"></a>white-space</h2><p>white-space 设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容</p>\n<p>normal : 　默认处理方式<br>nowrap : 　强制在同一行内显示所有文本，直到文本结束或者遭遇 br 标签对象才换行。</p>\n<p>可以处理中文</p>\n<h2 id=\"text-overflow-文字溢出\"><a href=\"#text-overflow-文字溢出\" class=\"headerlink\" title=\"text-overflow 文字溢出\"></a>text-overflow 文字溢出</h2><p>text-overflow : clip | ellipsis</p>\n<p>设置或检索是否使用一个省略标记（…）标示对象内文本的溢出</p>\n<p>clip : 　不显示省略标记（…），而是简单的裁切</p>\n<p>ellipsis : 　当对象内文本溢出时显示省略标记（…）</p>\n<p>注意一定要首先强制一行内显示，再次和 overflow 属性 搭配使用</p>\n<h2 id=\"CSS-精灵技术（sprite）-小妖精-雪碧\"><a href=\"#CSS-精灵技术（sprite）-小妖精-雪碧\" class=\"headerlink\" title=\"CSS 精灵技术（sprite） 小妖精 雪碧\"></a>CSS 精灵技术（sprite） 小妖精 雪碧</h2><h3 id=\"精灵技术产生的背景\"><a href=\"#精灵技术产生的背景\" class=\"headerlink\" title=\"精灵技术产生的背景\"></a>精灵技术产生的背景</h3><img src=\"https://zclzone.gitee.io/resource/image/blog/media/sss.png\" />\n\n<p>图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。</p>\n<p>然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度，出现了 CSS 精灵技术（也称 CSS Sprites、CSS 雪碧）。</p>\n<h3 id=\"精灵技术本质\"><a href=\"#精灵技术本质\" class=\"headerlink\" title=\"精灵技术本质\"></a>精灵技术本质</h3><p>简单地说，CSS 精灵是一种处理网页背景图像的方式。它将一个页面涉及到的所有零星背景图像都集中到一张大图中去，然后将大图应用于网页，这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。通常情况下，这个由很多小的背景图像合成的大图被称为精灵图（雪碧图），如下图所示为京东网站中的一个精灵图。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/jds.png\"  style=\"border: 1px dashed #ccc;\" />\n\n<h3 id=\"精灵技术的使用\"><a href=\"#精灵技术的使用\" class=\"headerlink\" title=\"精灵技术的使用\"></a>精灵技术的使用</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图，就需要使用 CSS 的 background-image、background-repeat 和 background-position 属性进行背景定位，其中最关键的是使用 background-position 属性精确地定位。</p>\n<h3 id=\"制作精灵图\"><a href=\"#制作精灵图\" class=\"headerlink\" title=\"制作精灵图\"></a>制作精灵图</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），那我们要做的，就是把小图拼合成一张大图。</p>\n<p>大部分情况下，精灵图都是网页美工做。</p>\n<pre><code>我们精灵图上放的都是小的装饰性质的背景图片。 插入图片不能往上放。\n我们精灵图的宽度取决于最宽的那个背景。\n我们可以横向摆放也可以纵向摆放，但是每个图片之间，间隔至少隔开偶数像素合适。\n在我们精灵图的最低端，留一片空隙，方便我们以后添加其他精灵图。</code></pre>\n<p>结束语： 小公司，背景图片很少的情况，没有必要使用精灵技术，维护成本太高。 如果是背景图片比较多，可以建议使用精灵技术。</p>\n<h2 id=\"字体图标\"><a href=\"#字体图标\" class=\"headerlink\" title=\"字体图标\"></a>字体图标</h2><p>图片是有诸多优点的，但是缺点很明显，比如图片不但增加了总文件的大小，还增加了很多额外的”http 请求”，这都会大大降低网页的性能的。更重要的是图片不能很好的进行“缩放”，因为图片放大和缩小会失真。 我们后面会学习移动端响应式，很多情况下希望我们的图标是可以缩放的。此时，一个非常重要的技术出现了，额不是出现了，是以前就有，是被从新”宠幸”啦。。 这就是字体图标（iconfont).</p>\n<h3 id=\"字体图标优点\"><a href=\"#字体图标优点\" class=\"headerlink\" title=\"字体图标优点\"></a>字体图标优点</h3><pre><code>可以做出跟图片一样可以做的事情,改变透明度、旋转度，等..\n但是本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果等等...\n本身体积更小，但携带的信息并没有削减。\n几乎支持所有的浏览器\n移动端设备必备良药...</code></pre>\n<h3 id=\"字体图标使用流程\"><a href=\"#字体图标使用流程\" class=\"headerlink\" title=\"字体图标使用流程\"></a>字体图标使用流程</h3><p>总体来说，字体图标按照如下流程：</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/fontt.png\" />\n\n<h4 id=\"设计字体图标\"><a href=\"#设计字体图标\" class=\"headerlink\" title=\"设计字体图标\"></a>设计字体图标</h4><p>假如图标是我们公司单独设计，那就需要第一步了，这个属于 UI 设计人员的工作， 他们在 illustrator 或 Sketch 这类矢量图形软件里创建 icon 图标， 比如下图：</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/03.jpg\" />\n\n<p>之后保存为 svg 格式，然后给我们前端人员就好了。</p>\n<p>其实第一步，我们不需要关心，只需要给我们这些图标就可以了，如果图标是大众的，网上本来就有的，可以直接跳过第一步，进入第三步。</p>\n<h4 id=\"上传生成字体包\"><a href=\"#上传生成字体包\" class=\"headerlink\" title=\"上传生成字体包\"></a>上传生成字体包</h4><p>当 UI 设计人员给我们 svg 文件的时候，我们需要转换成我们页面能使用的字体文件， 而且需要生成的是兼容性的适合各个浏览器的。</p>\n<p>​ 推荐网站： <a href=\"http://icomoon.io/\">http://icomoon.io</a></p>\n<p><strong>icomoon 字库</strong></p>\n<p>IcoMoon 成立于 2011 年，推出的第一个自定义图标字体生成器，它允许用户选择他们所需要的图标，使它们成一字型。 内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</p>\n<p>推荐网站： <a href=\"http://www.iconfont.cn/\">http://www.iconfont.cn/</a></p>\n<p><strong>阿里 icon font 字库</strong></p>\n<p><a href=\"http://www.iconfont.cn/\">http://www.iconfont.cn/</a></p>\n<p>这个是阿里妈妈 M2UX 的一个 icon font 字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用 AI 制作图标上传生成。 一个字，免费，免费！！</p>\n<p><strong>fontello</strong></p>\n<p><a href=\"http://fontello.com/\">http://fontello.com/</a></p>\n<p>在线定制你自己的 icon font 字体图标字库，也可以直接从 GitHub 下载整个图标集，该项目也是开源的。</p>\n<p><strong>Font-Awesome</strong></p>\n<p><a href=\"http://fortawesome.github.io/Font-Awesome/\">http://fortawesome.github.io/Font-Awesome/</a></p>\n<p>这是我最喜欢的字库之一了，更新比较快。目前已经有 369 个图标了。</p>\n<p><strong>Glyphicon Halflings</strong></p>\n<p><a href=\"http://glyphicons.com/\">http://glyphicons.com/</a></p>\n<p>这个字体图标可以在 Bootstrap 下免费使用。自带了 200 多个图标。</p>\n<p><strong>Icons8</strong></p>\n<p><a href=\"https://icons8.com/\">https://icons8.com/</a></p>\n<p>提供 PNG 免费下载，像素大能到 500PX</p>\n<h4 id=\"下载兼容字体包\"><a href=\"#下载兼容字体包\" class=\"headerlink\" title=\"下载兼容字体包\"></a>下载兼容字体包</h4><p>刚才上传完毕， 网站会给我们把 UI 做的 svg 图片转换为我们的字体格式， 然后下载下来就好了</p>\n<p>当然，我们不需要自己专门的图标，是想网上找几个图标使用，以上 2 步可以直接省略了， 直接到刚才的网站上找喜欢的下载使用吧。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/fontt1.png\" />\n\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/fontt2.png\" />\n\n<h4 id=\"字体引入到-HTML\"><a href=\"#字体引入到-HTML\" class=\"headerlink\" title=\"字体引入到 HTML\"></a>字体引入到 HTML</h4><p>得到压缩包之后，最后一步，是最重要的一步了， 就是字体文件已经有了，我们需要引入到我们页面中。</p>\n<ol>\n<li><p>首先把 以下 4 个文件放入到 fonts 文件夹里面。 通俗的做法</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498032122244.png\" alt=\"1498032122244\"></p>\n<h5 id=\"第一步：在样式里面声明字体：-告诉别人我们自己定义的字体\"><a href=\"#第一步：在样式里面声明字体：-告诉别人我们自己定义的字体\" class=\"headerlink\" title=\"第一步：在样式里面声明字体： 告诉别人我们自己定义的字体\"></a>第一步：在样式里面声明字体： 告诉别人我们自己定义的字体</h5><pre><code class=\"css\">@font-face &amp;#123;\n  font-family: &#39;icomoon&#39;;\n  src: url(&#39;fonts/icomoon.eot?7kkyc2&#39;);\n  src: url(&#39;fonts/icomoon.eot?7kkyc2#iefix&#39;) format(&#39;embedded-opentype&#39;), url(&#39;fonts/icomoon.ttf?7kkyc2&#39;)\n      format(&#39;truetype&#39;), url(&#39;fonts/icomoon.woff?7kkyc2&#39;) format(&#39;woff&#39;), url(&#39;fonts/icomoon.svg?7kkyc2#icomoon&#39;)\n      format(&#39;svg&#39;);\n  font-weight: normal;\n  font-style: normal;\n&amp;#125;</code></pre>\n<h5 id=\"第二步：给盒子使用字体\"><a href=\"#第二步：给盒子使用字体\" class=\"headerlink\" title=\"第二步：给盒子使用字体\"></a>第二步：给盒子使用字体</h5><pre><code class=\"css\">span &amp;#123;\n  font-family: &#39;icomoon&#39;;\n&amp;#125;</code></pre>\n<h5 id=\"第三步：盒子里面添加结构\"><a href=\"#第三步：盒子里面添加结构\" class=\"headerlink\" title=\"第三步：盒子里面添加结构\"></a>第三步：盒子里面添加结构</h5><pre><code class=\"css\">span::before &amp;#123;\n         content: &quot;\\e900&quot;;\n    &amp;#125;\n或者\n&lt;span&gt;&lt;/span&gt;</code></pre>\n<h3 id=\"追加新图标到原来库里面\"><a href=\"#追加新图标到原来库里面\" class=\"headerlink\" title=\"追加新图标到原来库里面\"></a>追加新图标到原来库里面</h3><p>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标，但是原来的不能删除，继续使用，此时我们需要这样做</p>\n<p>把压缩包里面的 selection.json 从新上传，然后，选中自己想要新的图标，从新下载压缩包，替换原来文件即可。</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/fontt5.png\" />\n\n</li>\n</ol>\n<h2 id=\"滑动门\"><a href=\"#滑动门\" class=\"headerlink\" title=\"滑动门\"></a>滑动门</h2><p>先来体会下现实中的滑动门,或者你可以叫做推拉门：</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/h.gif\" />\n\n<h3 id=\"滑动门出现的背景\"><a href=\"#滑动门出现的背景\" class=\"headerlink\" title=\"滑动门出现的背景\"></a>滑动门出现的背景</h3><p>制作网页时，为了美观，常常需要为网页元素设置特殊形状的背景，比如微信导航栏，有凸起和凹下去的感觉，最大的问题是里面的字数不一样多，咋办？</p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/wxx.jpg\" />\n\n<p>为了使各种特殊形状的背景能够自适应元素中文本内容的多少，出现了 CSS 滑动门技术。它从新的角度构建页面，使各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，可用性更强。 最常见于各种导航栏的滑动门。</p>\n<h3 id=\"核心技术\"><a href=\"#核心技术\" class=\"headerlink\" title=\"核心技术\"></a>核心技术</h3><p>核心技术就是利用 CSS 精灵（主要是背景位置）和盒子 padding 撑开宽度, 以便能适应不同字数的导航栏。</p>\n<p>一般的经典布局都是这样的：</p>\n<pre><code class=\"html\">&lt;li&gt;\n  &lt;a href=&quot;#&quot;&gt;\n    &lt;span&gt;导航栏内容&lt;/span&gt;\n  &lt;/a&gt;\n&lt;/li&gt;</code></pre>\n<p>总结：</p>\n<ol>\n<li>a 设置 背景左侧，padding 撑开合适宽度。</li>\n<li>span 设置背景右侧， padding 撑开合适宽度 剩下由文字继续撑开宽度。</li>\n<li>之所以 a 包含 span 就是因为 整个导航都是可以点击的。</li>\n</ol>\n<h2 id=\"before-和-after-伪元素-详解\"><a href=\"#before-和-after-伪元素-详解\" class=\"headerlink\" title=\"before 和 after 伪元素(详解)\"></a>before 和 after 伪元素(详解)</h2><p>之所以被称为伪元素，是因为他们不是真正的页面元素，html 没有对应的元素，但是其所有用法和表现行为与真正的页面元素一样，可以对其使用诸如页面元素一样的 css 样式，表面上看上去貌似是页面的某些元素来展现，实际上是 css 样式展现的行为，因此被称为伪元素。是伪元素在 html 代码机构中的展现，可以看出无法伪元素的结构无法审查</p>\n<p><strong>注意</strong></p>\n<p>伪元素:before 和:after 添加的内容默认是 inline 元素**；这个两个伪元素的<code>content</code>属性，表示伪元素的内容,设置:before 和:after 时必须设置其<code>content</code>属性，否则伪元素就不起作用。</p>\n<h2 id=\"过渡-CSS3\"><a href=\"#过渡-CSS3\" class=\"headerlink\" title=\"过渡(CSS3)\"></a>过渡(CSS3)</h2><p>过渡（transition)是 CSS3 中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。</p>\n<p>帧动画：通过一帧一帧的画面按照固定顺序和速度播放。如电影胶片</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498445034712.png\" alt=\"1498445034712\"></p>\n<img src=\"https://zclzone.gitee.io/resource/image/blog/media/zhen.gif\" />\n\n<p>在 CSS3 里使用 transition 可以实现补间动画（过渡效果），并且当前元素只要有“属性”发生变化时即存在两种状态(我们用 A 和 B 代指），就可以实现平滑的过渡，为了方便演示采用 hover 切换两种状态，但是并不仅仅局限于 hover 状态来实现过渡。</p>\n<p>语法格式:</p>\n<pre><code>transition: 要过渡的属性  花费时间  运动曲线  何时开始;\n如果有多组属性变化，还是用逗号隔开。</code></pre>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n<th>CSS</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>transition</td>\n<td>简写属性，用于在一个属性中设置四个过渡属性。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>transition-property</td>\n<td>规定应用过渡的 CSS 属性的名称。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>transition-duration</td>\n<td>定义过渡效果花费的时间。默认是 0。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>transition-timing-function</td>\n<td>规定过渡效果的时间曲线。默认是 “ease”。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>transition-delay</td>\n<td>规定过渡效果何时开始。默认是 0。</td>\n<td>3</td>\n</tr>\n</tbody></table>\n<p>如果想要所有的属性都变化过渡， 写一个 all 就可以</p>\n<p>transition-duration 花费时间 单位是 秒 s 比如 0.5s 这个 s 单位必须写 ms 毫秒</p>\n<p>运动曲线 默认是 ease</p>\n<p>何时开始 默认是 0s 立马开始</p>\n<p>运动曲线示意图：</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498445454760.png\" alt=\"1498445454760\"></p>\n<pre><code class=\"css\">div &amp;#123;\n  width: 200px;\n  height: 100px;\n  background-color: pink;\n  /* transition: 要过渡的属性  花费时间  运动曲线  何时开始; */\n  transition: width 0.6s ease 0s, height 0.3s ease-in 1s;\n  /* transtion 过渡的意思  这句话写到div里面而不是 hover里面 */\n&amp;#125;\ndiv:hover &amp;#123;\n  /* 鼠标经过盒子，我们的宽度变为400 */\n\n  width: 600px;\n  height: 300px;\n&amp;#125;\n\ntransition: all 0.6s; /* 所有属性都变化用all 就可以了  后面俩个属性可以省略 */</code></pre>\n<h2 id=\"2D-变形-CSS3-transform\"><a href=\"#2D-变形-CSS3-transform\" class=\"headerlink\" title=\"2D 变形(CSS3) transform\"></a>2D 变形(CSS3) transform</h2><p>transform 是 CSS3 中具有颠覆性的特征之一，可以实现元素的位移、旋转、倾斜、缩放，甚至支持矩阵方式，配合过渡和即将学习的动画知识，可以取代大量之前只能靠 Flash 才可以实现的效果。</p>\n<p>变形转换 transform transform 变换 变形的意思 《 transformers 变形金刚》</p>\n<h3 id=\"移动-translate-x-y\"><a href=\"#移动-translate-x-y\" class=\"headerlink\" title=\"移动 translate(x, y)\"></a>移动 translate(x, y)</h3><p>translate 移动平移的意思</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498443715586.png\" alt=\"1498443715586\"></p>\n<pre><code class=\"css\">translate(50px,50px);</code></pre>\n<p>使用 translate 方法来将文字或图像在水平方向和垂直方向上分别垂直移动 50 像素。</p>\n<p>可以改变元素的位置，x、y 可为负值；</p>\n<pre><code> translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）\n translateX(x)仅水平方向移动（X轴移动）\n translateY(Y)仅垂直方向移动（Y轴移动）</code></pre>\n<pre><code class=\"css\">.box &amp;#123;\n  width: 499.9999px;\n  height: 400px;\n  background: pink;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%); /* 走的自己的一半 */\n&amp;#125;</code></pre>\n<p>让定位的盒子水平居中</p>\n<h3 id=\"缩放-scale-x-y\"><a href=\"#缩放-scale-x-y\" class=\"headerlink\" title=\"缩放 scale(x, y)\"></a>缩放 scale(x, y)</h3><p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498444645795.png\" alt=\"1498444645795\"></p>\n<pre><code class=\"css\">transform: scale(0.8, 1);</code></pre>\n<p>可以对元素进行水平和垂直方向的缩放。该语句使用 scale 方法使该元素在水平方向上缩小了 20%，垂直方向上不缩放。</p>\n<pre><code>scale(X,Y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）\nscaleX(x)元素仅水平方向缩放（X轴缩放）\nscaleY(y)元素仅垂直方向缩放（Y轴缩放）</code></pre>\n<p>scale()的取值默认的值为 1，当值设置为 0.01 到 0.99 之间的任何值，作用使一个元素缩小；而任何大于或等于 1.01 的值，作用是让元素放大</p>\n<h3 id=\"旋转-rotate-deg\"><a href=\"#旋转-rotate-deg\" class=\"headerlink\" title=\"旋转 rotate(deg)\"></a>旋转 rotate(deg)</h3><p>可以对元素进行旋转，正值为顺时针，负值为逆时针；</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498443651293.png\" alt=\"1498443651293\"></p>\n<pre><code class=\"css\">transform: rotate(45deg);</code></pre>\n<p>注意单位是 deg 度数</p>\n<h3 id=\"transform-origin-可以调整元素转换变形的原点\"><a href=\"#transform-origin-可以调整元素转换变形的原点\" class=\"headerlink\" title=\"transform-origin 可以调整元素转换变形的原点\"></a>transform-origin 可以调整元素转换变形的原点</h3><p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498443912530.png\" alt=\"1498443912530\"></p>\n<pre><code class=\"css\">div &amp;#123;\n  transform-origin: left top;\n  transform: rotate(45deg);\n&amp;#125; /* 改变元素原点到左上角，然后进行顺时旋转45度 */</code></pre>\n<p>如果是 4 个角，可以用 left top 这些，如果想要精确的位置， 可以用 px 像素。</p>\n<pre><code class=\"css\">div &amp;#123;\n  transform-origin: 10px 10px;\n  transform: rotate(45deg);\n&amp;#125; /* 改变元素原点到x 为10  y 为10，然后进行顺时旋转45度 */</code></pre>\n<p>案例旋转楚乔传</p>\n<pre><code class=\"css\">div &amp;#123;\n  width: 250px;\n  height: 170px;\n  border: 1px solid pink;\n  margin: 200px auto;\n  position: relative;\n&amp;#125;\ndiv img &amp;#123;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  transition: all 0.6s;\n  transform-origin: top right;\n&amp;#125;\ndiv:hover img:nth-child(1) &amp;#123;\n  /* 鼠标经过div  第一张图片旋转 */\n  transform: rotate(60deg);\n&amp;#125;\ndiv:hover img:nth-child(2) &amp;#123;\n  transform: rotate(120deg);\n&amp;#125;\ndiv:hover img:nth-child(3) &amp;#123;\n  transform: rotate(180deg);\n&amp;#125;\ndiv:hover img:nth-child(4) &amp;#123;\n  transform: rotate(240deg);\n&amp;#125;\ndiv:hover img:nth-child(5) &amp;#123;\n  transform: rotate(300deg);\n&amp;#125;\ndiv:hover img:nth-child(6) &amp;#123;\n  transform: rotate(360deg);\n&amp;#125;</code></pre>\n<h3 id=\"倾斜-skew-deg-deg\"><a href=\"#倾斜-skew-deg-deg\" class=\"headerlink\" title=\"倾斜 skew(deg, deg)\"></a>倾斜 skew(deg, deg)</h3><p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498443827389.png\" alt=\"1498443827389\"></p>\n<pre><code class=\"css\">transform: skew(30deg, 0deg);</code></pre>\n<p>该实例通过 skew 方法把元素水平方向上倾斜 30 度，处置方向保持不变。</p>\n<p>可以使元素按一定的角度进行倾斜，可为负值，第二个参数不写默认为 0。</p>\n<h2 id=\"3D-变形-CSS3-transform\"><a href=\"#3D-变形-CSS3-transform\" class=\"headerlink\" title=\"3D 变形(CSS3) transform\"></a>3D 变形(CSS3) transform</h2><p>2d x y</p>\n<p>3d x y z</p>\n<p>左手坐标系</p>\n<p>伸出左手，让拇指和食指成“L”形，大拇指向右，食指向上，中指指向前方。这样我们就建立了一个左手坐标系，拇指、食指和中指分别代表 X、Y、Z 轴的正方向。如下图</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498445587576.png\" alt=\"1498445587576\"></p>\n<p>CSS3 中的 3D 坐标系与上述的 3D 坐标系是有一定区别的，相当于其绕着 X 轴旋转了 180 度，如下图</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498459001951.png\" alt=\"1498459001951\"></p>\n<p>简单记住他们的坐标：</p>\n<p>x 左边是负的，右边是正的</p>\n<p>y 上面是负的， 下面是正的</p>\n<p>z 里面是负的， 外面是正的</p>\n<h3 id=\"rotateX\"><a href=\"#rotateX\" class=\"headerlink\" title=\"rotateX()\"></a>rotateX()</h3><p>就是沿着 x 立体旋转.</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498445756802.png\" alt=\"1498445756802\"></p>\n<pre><code class=\"css\">img &amp;#123;\n  transition: all 0.5s ease 0s;\n&amp;#125;\nimg:hove &amp;#123;\n  transform: rotateX(180deg);\n&amp;#125;</code></pre>\n<h3 id=\"rotateY\"><a href=\"#rotateY\" class=\"headerlink\" title=\"rotateY()\"></a>rotateY()</h3><p>沿着 y 轴进行旋转</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498446043198.png\" alt=\"1498446043198\"></p>\n<pre><code class=\"css\">img &amp;#123;\n  transition: all 0.5s ease 0s;\n&amp;#125;\nimg:hove &amp;#123;\n  transform: rotateX(180deg);\n&amp;#125;</code></pre>\n<h3 id=\"rotateZ-\"><a href=\"#rotateZ-\" class=\"headerlink\" title=\"rotateZ()\"></a>rotateZ()</h3><p>沿着 z 轴进行旋转</p>\n<pre><code class=\"css\">img &amp;#123;\n  transition: all 0.25s ease-in 0s;\n&amp;#125;\nimg:hover &amp;#123;\n  /* transform:rotateX(180deg); */\n  /* transform:rotateY(180deg); */\n  /* transform:rotateZ(180deg); */\n  /* transform:rotateX(45deg) rotateY(180deg) rotateZ(90deg) skew(0,10deg); */\n&amp;#125;</code></pre>\n<h3 id=\"透视-perspective\"><a href=\"#透视-perspective\" class=\"headerlink\" title=\"透视(perspective)\"></a>透视(perspective)</h3><p>电脑显示屏是一个 2D 平面，图像之所以具有立体感（3D 效果），其实只是一种视觉呈现，通过透视可以实现此目的。</p>\n<p>透视可以将一个 2D 平面，在转换的过程当中，呈现 3D 效果。</p>\n<ul>\n<li>透视原理： 近大远小 。</li>\n<li>浏览器透视：把近大远小的所有图像，透视在屏幕上。</li>\n<li>perspective：视距，表示视点距离屏幕的长短。视点，用于模拟透视效果时人眼的位置</li>\n</ul>\n<p>注：并非任何情况下需要透视效果，根据开发需要进行设置。</p>\n<p>perspective 一般作为一个属性，设置给父元素，作用于所有 3D 转换的子元素</p>\n<p>理解透视距离原理：</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498446715314.png\" alt=\"1498446715314\"></p>\n<h3 id=\"translateX-x\"><a href=\"#translateX-x\" class=\"headerlink\" title=\"translateX(x)\"></a>translateX(x)</h3><p>仅水平方向移动**（X 轴移动）</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498459697576.png\" alt=\"1498459697576\"></p>\n<p>主要目的实现移动效果</p>\n<h3 id=\"translateY-y\"><a href=\"#translateY-y\" class=\"headerlink\" title=\"translateY(y)\"></a>translateY(y)</h3><p>仅垂直方向移动（Y 轴移动）</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498459770252.png\" alt=\"1498459770252\"></p>\n<h3 id=\"translateZ-z\"><a href=\"#translateZ-z\" class=\"headerlink\" title=\"translateZ(z)\"></a>translateZ(z)</h3><p>transformZ 的直观表现形式就是大小变化，实质是 XY 平面相对于视点的远近变化（说远近就一定会说到离什么参照物远或近，在这里参照物就是 perspective 属性）。比如设置了 perspective 为 200px;那么 transformZ 的值越接近 200，就是离的越近，看上去也就越大，超过 200 就看不到了，因为相当于跑到后脑勺去了，我相信你正常情况下，是看不到自己的后脑勺的。</p>\n<h3 id=\"translate3d-x-y-z\"><a href=\"#translate3d-x-y-z\" class=\"headerlink\" title=\"translate3d(x,y,z)\"></a>translate3d(x,y,z)</h3><p>[注意]其中，x 和 y 可以是长度值，也可以是百分比，百分比是相对于其本身元素水平方向的宽度和垂直方向的高度和；z 只能设置长度值</p>\n<h3 id=\"开门案例\"><a href=\"#开门案例\" class=\"headerlink\" title=\"开门案例\"></a>开门案例</h3><pre><code class=\"css\">body &amp;#123;\n&amp;#125;\n.door &amp;#123;\n  width: 300px;\n  height: 300px;\n  margin: 100px auto;\n  border: 1px solid gray;\n  perspective: 1000px;\n  background: url(&#39;images/dog.gif&#39;) no-repeat cover;\n  position: relative;\n&amp;#125;\n.door &gt; div &amp;#123;\n  box-sizing: border-box;\n  border: 1px solid black;\n&amp;#125;\n.left &amp;#123;\n  float: left;\n  width: 50%;\n  height: 100%;\n  background-color: brown;\n  transform-origin: left center;\n  transition: 1s;\n  position: relative;\n&amp;#125;\n.left::before &amp;#123;\n  content: &#39;&#39;;\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  top: 50%;\n  right: 0px;\n  transform: translateY(-10px);\n  border: 1px solid whitesmoke;\n&amp;#125;\n.right &amp;#123;\n  width: 50%;\n  height: 100%;\n  float: left;\n  background-color: brown;\n  transform-origin: right center;\n  transition: 1s;\n  position: relative;\n&amp;#125;\n.right::before &amp;#123;\n  content: &#39;&#39;;\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  top: 50%;\n  left: 0px;\n  transform: translateY(-10px);\n  border: 1px solid whitesmoke;\n&amp;#125;\n.door:hover .left &amp;#123;\n  transform: rotateY(-130deg);\n&amp;#125;\n.door:hover .right &amp;#123;\n  transform: rotateY(130deg);\n&amp;#125;</code></pre>\n<h3 id=\"backface-visibility\"><a href=\"#backface-visibility\" class=\"headerlink\" title=\"backface-visibility\"></a>backface-visibility</h3><p>backface-visibility 属性定义当元素不面向屏幕时是否可见。</p>\n<h3 id=\"翻转盒子案例\"><a href=\"#翻转盒子案例\" class=\"headerlink\" title=\"翻转盒子案例\"></a>翻转盒子案例</h3><pre><code class=\"css\">div &amp;#123;\n  width: 224px;\n  height: 224px;\n  margin: 100px auto;\n  position: relative;\n&amp;#125;\ndiv img &amp;#123;\n  position: absolute;\n  top: 0;\n  left: 0;\n  transition: all 1s;\n&amp;#125;\ndiv img:first-child &amp;#123;\n  z-index: 1;\n  backface-visibility: hidden; /* 不是正面对象屏幕，就隐藏 */\n&amp;#125;\ndiv:hover img &amp;#123;\n  transform: rotateY(180deg);\n&amp;#125;</code></pre>\n<h2 id=\"动画-CSS3-animation\"><a href=\"#动画-CSS3-animation\" class=\"headerlink\" title=\"动画(CSS3) animation\"></a>动画(CSS3) animation</h2><p>动画是 CSS3 中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。</p>\n<p>语法格式：</p>\n<pre><code class=\"css\">animation: 动画名称 动画时间 运动曲线 何时开始 播放次数 是否反方向;</code></pre>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498461096243.png\" alt=\"1498461096243\"></p>\n<p>关于几个值，除了名字，动画时间，延时有严格顺序要求其它随意 r</p>\n<pre><code class=\"css\">@keyframes 动画名称 &amp;#123;\n  from&amp;#123; 开始位置 &amp;#125;  0%\n  to&amp;#123;  结束  &amp;#125;  100%\n&amp;#125;</code></pre>\n<pre><code>animation-iteration-count:infinite;  无限循环播放\nanimation-play-state:paused;   暂停动画&quot;</code></pre>\n<h3 id=\"小汽车案例\"><a href=\"#小汽车案例\" class=\"headerlink\" title=\"小汽车案例\"></a>小汽车案例</h3><pre><code class=\"css\">body &amp;#123;\n  background: white;\n&amp;#125;\nimg &amp;#123;\n  width: 200px;\n&amp;#125;\n.animation &amp;#123;\n  animation-name: goback;\n  animation-duration: 5s;\n  animation-timing-function: ease;\n  animation-iteration-count: infinite;\n&amp;#125;\n@keyframes goback &amp;#123;\n  0% &amp;#123;\n  &amp;#125;\n  49% &amp;#123;\n    transform: translateX(1000px);\n  &amp;#125;\n  55% &amp;#123;\n    transform: translateX(1000px) rotateY(180deg);\n  &amp;#125;\n  95% &amp;#123;\n    transform: translateX(0) rotateY(180deg);\n  &amp;#125;\n  100% &amp;#123;\n    transform: translateX(0) rotateY(0deg);\n  &amp;#125;\n&amp;#125;</code></pre>\n<h2 id=\"伸缩布局-CSS3\"><a href=\"#伸缩布局-CSS3\" class=\"headerlink\" title=\"伸缩布局(CSS3)\"></a>伸缩布局(CSS3)</h2><p>CSS3 在布局方面做了非常大的改进，使得我们对块级元素的布局排列变得十分灵活，适应性非常强，其强大的伸缩性，在响应式开中可以发挥极大的作用。</p>\n<p>主轴：Flex 容器的主轴主要用来配置 Flex 项目，默认是水平方向</p>\n<p>侧轴：与主轴垂直的轴称作侧轴，默认是垂直方向的</p>\n<p>方向：默认主轴从左向右，侧轴默认从上到下</p>\n<p>主轴和侧轴并不是固定不变的，通过 flex-direction 可以互换。</p>\n<p><img src=\"https://zclzone.gitee.io/resource/image/blog/media/1498441839910.png\" alt=\"1498441839910\"></p>\n<p>Flex 布局的语法规范经过几年发生了很大的变化，也给 Flexbox 的使用带来一定的局限性，因为语法规范版本众多，浏览器支持不一致，致使 Flexbox 布局使用不多</p>\n<p><strong>2、各属性详解****</strong></p>\n<p>1.flex 子项目在主轴的缩放比例，不指定 flex 属性，则不参与伸缩分配</p>\n<p>min-width 最小值 min-width: 280px 最小宽度 不能小于 280</p>\n<p>max-width: 1280px 最大宽度 不能大于 1280</p>\n<p>2.flex-direction 调整主轴方向（默认为水平方向）</p>\n<p>flex-direction: column 垂直排列</p>\n<p>flex-direction: row 水平排列</p>\n<p><a href=\"http://m.ctrip.com/html5/\">http://m.ctrip.com/html5/</a> 携程网手机端地址</p>\n<p>3、justify-content 调整主轴对齐（水平对齐）</p>\n<p>子盒子如何在父盒子里面水平对齐</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n<th>白话文</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>flex-start</td>\n<td>默认值。项目位于容器的开头。</td>\n<td>让子元素从父容器的开头开始排序但是盒子顺序不变</td>\n</tr>\n<tr>\n<td>flex-end</td>\n<td>项目位于容器的结尾。</td>\n<td>让子元素从父容器的后面开始排序但是盒子顺序不变</td>\n</tr>\n<tr>\n<td>center</td>\n<td>项目位于容器的中心。</td>\n<td>让子元素在父容器中间显示</td>\n</tr>\n<tr>\n<td>space-between</td>\n<td>项目位于各行之间留有空白的容器内。</td>\n<td>左右的盒子贴近父盒子，中间的平均分布空白间距</td>\n</tr>\n<tr>\n<td>space-around</td>\n<td>项目位于各行之前、之间、之后都留有空白的容器内。</td>\n<td>相当于给每个盒子添加了左右 margin 外边距</td>\n</tr>\n</tbody></table>\n<p>4、align-items 调整侧轴对齐（垂直对齐）</p>\n<p>子盒子如何在父盒子里面垂直对齐（单行）</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n<th>白话文</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>stretch</td>\n<td>默认值。项目被拉伸以适应容器。</td>\n<td>让子元素的高度拉伸适用父容器（子元素不给高度的前提下)</td>\n</tr>\n<tr>\n<td>center</td>\n<td>项目位于容器的中心。</td>\n<td>垂直居中</td>\n</tr>\n<tr>\n<td>flex-start</td>\n<td>项目位于容器的开头。</td>\n<td>垂直对齐开始位置 上对齐</td>\n</tr>\n<tr>\n<td>flex-end</td>\n<td>项目位于容器的结尾。</td>\n<td>垂直对齐结束位置 底对齐</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>5、flex-wrap 控制是否换行</p>\n<p>当我们子盒子内容宽度多于父盒子的时候如何处理</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>nowrap</td>\n<td>默认值。规定灵活的项目不拆行或不拆列。 不换行，则 收缩（压缩） 显示 强制一行内显示</td>\n</tr>\n<tr>\n<td>wrap</td>\n<td>规定灵活的项目在必要的时候拆行或拆列。</td>\n</tr>\n<tr>\n<td>wrap-reverse</td>\n<td>规定灵活的项目在必要的时候拆行或拆列，但是以相反的顺序。</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>6、flex-flow 是 flex-direction、flex-wrap 的简写形式</p>\n<pre><code class=\"css\">flex-flow: flex-direction flex-wrap;</code></pre>\n<p>白话记： flex-flow: 排列方向 换不换行;</p>\n<p>两个中间用空格</p>\n<p>例如：</p>\n<pre><code class=\"css\">display: flex;\n/* flex-direction: row;\nflex-wrap: wrap;   这两句话等价于下面的这句话*/\nflex-flow: column wrap; /* 两者的综合 */</code></pre>\n<p>7、align-content 堆栈（由 flex-wrap 产生的独立行）多行垂直对齐方式齐</p>\n<p>align-content 是针对 flex 容器里面多轴(多行)的情况,align-items 是针对一行的情况进行排列。</p>\n<p>必须对父元素设置自由盒属性 display:flex;，并且设置排列方式为横向排列 flex-direction:row;并且设置换行，flex-wrap:wrap;这样这个属性的设置才会起作用。</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n<th>测试</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>stretch</td>\n<td>默认值。项目被拉伸以适应容器。</td>\n<td></td>\n</tr>\n<tr>\n<td>center</td>\n<td>项目位于容器的中心。</td>\n<td></td>\n</tr>\n<tr>\n<td>flex-start</td>\n<td>项目位于容器的开头。</td>\n<td></td>\n</tr>\n<tr>\n<td>flex-end</td>\n<td>项目位于容器的结尾。</td>\n<td></td>\n</tr>\n<tr>\n<td>space-between</td>\n<td>项目位于各行之间留有空白的容器内。</td>\n<td></td>\n</tr>\n<tr>\n<td>space-around</td>\n<td>项目位于各行之前、之间、之后都留有空白的容器内。</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>8、order 控制子项目的排列顺序，正序方式排序，从小到大</p>\n<p>用 css 来控制盒子的前后顺序。 用 order 就可以</p>\n<p>用整数值来定义排列顺序，数值小的排在前面。可以为负值。 默认值是 0</p>\n<pre><code class=\"css\">order: 1;</code></pre>\n<p>此知识点重在理解，要明确找出主轴、侧轴、方向，各属性对应的属性值</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckduyy4tv0001qsnv8u7h88z0","category_id":"ckduyy4u20004qsnv97495ikr","_id":"ckduyy4ua000iqsnvet0099zv"},{"post_id":"ckduyy4u00003qsnvf0ztewek","category_id":"ckduyy4u20004qsnv97495ikr","_id":"ckduyy4uc000mqsnvbl5s6dja"},{"post_id":"ckduyy4u40007qsnveeu588vk","category_id":"ckduyy4u20004qsnv97495ikr","_id":"ckduyy4uc000pqsnv5a45gc3x"},{"post_id":"ckduyy4u50009qsnvbq5e0ah8","category_id":"ckduyy4ub000lqsnvbt27d903","_id":"ckduyy4ud000tqsnv7paz24sq"},{"post_id":"ckduyy4u6000bqsnvanevdhbh","category_id":"ckduyy4ud000qqsnvfyj4gxnz","_id":"ckduyy4ue000xqsnv9tct09o4"},{"post_id":"ckduyy4u9000gqsnvei4c5bf5","category_id":"ckduyy4ud000uqsnvacl07m2a","_id":"ckduyy4ue000zqsnvcr3xeb1u"},{"post_id":"ckduyy4wy0010qsnv7ed8h9s3","category_id":"ckduyy4u20004qsnv97495ikr","_id":"ckduyy4x00012qsnv6kmwhkv2"}],"PostTag":[{"post_id":"ckduyy4tv0001qsnv8u7h88z0","tag_id":"ckduyy4u30005qsnvfx0g13jc","_id":"ckduyy4u9000eqsnv5rd1e2ws"},{"post_id":"ckduyy4u00003qsnvf0ztewek","tag_id":"ckduyy4u30005qsnvfx0g13jc","_id":"ckduyy4ub000kqsnv0vxzakws"},{"post_id":"ckduyy4u40007qsnveeu588vk","tag_id":"ckduyy4u30005qsnvfx0g13jc","_id":"ckduyy4uc000oqsnvhdda9stp"},{"post_id":"ckduyy4u50009qsnvbq5e0ah8","tag_id":"ckduyy4uc000nqsnvc6kngnw0","_id":"ckduyy4ud000sqsnv2s05d12l"},{"post_id":"ckduyy4u6000bqsnvanevdhbh","tag_id":"ckduyy4ud000rqsnvbswa9l3d","_id":"ckduyy4ue000wqsnv358z3834"},{"post_id":"ckduyy4u9000gqsnvei4c5bf5","tag_id":"ckduyy4ue000vqsnvfosu5dg3","_id":"ckduyy4ue000yqsnvaqa861zw"},{"post_id":"ckduyy4wy0010qsnv7ed8h9s3","tag_id":"ckduyy4u30005qsnvfx0g13jc","_id":"ckduyy4x00011qsnv4tyncxi9"}],"Tag":[{"name":"css","_id":"ckduyy4u30005qsnvfx0g13jc"},{"name":"算法","_id":"ckduyy4uc000nqsnvc6kngnw0"},{"name":"情感","_id":"ckduyy4ud000rqsnvbswa9l3d"},{"name":"JavaScript","_id":"ckduyy4ue000vqsnvfosu5dg3"}]}}